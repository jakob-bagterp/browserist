{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started with Web Scraping & Browser Automation","text":""},{"location":"#browserist-python-extension-for-selenium","title":"Browserist \u2013 Python Extension for Selenium \ud83d\udc68\u200d\ud83d\udcbb","text":""},{"location":"#what-is-browserist","title":"What is Browserist?","text":"<p>browserist 1. The belief that web browsers account for differences in websites or web applications in all of their ability and that a particular web browser is superior to others. 2. Discrimination or prejudice based on web browser.</p> <p>Despite the urban definition, Browserist is a Python extension of the Selenium web driver that makes it even easier to use different browsers for testing and automation.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>With Browserist as an extension to Selenium, you get:</p> <p> \u00a0\u00a0Improved stability and speed</p> <p> \u00a0\u00a0Simple syntax and less code</p> <p> \u00a0\u00a0Hassle-free setup across browsers: Chrome, Firefox, Edge, Safari, Internet Explorer</p> <p> \u00a0\u00a0Extensive framework of functions that makes browser automation easy</p> <p> \u00a0\u00a0Efficient development workflow with IntelliSense and type hints</p>"},{"location":"#example","title":"Example","text":"<p>Imagine you want to fill out a form on a website. Here's how easy it is with Browserist: We open an automated browser session, access the website, fill out the form, and then submit it. The browser will hereafter close automatically:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n\n    browser.input.value(\"//xpath/to/input/name\", \"My Name\")\n    browser.input.value(\"//xpath/to/input/email\", \"contact@example.com\")\n    browser.input.value(\"//xpath/to/input/phone\", \"123-456-7890\")\n    browser.input.value(\"//xpath/to/input/address\", \"123 Main St, Anytown USA\")\n\n    browser.click.button(\"//xpath/to/button/submit\")\n</code></pre> <p>If you're new to XPath \u2014 a powerful query language used to target elements of a web page \u2014 don't worry. You can find out more in the XPath basics tutorial.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to try? Let's get started.</p> <p>For Selenium users, learn more about how Browserist is different from Selenium.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"difference-from-selenium/","title":"How Is Browserist Different from Selenium?","text":"<p>Browserist isn't just an alternative to Selenium. It's a Python extension to Selenium that makes browser automation even easier.</p>","tags":["Selenium","Performance"]},{"location":"difference-from-selenium/#improved-stability-and-less-code","title":"Improved Stability and Less Code","text":"<p>Browserist improves stability with less code compared to standard use of Selenium. As browsers need time to render web pages, especially single-page applications, Selenium is often used with explicit timeouts:</p> With Selenium<pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\ndriver = webdriver.Chrome()\n\ndriver.get(\"https://example.com\")\ndriver.implicitly_wait(3)\nsearch_box = driver.find_element(By.XPATH, \"//xpath/to/input\")\nsearch_button = driver.find_element(By.XPATH, \"//xpath/to/button\")\nsearch_box.send_keys(\"Lorem ipsum\")\nsearch_button.click()\ndriver.quit()\n</code></pre> <p>Browserist does the same with less and cleaner code, yet also with increased stability and without explicit/implicit waits:</p> With Browserist<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.input.value(\"//xpath/to/input\", \"Lorem ipsum\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Selenium","Performance"]},{"location":"difference-from-selenium/#why-avoid-explicit-or-implicit-waits","title":"Why Avoid Explicit or Implicit Waits?","text":"<p>As you can't click a button that's not ready in the DOM, Browserist simply checks if elements are ready before interacting with them. This makes the code more stable and less prone to errors.</p>","tags":["Selenium","Performance"]},{"location":"difference-from-selenium/#sweet-spot-of-browser-automation","title":"Sweet Spot of Browser Automation","text":"<p>You don't want to be too fast nor too slow when automating a browser. You're simply dependant on too many factors that are beyond your control: internet speed, server response time, etc. The sweet spot is to be just right:</p> Timing Consequence Description Too short Code breaks Wait for 1 second, e.g. <code>time.sleep(1)</code>, hoping that an element is ready within a fixed amount of time. Just right Stable and fast Browserist checks if an element is ready before interacting with it, e.g. <code>wait.for_element()</code>. Too long Slow Wait for 10 seconds, e.g. <code>time.sleep(10)</code>, just to be sure an element is ready. <p>Ready to try? Let's get started.</p> <p>More Examples of Differences Between Browserist and Selenium</p> <p>Whether you want to use different browser types, work in headless mode, disable images, and much more, there are many ways where Browserist is simple to configure and with less code than Selenium.</p>","tags":["Selenium","Performance"]},{"location":"getting-started/","title":"Get Started in 3 Easy Steps \ud83d\ude80","text":"<p>Ready to try the easy way to do web scraping and browser automation with Python? Let's get started:</p>","tags":["Automation","Tutorial","Installation","Chrome","PyPI"]},{"location":"getting-started/#1-install-browserist-package","title":"1. Install Browserist Package","text":"<p>Assuming that Python is already installed, execute this command in the terminal to install the Browserist package:</p> <pre><code>pip install browserist\n</code></pre>","tags":["Automation","Tutorial","Installation","Chrome","PyPI"]},{"location":"getting-started/#2-install-browser-driver","title":"2. Install Browser Driver","text":"<p>Assuming that Chrome is already installed, you also need a driver that automates the Chrome browser:</p> <pre><code>pip install chromedriver\n</code></pre>","tags":["Automation","Tutorial","Installation","Chrome","PyPI"]},{"location":"getting-started/#3-first-script","title":"3. First Script","text":"<p>You're now ready to go:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre>","tags":["Automation","Tutorial","Installation","Chrome","PyPI"]},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Find more tips for installation of Browserist or installation of other browser types.</p> <p>Find more in-depth information in the user guide section.</p> <p>For advanced users, learn how to optimise performance:</p> <ul> <li>Headless mode</li> <li>Disable images</li> <li>Run multiple browsers in parallel</li> </ul> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Automation","Tutorial","Installation","Chrome","PyPI"]},{"location":"getting-started/first-script/","title":"First Script for Web Scraping","text":"<p>When you have installed relevant packages, you're ready to go. Simply type:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    headline = browser.get.text(\"//h1\")\n    print(headline)\n    browser.wait.seconds(5)\n</code></pre> <p>Alternatively, if you would prefer not to use the built-in context manager that automatically closes the browser when it has finished or an error occurs, you can manually close the browser using the <code>browser.quit()</code> method:</p> Python<pre><code>from browserist import Browser\n\nbrowser = Browser()\nbrowser.open.url(\"https://example.com\")\nheadline = browser.get.text(\"//h1\")\nprint(headline)\nbrowser.wait.seconds(5)\nbrowser.quit()\n</code></pre>","tags":["Automation","Tutorial"]},{"location":"getting-started/first-script/#how-to-use-different-browsers","title":"How to Use Different Browsers","text":"<p>If you have already installed any of the recommended browser drivers for Chrome, Edge, or Firefox browser drivers, you can try them with Browserist. Simply select the desired browser type in the <code>BrowserSettings</code> configuration:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME)\nedge = BrowserSettings(type=BrowserType.EDGE)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n        browser.wait.seconds(5)\n</code></pre> <p>Learn more about the recommended browser drivers for Browserist.</p>","tags":["Automation","Tutorial"]},{"location":"getting-started/installation/","title":"How to Install Browserist","text":"","tags":["Installation","Selenium","PyPI","Homebrew"]},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>In order to run Browserist successfully, you need to have the following installed:</p> <ul> <li>Python 3.11 or higher</li> <li>Relevant browser and driver</li> </ul> <p>Info</p> <p>Default browser driver is Chrome, except for Windows where Edge is the default browser.</p> <p>Optional browsers: Firefox, Safari, Internet Explorer.</p>","tags":["Installation","Selenium","PyPI","Homebrew"]},{"location":"getting-started/installation/#using-package-managers","title":"Using Package Managers","text":"<p>Assuming that Python is installed already, you can install Browserist with either of the following package managers: PyPI or Homebrew.</p>","tags":["Installation","Selenium","PyPI","Homebrew"]},{"location":"getting-started/installation/#pypi","title":"PyPI","text":"<p>For PyPI, execute this command in the terminal:</p> <pre><code>pip install browserist\n</code></pre> <p>Keep the package up to date with this command:</p> <pre><code>pip install --upgrade browserist\n</code></pre>","tags":["Installation","Selenium","PyPI","Homebrew"]},{"location":"getting-started/installation/#homebrew","title":"Homebrew","text":"<p>If you already have installed the Homebrew package manager for Mac and Linux, execute this terminal command to tap and install Browserist:</p> <pre><code>brew tap jakob-bagterp/browserist\nbrew install browserist\n</code></pre> <p>Use the same commands to keep the package up to date with Homebrew.</p>","tags":["Installation","Selenium","PyPI","Homebrew"]},{"location":"getting-started/recommended-drivers/","title":"Recommended Drivers for Browserist","text":"<p>Browserist supports automation with the most popular browser drivers. Find help installing the most common drivers:</p> <ul> <li>Chrome</li> <li>Edge</li> <li>Firefox</li> </ul>","tags":["Automation","Chrome","Edge","Firefox"]},{"location":"getting-started/recommended-drivers/#what-is-a-browser-driver","title":"What Is a Browser Driver?","text":"<p>A browser driver is a program that controls a web browser in a similar way to scrolling, clicking and pointing with a mouse on a desktop or gestures on a touchscreen. The driver is responsible for controlling the behaviour of the browser and interacting with the web page by sending commands to the browser and receiving responses.</p> <p>Since Browserist is based on the Selenium web driver for browser automation, Selenium is already included in the installation. Second and third, you only need to install a browser and its driver:</p> Requirement Description 1. Python package Browserist web automation extension to Selenium 2. Browser Chrome Edge Firefox 3. Driver ChromeDriver Microsoft Edge Driver GeckoDriver","tags":["Automation","Chrome","Edge","Firefox"]},{"location":"getting-started/recommended-drivers/#why-do-i-need-a-browser-driver","title":"Why Do I Need a Browser Driver?","text":"<p>While a browser is needed to render the content and graphics of a web page, including communicating with the web page server, it needs a driver to tell it what to do. The driver is responsible for controlling the behaviour of the browser and interacting with the web page.</p> <p>In other words, the driver replaces your mouse and keyboard with a program that controls the browser.</p>","tags":["Automation","Chrome","Edge","Firefox"]},{"location":"getting-started/install-browsers-and-drivers/chrome/","title":"How to Install Chrome and the ChromeDriver","text":"","tags":["Automation","Chrome"]},{"location":"getting-started/install-browsers-and-drivers/chrome/#install-google-chrome","title":"Install Google Chrome","text":"<p>Google Chrome is a free, open-source web browser developed by Google. Visit their website to find out more and download the latest version of Chrome.</p>","tags":["Automation","Chrome"]},{"location":"getting-started/install-browsers-and-drivers/chrome/#install-chromedriver","title":"Install ChromeDriver","text":"<p>With PyPI:</p> <pre><code>pip install chromedriver\n</code></pre> <p>With Homebrew:</p> <pre><code>brew install chromedriver\n</code></pre> <p>Google also provides a guide on how to install and download the ChromeDriver for Chrome.</p>","tags":["Automation","Chrome"]},{"location":"getting-started/install-browsers-and-drivers/chrome/#troubleshooting-and-tips","title":"Troubleshooting and Tips","text":"<p>If you are planning to use different browsers, please refer to the guide on options for browser types.</p> <p>Tip</p> <p>Always keep your browser and driver up to date. The ChromeDriver version should usually match the browser version, otherwise Browserist might throw an error.</p>","tags":["Automation","Chrome"]},{"location":"getting-started/install-browsers-and-drivers/chrome/#how-to-use-chrome-with-browserist","title":"How to Use Chrome with Browserist","text":"<p>Once you have successfully installed the Chrome browser and its ChromeDriver, you can start using them with Browserist. Here is an example of how to automate Chrome using Browserist. Simply select Chrome as the browser type in the <code>BrowserSettings</code> configuration:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.CHROME)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre> <p>Lean more about how to use different browser types.</p>","tags":["Automation","Chrome"]},{"location":"getting-started/install-browsers-and-drivers/edge/","title":"How to Install Edge and the Microsoft Edge WebDriver","text":"","tags":["Automation","Edge"]},{"location":"getting-started/install-browsers-and-drivers/edge/#install-microsoft-edge","title":"Install Microsoft Edge","text":"<p>Edge is a free, open-source web browser developed by Microsoft. Visit their website to find out more and download the latest version of Edge.</p>","tags":["Automation","Edge"]},{"location":"getting-started/install-browsers-and-drivers/edge/#install-microsoft-edge-webdriver","title":"Install Microsoft Edge WebDriver","text":"<p>Microsoft also provides a guide on how to install and download the WebDriver for Microsoft Edge.</p>","tags":["Automation","Edge"]},{"location":"getting-started/install-browsers-and-drivers/edge/#troubleshooting-and-tips","title":"Troubleshooting and Tips","text":"<p>If you are planning to use different browsers, please refer to the guide on options for browser types.</p> <p>Tip</p> <p>Always keep your browser and driver up to date. The EdgeDriver version should usually match the browser version, otherwise Browserist might throw an error.</p>","tags":["Automation","Edge"]},{"location":"getting-started/install-browsers-and-drivers/edge/#how-to-use-edge-with-browserist","title":"How to Use Edge with Browserist","text":"<p>Once you have successfully installed the Edge browser and its WebDriver, you can start using them with Browserist. Here is an example of how to automate Edge using Browserist. Simply select Edge as the browser type in the <code>BrowserSettings</code> configuration:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.EDGE)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre> <p>Lean more about how to use different browser types.</p>","tags":["Automation","Edge"]},{"location":"getting-started/install-browsers-and-drivers/firefox/","title":"How to Install Firefox and the GeckoDriver","text":"","tags":["Automation","Firefox"]},{"location":"getting-started/install-browsers-and-drivers/firefox/#install-mozilla-firefox","title":"Install Mozilla Firefox","text":"<p>Firefox is a free, open-source web browser developed by Mozilla. Visit their website to find out more and download the latest version of Firefox.</p>","tags":["Automation","Firefox"]},{"location":"getting-started/install-browsers-and-drivers/firefox/#install-geckodriver","title":"Install GeckoDriver","text":"<p>With Homebrew:</p> <pre><code>brew install geckodriver\n</code></pre> <p>Mozilla also provides a guide on how to install and download the Geckodriver for Firefox.</p>","tags":["Automation","Firefox"]},{"location":"getting-started/install-browsers-and-drivers/firefox/#troubleshooting-and-tips","title":"Troubleshooting and Tips","text":"<p>If you are planning to use different browsers, please refer to the guide on options for browser types.</p> <p>Tip</p> <p>Always keep your browser and driver up to date. The GeckoDriver version should usually match the browser version, otherwise Browserist might throw an error.</p>","tags":["Automation","Firefox"]},{"location":"getting-started/install-browsers-and-drivers/firefox/#how-to-use-firefox-with-browserist","title":"How to Use Firefox with Browserist","text":"<p>Once you have successfully installed the Firefox browser and its GeckoDriver, you can start using them with Browserist. Here is an example of how to automate Firefox using Browserist. Simply select Firefox as the browser type in the <code>BrowserSettings</code> configuration:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre> <p>Lean more about how to use different browser types.</p>","tags":["Automation","Firefox"]},{"location":"index/tags/","title":"Tags","text":"<p>List of all tags and relevant pages:</p>"},{"location":"index/tags/#tag:automation","title":"Automation","text":"<ul> <li>            Chrome          </li> <li>            Edge          </li> <li>            Firefox          </li> <li>            First Script          </li> <li>            Get Started with Web Scraping in 3 Easy Steps          </li> <li>            Recommended Drivers          </li> </ul>"},{"location":"index/tags/#tag:browser-types","title":"Browser Types","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserType          </li> <li>            Main Differences          </li> <li>            Overview          </li> </ul>"},{"location":"index/tags/#tag:cheatsheet","title":"Cheatsheet","text":"<ul> <li>            Axes          </li> <li>            Links          </li> <li>            Node Selection          </li> <li>            SEO          </li> <li>            Text          </li> </ul>"},{"location":"index/tags/#tag:chrome","title":"Chrome","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserType          </li> <li>            Chrome          </li> <li>            Get Started with Web Scraping in 3 Easy Steps          </li> <li>            Main Differences          </li> <li>            Recommended Drivers          </li> </ul>"},{"location":"index/tags/#tag:combo","title":"Combo","text":"<ul> <li>            Cookie Banner          </li> <li>            Log In          </li> <li>            Search          </li> <li>            cookie_banner          </li> <li>            log_in          </li> <li>            search          </li> </ul>"},{"location":"index/tags/#tag:disable-images","title":"Disable Images","text":"<ul> <li>            Disable Images          </li> <li>            Disable Images          </li> <li>            Overview          </li> <li>            Results Summary          </li> </ul>"},{"location":"index/tags/#tag:documentation","title":"Documentation","text":"<ul> <li>            Apple          </li> <li>            BrowserSettings          </li> <li>            BrowserType          </li> <li>            Documentation          </li> <li>            Google          </li> <li>            Huawei          </li> <li>            Microsoft          </li> <li>            OnePlus          </li> <li>            Oppo          </li> <li>            PageLoadStrategy          </li> <li>            ProxySettings          </li> <li>            Samsung          </li> <li>            TimeoutSettings          </li> <li>            Vivo          </li> <li>            Xiaomi          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            attribute          </li> <li>            check_if          </li> <li>            check_if          </li> <li>            click          </li> <li>            cookie_banner          </li> <li>            download_file          </li> <li>            get          </li> <li>            get          </li> <li>            get          </li> <li>            handle          </li> <li>            html          </li> <li>            iframe          </li> <li>            input          </li> <li>            log_in          </li> <li>            mouse          </li> <li>            open          </li> <li>            open          </li> <li>            page          </li> <li>            page_title          </li> <li>            prompt          </li> <li>            screenshot          </li> <li>            search          </li> <li>            set          </li> <li>            set          </li> <li>            text          </li> <li>            tool          </li> <li>            url          </li> <li>            url          </li> <li>            user_agent          </li> </ul>"},{"location":"index/tags/#tag:edge","title":"Edge","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserType          </li> <li>            Edge          </li> <li>            Main Differences          </li> <li>            Recommended Drivers          </li> </ul>"},{"location":"index/tags/#tag:firefox","title":"Firefox","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserType          </li> <li>            Firefox          </li> <li>            Main Differences          </li> <li>            Recommended Drivers          </li> </ul>"},{"location":"index/tags/#tag:headless","title":"Headless","text":"<ul> <li>            Headless          </li> <li>            Headless Mode          </li> <li>            Overview          </li> <li>            Overview          </li> <li>            Results Summary          </li> <li>            Viewport          </li> </ul>"},{"location":"index/tags/#tag:homebrew","title":"Homebrew","text":"<ul> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:installation","title":"Installation","text":"<ul> <li>            Get Started with Web Scraping in 3 Easy Steps          </li> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:internet-explorer","title":"Internet Explorer","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserType          </li> </ul>"},{"location":"index/tags/#tag:navigation","title":"Navigation","text":"<ul> <li>            Basics          </li> <li>            Iframes          </li> <li>            Scrolling          </li> <li>            Tabs          </li> <li>            Window Size          </li> <li>            Windows          </li> </ul>"},{"location":"index/tags/#tag:performance","title":"Performance","text":"<ul> <li>            1. Linear          </li> <li>            2. Ascynchronous          </li> <li>            3. Multi-Threading          </li> <li>            4. Multi-Processing          </li> <li>            Difference from Selenium          </li> <li>            Disable Images          </li> <li>            Headless          </li> <li>            Overview          </li> <li>            Overview          </li> <li>            Page Load Strategy          </li> <li>            PageLoadStrategy          </li> <li>            Results Summary          </li> <li>            Timeout Strategy          </li> <li>            TimeoutSettings          </li> </ul>"},{"location":"index/tags/#tag:proxy","title":"Proxy","text":"<ul> <li>            Proxy          </li> <li>            ProxySettings          </li> </ul>"},{"location":"index/tags/#tag:pypi","title":"PyPI","text":"<ul> <li>            Get Started with Web Scraping in 3 Easy Steps          </li> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:safari","title":"Safari","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserType          </li> </ul>"},{"location":"index/tags/#tag:selenium","title":"Selenium","text":"<ul> <li>            Browser Types          </li> <li>            Browserist Compared to Selenium          </li> <li>            Difference from Selenium          </li> <li>            Disable Images          </li> <li>            Headless Mode          </li> <li>            Installation          </li> <li>            Main Differences          </li> <li>            Page Load Strategy          </li> </ul>"},{"location":"index/tags/#tag:settings","title":"Settings","text":"<ul> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserSettings          </li> <li>            BrowserType          </li> <li>            Check Connection          </li> <li>            Cookie Banner          </li> <li>            Disable Images          </li> <li>            Disable Images          </li> <li>            Headless          </li> <li>            Headless Mode          </li> <li>            Log In          </li> <li>            Main Differences          </li> <li>            Overview          </li> <li>            Page Load Strategy          </li> <li>            PageLoadStrategy          </li> <li>            Proxy          </li> <li>            ProxySettings          </li> <li>            Search          </li> <li>            Timeout Strategy          </li> <li>            TimeoutSettings          </li> <li>            User Agent          </li> <li>            Viewport          </li> <li>            cookie_banner          </li> <li>            log_in          </li> <li>            search          </li> </ul>"},{"location":"index/tags/#tag:tabs-and-windows","title":"Tabs and Windows","text":"<ul> <li>            Tabs          </li> <li>            Windows          </li> </ul>"},{"location":"index/tags/#tag:tutorial","title":"Tutorial","text":"<ul> <li>            1. Linear          </li> <li>            2. Ascynchronous          </li> <li>            3. Multi-Threading          </li> <li>            4. Multi-Processing          </li> <li>            Absolute and Relative          </li> <li>            Apple          </li> <li>            Axes          </li> <li>            Basics          </li> <li>            Basics          </li> <li>            Browser Types          </li> <li>            Browser Types          </li> <li>            BrowserSettings          </li> <li>            BrowserType          </li> <li>            Browserist Compared to Selenium          </li> <li>            Check Connection          </li> <li>            Conditional          </li> <li>            Conditional Functions          </li> <li>            Context Manager          </li> <li>            Cookie Banner          </li> <li>            Count Elements          </li> <li>            Disable Images          </li> <li>            Disable Images          </li> <li>            Documentation          </li> <li>            Download Files          </li> <li>            Execute JavaScript          </li> <li>            Explicit in Seconds          </li> <li>            First Script          </li> <li>            Get HTML Source          </li> <li>            Get Started with Web Scraping in 3 Easy Steps          </li> <li>            Google          </li> <li>            Headless          </li> <li>            Headless Mode          </li> <li>            Huawei          </li> <li>            Iframes          </li> <li>            Implicit for Elements          </li> <li>            Input Validation          </li> <li>            Links          </li> <li>            Log In          </li> <li>            Main Differences          </li> <li>            Microsoft          </li> <li>            Node Selection          </li> <li>            OnePlus          </li> <li>            Oppo          </li> <li>            Overview          </li> <li>            Overview          </li> <li>            Page Load Strategy          </li> <li>            PageLoadStrategy          </li> <li>            Proxy          </li> <li>            ProxySettings          </li> <li>            Results Summary          </li> <li>            SEO          </li> <li>            Samsung          </li> <li>            Screenshots          </li> <li>            Scrolling          </li> <li>            Search          </li> <li>            Tabs          </li> <li>            Target Attributes          </li> <li>            Text          </li> <li>            Timeout Strategy          </li> <li>            TimeoutSettings          </li> <li>            User Agent          </li> <li>            User Guide          </li> <li>            Viewport          </li> <li>            Vivo          </li> <li>            Window Size          </li> <li>            Windows          </li> <li>            Xiaomi          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            __main__          </li> <li>            attribute          </li> <li>            check_if          </li> <li>            check_if          </li> <li>            click          </li> <li>            cookie_banner          </li> <li>            download_file          </li> <li>            get          </li> <li>            get          </li> <li>            get          </li> <li>            handle          </li> <li>            html          </li> <li>            iframe          </li> <li>            input          </li> <li>            log_in          </li> <li>            mouse          </li> <li>            open          </li> <li>            open          </li> <li>            page          </li> <li>            page_title          </li> <li>            prompt          </li> <li>            screenshot          </li> <li>            search          </li> <li>            set          </li> <li>            set          </li> <li>            text          </li> <li>            tool          </li> <li>            url          </li> <li>            url          </li> <li>            user_agent          </li> </ul>"},{"location":"index/tags/#tag:viewport","title":"Viewport","text":"<ul> <li>            Overview          </li> <li>            Viewport          </li> </ul>"},{"location":"index/tags/#tag:xpath","title":"XPath","text":"<ul> <li>            Absolute and Relative          </li> <li>            Axes          </li> <li>            Basics          </li> <li>            Browserist Compared to Selenium          </li> <li>            Conditional Functions          </li> <li>            Links          </li> <li>            Node Selection          </li> <li>            SEO          </li> <li>            Target Attributes          </li> <li>            Text          </li> </ul>"},{"location":"performance/disable-images/","title":"Why Disable Images?","text":"<p>It's often faster to load pages when you don't download images. So if you don't need to process images when scraping a web page, simply don't wait for such media data \u2013 often heavy payloads \u2013 and use less bandwidth.</p> <p>This is often done in combination with headless mode, since you can't see any graphics in a headless browser.</p>","tags":["Tutorial","Performance","Disable Images","Settings"]},{"location":"performance/disable-images/#how-to-configure","title":"How to Configure","text":"<p>With Browserist, it's simple to configure. As the default setting for <code>disable_images</code> is <code>False</code> in <code>BrowserSettings</code>, we simply alter it to <code>True</code> like this:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(disable_images=True)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Performance","Disable Images","Settings"]},{"location":"performance/disable-images/#standardised-settings-across-browser-types","title":"Standardised Settings Across Browser Types","text":"<p>If you want to disable image downloads with Selenium, you typically would use different settings from browser to browser. Browserist solves this problem so that settings for Chrome, Firefox, Edge, etc. are standardised.</p> <p>For example, you can easily scale test runs across different browsers with a configuration like this:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME, disable_images=True)\nedge = BrowserSettings(type=BrowserType.EDGE, disable_images=True)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX, disable_images=True)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Performance","Disable Images","Settings"]},{"location":"performance/disable-images/#supported-browsers","title":"Supported Browsers","text":"<p>Note</p> <p>Not all browsers support disabling of images well: Both Safari and Internet Explorer requires us to update global settings in the operating system that may impact how these browsers behave outside Browserist.</p> <p>Browsers that support disabling of images:</p> Chrome Edge Firefox Safari Internet Explorer","tags":["Tutorial","Performance","Disable Images","Settings"]},{"location":"performance/headless/","title":"How to Run Browsers in Headless Mode","text":"","tags":["Tutorial","Performance","Headless","Settings"]},{"location":"performance/headless/#what-is-headless","title":"What Is Headless?","text":"<p>Headless simply means that the browser runs in the background without being visible on the screen. This is also more efficient because it uses fewer resources, while headless browsers often are faster.</p> <p>This is often done in combination with disabling images, since you can't see any graphics in a headless browser.</p>","tags":["Tutorial","Performance","Headless","Settings"]},{"location":"performance/headless/#how-to-configure","title":"How to Configure","text":"<p>The default setting for <code>headless</code> is <code>False</code> in <code>BrowserSettings</code>. Simply alter this to <code>True</code>, and now your browser driver runs in headless mode:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(headless=True)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Performance","Headless","Settings"]},{"location":"performance/headless/#advantages-and-disadvantages","title":"Advantages and Disadvantages","text":"<p>When you want to run an automated browser in the background while doing something else, headless mode is a good option. Also, headless mode often is faster and takes up less resources now that the browser doesn't have to render a window on the screen.</p> <p>In the other hand, the disadvantage is obviously that you can't observe what the browser is doing.</p> <p>Tip</p> <p>Not all websites support interaction with an automated browser in headless mode. Sometimes you then need to revert back to the default non-headless mode.</p>","tags":["Tutorial","Performance","Headless","Settings"]},{"location":"performance/headless/#standardised-settings-across-browser-types","title":"Standardised Settings Across Browser Types","text":"<p>If you want a headless browser with Selenium, you typically would use different settings from browser to browser. Browserist solves this problem so that settings for Chrome, Firefox, Edge, etc. are standardised.</p> <p>For example, you can easily scale test runs across different browsers in a lightweight, headless configuration:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME, headless=True)\nedge = BrowserSettings(type=BrowserType.EDGE, headless=True)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX, headless=True)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Performance","Headless","Settings"]},{"location":"performance/headless/#supported-browsers","title":"Supported Browsers","text":"<p>Note</p> <p>Not all browsers support headless mode, for instance Safari and Internet Explorer.</p> <p>Browsers that support headless mode:</p> Chrome Edge Firefox Safari Internet Explorer","tags":["Tutorial","Performance","Headless","Settings"]},{"location":"performance/overview/","title":"How to Boost Performance \ud83c\udfce\ufe0f","text":"<p>Running multiple browsers in parallel can take a lot of time and resources. If you apply the right strategy, you can more the workflow much more efficient. Find tips and tricks to speed up your web scraping and browser automation.</p>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/overview/#headless-mode","title":"Headless Mode","text":"<p>A browser use many resources to render graphics on the screen. By running it in headless mode, no window is opened and the browser runs in the background. This is an easy way to boost performance and reduce resource usage.</p>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/overview/#disable-images","title":"Disable Images","text":"<p>The largest payload for a web page is often image files. If you don't need images for your workflow and want to improve performance, you can disable images for the browser.</p>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/overview/#parallelization","title":"Parallelization","text":"<p>If you need to run multiple browser instances in parallel, you can try various parallelization methods:</p> <ul> <li>Asynchronous</li> <li>Multi-threading</li> <li>Multi-processing</li> </ul> <p>These methods can also be combined with headless mode and disabling images for even more efficiency.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/parallelization/1-linear/","title":"Linear and Not Parallelized","text":"","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/1-linear/#code-example","title":"Code Example","text":"<p>Example of how to run multiple browsers sequentially after each other and not in parallel:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\ndef open_website_with(settings: BrowserSettings):\n    with Browser(settings) as browser:\n        print(f\"1. Opening {settings.type.name} browser\")\n        browser.open.url(\"https://example.com\")\n        print(f\"2. Page loaded with {settings.type.name} browser\")\n        print(f\"3. Closing {settings.type.name} browser\")\n\ndef main():\n    chrome = BrowserSettings(type=BrowserType.CHROME)\n    edge = BrowserSettings(type=BrowserType.EDGE)\n    firefox = BrowserSettings(type=BrowserType.FIREFOX)\n\n    for browser_settings in [chrome, edge, firefox]:\n        open_website_with(browser_settings)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/1-linear/#which-method-is-faster","title":"Which Method Is Faster?","text":"<p>Multi-processing and multi-threading are the fastest methods, sometimes twice as fast as running the same job in linear or asynchronous mode. For instance, measuring execution time of the code examples below yield the results like this in seconds:</p> Method Rank Improvement Average Min Max Linear Baseline 8.59 8.55 8.62 Asynchronous 2 % 8.42 8.33 8.48 Multi-threading 103 % 4.24 4.20 4.29 Multi-processing 105 % 4.20 3.69 6.05","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/2-asynchronous/","title":"Asynchronous","text":"","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/2-asynchronous/#code-example","title":"Code Example","text":"<p>Example of how to run multiple browsers in asynchronous mode:</p> Python<pre><code>import asyncio\nfrom browserist import Browser, BrowserSettings, BrowserType\n\nasync def open_website_with(settings: BrowserSettings):\n    with Browser(settings) as browser:\n        print(f\"1. Opening {settings.type.name} browser\")\n        browser.open.url(\"https://example.com\")\n        print(f\"2. Page loaded with {settings.type.name} browser\")\n        await asyncio.sleep(.1)\n        print(f\"3. Closing {settings.type.name} browser\")\n\nasync def main():\n    chrome = BrowserSettings(type=BrowserType.CHROME)\n    edge = BrowserSettings(type=BrowserType.EDGE)\n    firefox = BrowserSettings(type=BrowserType.FIREFOX)\n\n    async with asyncio.TaskGroup() as task_group:\n        task_group.create_task(open_website_with(chrome))\n        task_group.create_task(open_website_with(edge))\n        task_group.create_task(open_website_with(firefox))\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/2-asynchronous/#which-method-is-faster","title":"Which Method Is Faster?","text":"<p>Multi-processing and multi-threading are the fastest methods, sometimes twice as fast as running the same job in linear or asynchronous mode. For instance, measuring execution time of the code examples below yield the results like this in seconds:</p> Method Rank Improvement Average Min Max Linear Baseline 8.59 8.55 8.62 Asynchronous 2 % 8.42 8.33 8.48 Multi-threading 103 % 4.24 4.20 4.29 Multi-processing 105 % 4.20 3.69 6.05","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/3-multi-threading/","title":"Multi-Threading","text":"","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/3-multi-threading/#code-example","title":"Code Example","text":"<p>Example of how to run multiple browsers in multi-threading mode:</p> Python<pre><code>from threading import Thread\nfrom browserist import Browser, BrowserSettings, BrowserType\n\nclass BrowserThread(Thread):\n    def __init__(self, settings: BrowserSettings):\n        Thread.__init__(self)\n        self.settings: BrowserSettings = settings\n\n    def run(self):\n        with Browser(self.settings) as browser:\n            print(f\"1. Opening {self.settings.type.name} browser\")\n            browser.open.url(\"https://example.com\")\n            print(f\"2. Page loaded with {self.settings.type.name} browser\")\n            print(f\"3. Closing {self.settings.type.name} browser\")\n\ndef main():\n    chrome = BrowserSettings(type=BrowserType.CHROME)\n    edge = BrowserSettings(type=BrowserType.EDGE)\n    firefox = BrowserSettings(type=BrowserType.FIREFOX)\n\n    threads: list[Thread] = []\n    for browser_setting in [chrome, edge, firefox]:\n        thread = BrowserThread(browser_setting)\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/3-multi-threading/#which-method-is-faster","title":"Which Method Is Faster?","text":"<p>Multi-processing and multi-threading are the fastest methods, sometimes twice as fast as running the same job in linear or asynchronous mode. For instance, measuring execution time of the code examples below yield the results like this in seconds:</p> Method Rank Improvement Average Min Max Linear Baseline 8.59 8.55 8.62 Asynchronous 2 % 8.42 8.33 8.48 Multi-threading 103 % 4.24 4.20 4.29 Multi-processing 105 % 4.20 3.69 6.05","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/4-multi-processing/","title":"Multi-Processing","text":"","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/4-multi-processing/#code-example","title":"Code Example","text":"<p>Example of how to run multiple browsers in multi-processing mode:</p> Python<pre><code>import multiprocessing\nfrom browserist import Browser, BrowserSettings, BrowserType\n\ndef open_website_with(settings: BrowserSettings):\n    with Browser(settings) as browser:\n        print(f\"1. Opening {settings.type.name} browser\")\n        browser.open.url(\"https://example.com\")\n        print(f\"2. Page loaded with {settings.type.name} browser\")\n        print(f\"3. Closing {settings.type.name} browser\")\n\ndef main():\n    chrome = BrowserSettings(type=BrowserType.CHROME)\n    edge = BrowserSettings(type=BrowserType.EDGE)\n    firefox = BrowserSettings(type=BrowserType.FIREFOX)\n\n    browser_settings = [chrome, edge, firefox]\n    number_of_processes = len(browser_settings)\n\n    with multiprocessing.Pool(number_of_processes) as pool:\n        pool.map(open_website_with, browser_settings)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/4-multi-processing/#which-method-is-faster","title":"Which Method Is Faster?","text":"<p>Multi-processing and multi-threading are the fastest methods, sometimes twice as fast as running the same job in linear or asynchronous mode. For instance, measuring execution time of the code examples below yield the results like this in seconds:</p> Method Rank Improvement Average Min Max Linear Baseline 8.59 8.55 8.62 Asynchronous 2 % 8.42 8.33 8.48 Multi-threading 103 % 4.24 4.20 4.29 Multi-processing 105 % 4.20 3.69 6.05","tags":["Tutorial","Performance"]},{"location":"performance/parallelization/results-summary/","title":"How to Run Multiple Browsers in Parallel","text":"","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/parallelization/results-summary/#which-methods-can-boost-the-performance","title":"Which Methods Can Boost the Performance?","text":"<p>You can run Browserist as a normal, linear script or with various methods for concurrent processing:</p> <ul> <li>Asynchronous</li> <li>Multi-threading</li> <li>Multi-processing</li> </ul>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/parallelization/results-summary/#which-method-is-faster","title":"Which Method Is Faster?","text":"<p>Multi-processing and multi-threading are the fastest methods, sometimes twice as fast as running the same job in linear or asynchronous mode. For instance, measuring execution time of the code examples below yield the results like this in seconds:</p> Method Rank Improvement Average Min Max Linear Baseline 8.59 8.55 8.62 Asynchronous 2 % 8.42 8.33 8.48 Multi-threading 103 % 4.24 4.20 4.29 Multi-processing 105 % 4.20 3.69 6.05 <p>Find code examples of the tests below.</p>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/parallelization/results-summary/#basic-code-example","title":"Basic Code Example","text":"<p>Imagine that you want to scrape a website with multiple browser types: Chrome, Edge, Firefox. A simplified example of this:</p> <ol> <li>Open browser instance</li> <li>Load website example.com and do something</li> <li>Close browser instance</li> </ol> <p>How the code could look:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    print(\"1. Opening X browser\")\n    browser.open.url(\"https://example.com\")\n    print(\"2. Page loaded with X browser\")\n    print(\"3. Closing X browser\")\n</code></pre> <p>This will print the following to the terminal:</p> <pre><code>1. Opening X browser\n2. Page loaded with X browser\n3. Closing X browser\n</code></pre>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/parallelization/results-summary/#test-code-examples","title":"Test Code Examples","text":"<p>Let's try this with four different methods from linear to concurrent processing and run the tests with three different browsers (Chrome, Edge, Firefox):</p> <ol> <li>Linear</li> <li>Asynchronous</li> <li>Multi-threading</li> <li>Multi-processing</li> </ol>","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"performance/parallelization/results-summary/#even-faster-with-headless-and-disable-images","title":"Even Faster with Headless and Disable Images","text":"<p>Gain even more performance by running the browsers in headless mode and with images disabled, including the added benefit that headless mode allows you to run the job as a background task while doing something else.</p> <p>For example:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(\n    headless=True,\n    disable_images=True)\n\nwith Browser(settings) as browser:\n    print(\"1. Opening X browser\")\n    browser.open.url(\"https://example.com\")\n    print(\"2. Page loaded with X browser\")\n    print(\"3. Closing X browser\")\n</code></pre> <p>Results in seconds and compared to previous method:</p> Method Rank Improvement Average Min Max Linear 2 % 8.46 6.34 12.78 Asynchronous 7 % 8.01 6.15 11.11 Multi-threading 113 % 4.03 3.98 4.07 Multi-processing 139 % 3.60 3.57 3.65","tags":["Tutorial","Performance","Headless","Disable Images"]},{"location":"project/donate/","title":"Donations","text":"<p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"project/support-and-contribution/","title":"Support and Contribution","text":""},{"location":"project/support-and-contribution/#contribute","title":"Contribute","text":"<p>If you have suggestions or changes to the module, feel free to add to the code and create a pull request.</p>"},{"location":"project/support-and-contribution/#report-bugs","title":"Report Bugs","text":"<p>If you encounter any issues, you can report them as bugs or raise issues.</p>"},{"location":"reference/","title":"Browserist Documentation \ud83d\udcda","text":"<p>Your main resource when automating browsers with Browserist. Find details about all methods in this section.</p>","tags":["Documentation","Tutorial"]},{"location":"reference/#structure","title":"Structure","text":"<p>Find the method you need in the left-hand menu. Each <code>__main__</code> entry refers to its parent object, and the structure of the documentation is:</p> Structure<pre><code>browser.__main__\n    .back()\n    .forward()\n    ...\n    .check_if\n        .contains_any_text()\n        .contains_text()\n        ...\n    ...\n    .wait.__main__\n        .for_element()\n        .random_seconds\n        .seconds()\n        .until.__main__\n            .contains_any_text()\n            ...\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/#how-to-chain-methods","title":"How to Chain Methods","text":"<p>Examples of how to chain the methods:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.back()\n    browser.check_if.contains_any_text(\"//xpath/to/element\")\n    browser.wait.seconds(5)\n    browser.wait.until.contains_any_text(\"//xpath/to/element\")\n</code></pre> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/","title":"browser.check_if","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.contains_any_text","title":"<code>contains_any_text(xpath)</code>","text":"<p>Check if element contains any text.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element contains any text, <code>False</code> otherwise.</p> Example <pre><code>if browser.check_if.contains_any_text(\"//xpath/to/button\"):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.contains_text","title":"<code>contains_text(xpath, regex, ignore_case=True)</code>","text":"<p>Check if element contains text.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>regex</code> <code>str</code> <p>Regular expression or text to search for. The condition works for both ordinary text (e.g. <code>\"Submit\"</code>) or regular expression (e.g. <code>r\"colou?r\"</code>). Note it's a search for text, not a strict text match.</p> required <code>ignore_case</code> <code>bool</code> <p>Ignore case when searching for text.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element contains text specified in the regex, <code>False</code> otherwise.</p> Example <p>Without regular expression:</p> <pre><code>if browser.check_if.contains_text(\"//xpath/to/button\", \"Save\"):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre> <p>With regular expression:</p> <pre><code>if browser.check_if.contains_text(\"//xpath/to/button\", r\"^Submit\", ignore_case=False):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.does_exist","title":"<code>does_exist(xpath)</code>","text":"<p>Check if element exists.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element exists, <code>False</code> otherwise.</p> Example <pre><code>if browser.check_if.does_exist(\"//xpath/to/button\"):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_clickable","title":"<code>is_clickable(xpath)</code>","text":"<p>Check if element is clickable.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element is clickable, <code>False</code> otherwise.</p> Example <pre><code>if browser.check_if.is_clickable(\"//xpath/to/button\"):\n    browser.click.button(\"//xpath/to/button\")\nelse:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_disabled","title":"<code>is_disabled(xpath)</code>","text":"<p>Check if element is disabled.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element is disabled, <code>False</code> otherwise.</p> Example <pre><code>if not browser.check_if.is_disabled(\"//xpath/to/button\"):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_displayed","title":"<code>is_displayed(xpath)</code>","text":"<p>Check visibility status of an element.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element is displayed, <code>False</code> otherwise.</p> Example <pre><code>if browser.check_if.is_displayed(\"//xpath/to/button\"):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_enabled","title":"<code>is_enabled(xpath)</code>","text":"<p>Check if element is enabled.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element is enabled, <code>False</code> otherwise.</p> Example <pre><code>if browser.check_if.is_enabled(\"//xpath/to/button\"):\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_image_loaded","title":"<code>is_image_loaded(xpath)</code>","text":"<p>Check is image is loaded and ready in the DOM.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if image is loaded, <code>False</code> otherwise.</p> Example <pre><code>if browser.check_if.is_image_loaded(\"//xpath/to/img\"):\n    image_url = browser.get.url.from_image(\"//xpath/to/img\")\n    browser.click.download(image_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_in_viewport","title":"<code>is_in_viewport(xpath)</code>","text":"<p>Check if an element is visible in the current viewport.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element is visible in the current viewport, <code>False</code> otherwise.</p> Example <pre><code>if not browser.check_if.is_in_viewport(\"//xpath/to/element\"):\n    browser.scroll.into_view(\"//xpath/to/element\")\nbrowser.screenshot.visible_portion()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/check-if/#browserist.browser.check_if.__main__.CheckIfDriverMethods.is_selected","title":"<code>is_selected(xpath)</code>","text":"<p>Check if element is selected, e.g. checkbox or radio button.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if element is selected, <code>False</code> otherwise.</p> Example <pre><code>if not browser.check_if.is_selected(\"//xpath/to/input\"):\n    browser.input.select(\"//xpath/to/input\")\nbrowser.click.button_if_contains_text(\"//xpath/to/button\", \"Submit\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/click/","title":"browser.click","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/click/#browserist.browser.click.__main__.ClickDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/click/#browserist.browser.click.__main__.ClickDriverMethods.button","title":"<code>button(xpath, timeout=None)</code>","text":"<p>Click button.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the button element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/click/#browserist.browser.click.__main__.ClickDriverMethods.button_if_contains_text","title":"<code>button_if_contains_text(xpath, regex, ignore_case=True, timeout=None)</code>","text":"<p>Click button if it contains certain text.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the button element.</p> required <code>regex</code> <code>str</code> <p>Regular expression or text to search for. The condition works for both ordinary text (e.g. <code>\"Submit\"</code>) or regular expression (e.g. <code>r\"colou?r\"</code>). Note it's a search for text, not a strict text match.</p> required <code>ignore_case</code> <code>bool</code> <p>Ignore case when searching for text.</p> <code>True</code> <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <p>Without regular expression:</p> <pre><code>browser.click.button_if_contains_text(\"//xpath/to/button\", \"Save\")\n</code></pre> <p>With regular expression:</p> <pre><code>browser.click.button_if_contains_text(\"//xpath/to/button\", r\"^Submit\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/click/#browserist.browser.click.__main__.ClickDriverMethods.download","title":"<code>download(xpath, timeout=None, await_download=False, expected_file_name=None, idle_download_timeout=None)</code>","text":"<p>Click button and download file.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the download button element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for button element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <code>await_download</code> <code>bool</code> <p>Set to <code>False</code> to download the file in the background \u2013 this will also bypass the <code>expected_file_name</code> and <code>idle_download_timeout</code> parameters. Set to <code>True</code> to wait for the download to complete.</p> <code>False</code> <code>expected_file_name</code> <code>str | None</code> <p>Expected file name to determine when the download is complete. If <code>None</code>, this may be slower as Browserist will attempt to guess the file name by monitoring changes in the download directory.</p> <code>None</code> <code>idle_download_timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for file size to not increase, which is constantly renewed as long as the file size increases. If <code>None</code>, the global idle download timeout setting is used (default 3 seconds).</p> <code>None</code> Download Directory <p>The download directory is implicitly defined in the <code>download_dir</code> parameter of <code>BrowserSettings</code>.</p> <p>Avoid that multiple browser instances have access to the same download directory. As Browserist monitors the download directory for file changes, it may cause unexpected behaviour if multiple files are downloaded to the same directory at the same time.</p> Example <p>Examples in context:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.download(\"//xpath/to/button\")\n    browser.click.download(\"//xpath/to/button\", await_download=True)\n    browser.click.download(\"//xpath/to/button\", await_download=True, expected_file_name=\"file.zip\")\n</code></pre> <p>Download file in background without waiting. If the browser closes during a download, the download may be aborted or left incomplete:</p> <pre><code>    browser.click.download(\"//xpath/to/button\")\n</code></pre> <p>Download file and wait for download to complete. This will attempt to guess the file name, which may be slower:</p> <pre><code>    browser.click.download(\"//xpath/to/button\", await_download=True)\n</code></pre> <p>Download expected file name and wait for download to complete. It's faster if you know the file name:</p> <pre><code>    browser.click.download(\"//xpath/to/button\", await_download=True, expected_file_name=\"file.zip\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/click/#browserist.browser.click.__main__.ClickDriverMethods.download_and_get_file_path","title":"<code>download_and_get_file_path(xpath, timeout=None, idle_download_timeout=None)</code>","text":"<p>Click button to download file and get file path once download is complete. As downloads are automatically handled by the browser, this is useful if you don't know the file name beforehand.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the download button element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for button element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <code>idle_download_timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for file size to not increase, which is constantly renewed as long as the file size increases. If <code>None</code>, the global idle download timeout setting is used (default 3 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>Path</code> <p>Path to the downloaded file. Return type is the standard library <code>pathlib.Path</code>.</p> Download Directory <p>The download directory is implicitly defined in the <code>download_dir</code> parameter of <code>BrowserSettings</code>.</p> <p>Avoid that multiple browser instances have access to the same download directory. As Browserist monitors the download directory for file changes, it may cause unexpected behaviour if multiple files are downloaded to the same directory at the same time.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    file_path = browser.click.download_and_get_file_path(\"//xpath/to/button\")\n</code></pre> <p>The return type is <code>Path</code> from the standard <code>pathlib</code> library, and so you can easily get the file name or absolute path.</p> <p>For instance, this will output the file name <code>file.zip</code> in the terminal:</p> <pre><code>    print(file_path.name)\n</code></pre> <p>And this will output the absolute file path <code>/home/user/downloads/file.zip</code> in the terminal:</p> <pre><code>    print(file_path.absolute())\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/iframe/","title":"browser.iframe","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/iframe/#browserist.browser.iframe.__main__.IframeDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/iframe/#browserist.browser.iframe.__main__.IframeDriverMethods.switch_to","title":"<code>switch_to(xpath, timeout=None)</code>","text":"<p>Switch to iframe.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the iframe.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>browser.iframe.switch_to(\"//xpath/to/iframe\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/iframe/#browserist.browser.iframe.__main__.IframeDriverMethods.switch_to_original_page","title":"<code>switch_to_original_page()</code>","text":"<p>After switch to iframe, use this to come back to the original page.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.iframe.switch_to(\"//xpath/to/iframe\")\n    element_text = browser.get.text(\"//xpath/to/element\")\n    print(element_text)\n    browser.iframe.switch_to_original_page()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/input/","title":"browser.input","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/input/#browserist.browser.input.__main__.InputDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/input/#browserist.browser.input.__main__.InputDriverMethods.clear","title":"<code>clear(xpath, timeout=None)</code>","text":"<p>Clear any text input from form field.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the input field.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>browser.input.clear(\"//xpath/to/input\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/input/#browserist.browser.input.__main__.InputDriverMethods.select","title":"<code>select(xpath, timeout=None)</code>","text":"<p>Select input field, similar to clicking the mouse on a form field.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the input field.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Raises:</p> Type Description <code>MethodNotSupportedInHeadlessModeException</code> <p>Raised if the browser is in headless mode.</p> Example <p>Basic usage:</p> <pre><code>browser.input.select(\"//xpath/to/input\")\n</code></pre> <p>Or use advanced XPath expressions to, for instance, select an input in a dropdown selector with a specific text:</p> <pre><code>browser.input.select(\"//xpath/to/input[text()='some text']\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/input/#browserist.browser.input.__main__.InputDriverMethods.value","title":"<code>value(xpath, value, timeout=None)</code>","text":"<p>Input value into form field.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>value</code> <code>str</code> <p>Input value.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>browser.input.value(\"//xpath/to/input\", \"some value\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/main/","title":"browser","text":"<p>Main class of Browserist that sets the Selenium web driver and contains all helper functions.</p> <p>How to initiate the browser driver:</p> Example <p>Basic usage:</p> Basic usage<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>How to initiate the browser driver with custom settings and use Firefox:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(browser_type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/main/#browserist.browser.__main__.Browser-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/main/#browserist.browser.__main__.Browser.back","title":"<code>back()</code>","text":"<p>Press the browser's back button.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.open.url(\"https://google.com\")\n    browser.back()  # Go back to previous page Example.com\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/main/#browserist.browser.__main__.Browser.forward","title":"<code>forward()</code>","text":"<p>Press the browser's forward button.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.open.url(\"https://google.com\")\n    browser.back()  # Go back to previous page Example.com\n    browser.forward()  # Return to Google.com\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/main/#browserist.browser.__main__.Browser.quit","title":"<code>quit()</code>","text":"<p>Quit the browser.</p> Example <pre><code>from browserist import Browser\n\nbrowser = Browser()\nbrowser.open.url(\"https://example.com\")\nbrowser.quit()\n</code></pre> Tip <p>Instead of manually quitting the browser with <code>browser.quit()</code>, it's recommend to use the context manager and <code>with</code> statements. The example above could then be refactored to:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/main/#browserist.browser.__main__.Browser.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the current page.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.refresh()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/mouse/","title":"browser.mouse","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/mouse/#browserist.browser.mouse.__main__.MouseDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/mouse/#browserist.browser.mouse.__main__.MouseDriverMethods.hover","title":"<code>hover(xpath, timeout=None)</code>","text":"<p>Simulate moving the mouse cursor over the middle of an element.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>browser.mouse.hover(\"//xpath/to/element\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/open/","title":"browser.open","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/open/#browserist.browser.open.__main__.OpenDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/open/#browserist.browser.open.__main__.OpenDriverMethods.url","title":"<code>url(url)</code>","text":"<p>Open web page by URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to open, e.g. <code>\"https://example.com\"</code>.</p> required Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/open/#browserist.browser.open.__main__.OpenDriverMethods.url_if_not_current","title":"<code>url_if_not_current(url, ignore_trailing_slash=True, ignore_parameters=False, ignore_https=False)</code>","text":"<p>Open a URL if it isn't already the current URL.</p> Tip <p>Useful when doing multiple operations on a page where you don't want to reload the page, but either A) only if it isn't a specific URL or B) to ensure that a process is only used on a specific page.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to open if not current URL, e.g. <code>\"https://example.com\"</code>.</p> required <code>ignore_trailing_slash</code> <code>bool</code> <p>Ignore whether the URL is <code>\"https://example.com\"</code> or <code>\"https://example.com/\"</code>.</p> <code>True</code> <code>ignore_parameters</code> <code>bool</code> <p>Ignore parameters in the URL, e.g. <code>?page=1</code> in <code>\"https://example.com/articles?page=1\"</code>.</p> <code>False</code> <code>ignore_https</code> <code>bool</code> <p>Ignore whether the URL is <code>\"http://example.com\"</code> or <code>\"https://example.com\"</code>.</p> <code>False</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.open.url_if_not_current(\"https://example.com/\", ignore_trailing_slash=True)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/prompt/","title":"browser.prompt","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/prompt/#browserist.browser.prompt.__main__.PromptDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/prompt/#browserist.browser.prompt.__main__.PromptDriverMethods.input_value","title":"<code>input_value(xpath, prompt_message, validate_input_regex=None, timeout=None)</code>","text":"<p>Prompt user for value through the terminal and insert this value into form field.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of form field to insert value into.</p> required <code>prompt_message</code> <code>str</code> <p>Message to prompt user with in the terminal.</p> required <code>validate_input_regex</code> <code>str | None</code> <p>If provided, the input value will be validated against this regex.</p> <code>None</code> <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <p>Basic usage:</p> <pre><code>browser.prompt.input_value(\"//xpath/to/input\", \"Input value:\")\n</code></pre> <p>In context of a login form:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.prompt.input_value(\"//xpath/to/input/username\", \"Input username:\")\n    browser.prompt.input_value(\"//xpath/to/input/password\", \"Input password:\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/prompt/#browserist.browser.prompt.__main__.PromptDriverMethods.proceed_yes_or_no","title":"<code>proceed_yes_or_no()</code>","text":"<p>Prompt user in the terminal whether to proceed or not.</p> Allowed Inputs Description <code>y</code>, <code>yes</code> or press <code>Enter</code>/<code>Return</code> Proceed and return <code>True</code>. <code>n</code>, <code>no</code> Do not proceed and return <code>False</code>. Any other input Prompt user to try again. <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if user wants to proceed, <code>False</code> otherwise.</p> Example <p>Basic usage:</p> <pre><code>browser.prompt.proceed_yes_or_no():\n</code></pre> <p>In context of a script:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    if browser.prompt.proceed_yes_or_no():\n        browser.click.button(\"//xpath/to/button\")\n    else:\n        print(\"Quitting...\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/screenshot/","title":"browser.screenshot","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/screenshot/#browserist.browser.screenshot.__main__.ScreenshotDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/screenshot/#browserist.browser.screenshot.__main__.ScreenshotDriverMethods.complete_page","title":"<code>complete_page(file_name=None, destination_dir=None, delay_seconds=0.25)</code>","text":"<p>Take screenshot of complete page and save as PNG image.</p> Note <p>Firefox is recommended browser for complete page screenshots as it executes this in one go. Other browsers can't capture the entire page at once, and so we need to merge screenshots portion by portions \u2013 and this is obviously much slower. For example:</p> <pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(browser_type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.complete_page()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str | None</code> <p>Name of the file. If <code>None</code>, the file name is generated automatically.</p> <code>None</code> <code>destination_dir</code> <code>str | Path | None</code> <p>Destination directory. If <code>None</code>, the directory defined in the browser settings is used.</p> <code>None</code> <code>delay_seconds</code> <code>float</code> <p>As we stitch several screenshots together by scrolling down the page, adjust iteration delay to ensure that the screen is updated after each scroll.</p> <code>0.25</code> Example <p>Default file name and destination:</p> <pre><code>browser.screenshot.complete_page()\n</code></pre> <p>Custom file name and default destination:</p> <pre><code>browser.screenshot.complete_page(\"image.png\")\n</code></pre> <p>Custom file name and destination:</p> <pre><code>browser.screenshot.complete_page(\"image.png\", \"/screenshots/folder\")\n</code></pre> <p>Default file name and custom destination:</p> <pre><code>browser.screenshot.complete_page(destination_dir=\"/screenshots/folder\")\n</code></pre> Note <p>When setting a custom file name, screenshots should always be saved as a PNG file with a <code>.png</code> extension.</p>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/screenshot/#browserist.browser.screenshot.__main__.ScreenshotDriverMethods.element","title":"<code>element(xpath, file_name=None, destination_dir=None)</code>","text":"<p>Take screenshot of visible portion and save as PNG image.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>file_name</code> <code>str | None</code> <p>Name of the file. If <code>None</code>, the file name is generated automatically.</p> <code>None</code> <code>destination_dir</code> <code>str | Path | None</code> <p>Destination directory. If <code>None</code>, the directory defined in the browser settings is used.</p> <code>None</code> Example <p>Default file name and destination:</p> <pre><code>browser.screenshot.element(\"//xpath/to/element\")\n</code></pre> <p>Custom file name and default destination:</p> <pre><code>browser.screenshot.element(\"//xpath/to/element\", \"image.png\")\n</code></pre> <p>Custom file name and destination:</p> <pre><code>browser.screenshot.element(\"//xpath/to/element\", \"image.png\", \"/screenshots/folder\")\n</code></pre> <p>Default file name and custom destination:</p> <pre><code>browser.screenshot.element(\"//xpath/to/element\", destination_dir=\"/screenshots/folder\")\n</code></pre> Note <p>When setting a custom file name, screenshots should always be saved as a PNG file with a <code>.png</code> extension.</p>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/screenshot/#browserist.browser.screenshot.__main__.ScreenshotDriverMethods.visible_portion","title":"<code>visible_portion(file_name=None, destination_dir=None)</code>","text":"<p>Take screenshot of visible portion and save as PNG image.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str | None</code> <p>Name of the file. If <code>None</code>, the file name is generated automatically.</p> <code>None</code> <code>destination_dir</code> <code>str | Path | None</code> <p>Destination directory. If <code>None</code>, the directory defined in the browser settings is used.</p> <code>None</code> Example <p>Default file name and destination:</p> <pre><code>browser.screenshot.visible_portion()\n</code></pre> <p>Custom file name and default destination:</p> <pre><code>browser.screenshot.visible_portion(\"image.png\")\n</code></pre> <p>Custom file name and destination:</p> <pre><code>browser.screenshot.visible_portion(\"image.png\", \"/screenshots/folder\")\n</code></pre> <p>Default file name and custom destination:</p> <pre><code>browser.screenshot.visible_portion(destination_dir=\"/screenshots/folder\")\n</code></pre> Note <p>When setting a custom file name, screenshots should always be saved as a PNG file with a <code>.png</code> extension.</p>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/","title":"browser.tool","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/#browserist.browser.tool.__main__.ToolDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/#browserist.browser.tool.__main__.ToolDriverMethods.count_elements","title":"<code>count_elements(xpath, timeout=None)</code>","text":"<p>Count number of elements.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the elements.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>Number of elements.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    url = \"https://example.com\"\n    browser.open.url(url)\n    link_count = browser.tool.count_elements(\"//a\")\n    if link_count &gt; 0:\n        print(f\"Found {link_count} link(s) on {url}\")\n    else:\n        print(f\"No links found on {url}\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/#browserist.browser.tool.__main__.ToolDriverMethods.execute_script","title":"<code>execute_script(script, element=None)</code>","text":"<p>Execute JavaScript, either with <code>WebElement</code> or without.</p> <p>Parameters:</p> Name Type Description Default <code>script</code> <code>str</code> <p>JavaScript code.</p> required <code>element</code> <code>WebElement | None</code> <p>If given, execute JavaScript with <code>WebElement</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Return value given by the JavaScript code.</p> Example <p>Without <code>WebElement</code>:</p> <pre><code>browser.tool.execute_script(\"alert('Hello world!')\")\n</code></pre> <p>With <code>WebElement</code>:</p> <pre><code>element = browser.get.element(\"//xpath/to/element\")\nbrowser.tool.execute_script(\"arguments[0].scrollIntoView();\", element)\n</code></pre> <p>For example, how to scroll to the first link on a page:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    first_link_element = browser.get.element(\"//a[1]\")\n    browser.tool.execute_script(\"arguments[0].scrollIntoView();\", first_link_element)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/#browserist.browser.tool.__main__.ToolDriverMethods.is_input_valid","title":"<code>is_input_valid(text, regex, ignore_case=True)</code>","text":"<p>Check if text input matches regex condition.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Input text.</p> required <code>regex</code> <code>str</code> <p>Condition as regular expression.</p> required <code>ignore_case</code> <code>bool</code> <p>Ignore case when comparing input text to condition.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if input matches condition, <code>False</code> otherwise.</p> Example <p>How to prompt the user for input in the terminal and hereafter validate the value before posting the form input:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    user_input = input(\"Input value:\")\n    while not browser.tool.is_input_valid(user_input, r\"regex\"):\n        print(\"Invalid input. Please try again...\")\n        user_input = input(\"Input value:\")\n    browser.input.value(\"//xpath/to/input\", user_input)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/#browserist.browser.tool.__main__.ToolDriverMethods.is_url_valid","title":"<code>is_url_valid(url)</code>","text":"<p>Check if input is a valid URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Input URL.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if input is a valid URL, <code>False</code> otherwise.</p> Example <p>How to prompt the user for a valid URL in the terminal:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    user_url = input(\"Input URL:\")\n    while not browser.tool.is_url_valid(user_url)\n        print(\"Invalid URL. Please try again...\")\n        user_url = input(\"Input URL:\")\n    browser.open.url(user_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/tool/#browserist.browser.tool.__main__.ToolDriverMethods.is_xpath_valid","title":"<code>is_xpath_valid(xpath)</code>","text":"<p>Check if input is a valid XPath expression.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>Input XPath.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if input is a valid XPath expression, <code>False</code> otherwise.</p> Example <p>How to prompt the user for a valid XPath value in the terminal:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    user_xpath = input(\"Input XPath:\")\n    while not browser.tool.is_xpath_valid(user_xpath)\n        print(\"Invalid XPath. Please try again...\")\n        user_xpath = input(\"Input XPath:\")\n    browser.click.button(user_xpath)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/user-agent/","title":"browser.user_agent","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/user-agent/#browserist.browser.user_agent.__main__.UserAgentDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/user-agent/#browserist.browser.user_agent.__main__.UserAgentDriverMethods.get","title":"<code>get()</code>","text":"<p>Get the user agent of the browser.</p> <p>Returns:</p> Type Description <code>str</code> <p>The user agent of the browser.</p> Example <pre><code>user_agent = browser.user_agent.get()\nprint(user_agent)\n</code></pre> <p>How the output could look like in the terminal:</p> <pre><code>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/user-agent/#browserist.browser.user_agent.__main__.UserAgentDriverMethods.set","title":"<code>set(user_agent)</code>","text":"<p>Set the <code>User-Agent</code> of the browser's request header with a custom value. Note that not all browsers support changing user agent on the fly. Alternatively, it's recommended to set the user agent in the BrowserSettings when initiating the session.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The user agent to set.</p> required Example <p>Basic example:</p> <pre><code>browser.user_agent.set(\"MyUserAgent\")\n</code></pre> <p>Or if you want to identify your sessions with a custom value, you can append the existing user agent with your own value:</p> <pre><code>user_agent = browser.user_agent.get()\nuser_agent += \" MyUserAgent\"\nbrowser.user_agent.set(user_agent)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/combo/cookie-banner/","title":"browser.combo","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/cookie-banner/#browserist.browser.combo.__main__.ComboDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/cookie-banner/#browserist.browser.combo.__main__.ComboDriverMethods.cookie_banner","title":"<code>cookie_banner(settings, timeout=None)</code>","text":"<p>Standardised combination of methods to accept or decline cookies.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>CookieBannerSettings</code> <p>Add settings class.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element(s). If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>bool | None</code> <p>If <code>return_bool</code> is <code>True</code> in the settings class, this method returns <code>True</code> if the cookie banner is handled succesfully. <code>False</code> or <code>None</code> otherwise.</p> Example <pre><code>from browserist import Browser, CookieBannerSettings\n\naccept_cookies = CookieBannerSettings(\n    url=\"https://example.com\",\n    has_loaded_xpath=\"//xpath/to/cookie_banner\",\n    button_xpath=\"//xpath/to/accept_button\")\n\nwith Browser() as browser:\n    browser.combo.cookie_banner(accept_cookies)\n    browser.open.url(\"https://example.com/some_page\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre> <p>Or use succesfull handling of the cookie banner with a conditional <code>if</code> statement by setting <code>return_bool</code> to <code>True</code> as parameter in the settings class:</p> <pre><code>from browserist import Browser, CookieBannerSettings\n\naccept_cookies = CookieBannerSettings(\n    url=\"https://example.com\",\n    has_loaded_xpath=\"//xpath/to/cookie_banner\",\n    button_xpath=\"//xpath/to/accept_button\",\n    return_bool=True)\n\nwith Browser() as browser:\n    if browser.combo.cookie_banner(accept_cookies):\n        browser.open.url(\"https://example.com/some_page\")\n        browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/cookie-banner/#configuration-classes","title":"Configuration Classes","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/cookie-banner/#cookiebannersettings","title":"CookieBannerSettings","text":"<p>Settings class for the cookie banner combo.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>URL from where to handle the cookie banner.</p> <code>None</code> <code>iframe_xpath</code> <code>str | None</code> <p>Use if the cookie banner is inside an iframe. If used, all other XPath elements are relative to this iframe.</p> <code>None</code> <code>has_loaded_wait_seconds</code> <code>float | None</code> <p>Minor grace time to ensure the cookie banner has loaded. Often due an fade-in animation or similar transition.</p> <code>None</code> <code>has_loaded_xpath</code> <code>str | None</code> <p>Check if cookie banner has loaded so it's ready for interaction.</p> <code>None</code> <code>button_xpath</code> <code>str</code> <p>Can be for either accept or decline cookies.</p> required <code>has_disappeared_wait_seconds</code> <code>float | None</code> <p>Minor grace time to ensure the cookie banner has disappeared \u2013 often due an animation \u2013 and that the cookie information has been saved before proceeding.</p> <code>None</code> <code>return_bool</code> <code>bool</code> <p>If set to <code>True</code>, the cookie banner combo can be used with a conditional <code>if</code> statement and return boolean <code>True</code> or <code>False</code> depending on whether the cookie banner was handled succesfully without errors or not. This will also suppresses exceptions. With default <code>False</code>, the cookie banner combo will not return any value.</p> <code>False</code>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/","title":"browser.combo","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/#browserist.browser.combo.__main__.ComboDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/#browserist.browser.combo.__main__.ComboDriverMethods.log_in","title":"<code>log_in(login_credentials, login_form, timeout=None)</code>","text":"<p>Standardised combination of methods to log in.</p> Note <p>Most websites process login in either one or two steps. Use <code>LoginForm1Step</code> when username and password are prompted on the same page. Use <code>LoginForm2Steps</code> when username is prompted first, and then the option to input password appears later on the same or a separate page. The two-step variation is often to verify whether a user exists or not before password can be entered (or should be redirected to a registration page).</p> <p>Parameters:</p> Name Type Description Default <code>login_credentials</code> <code>LoginCredentials</code> <p>Apply username and password here.</p> required <code>login_form</code> <code>LoginForm1Step | LoginForm2Steps</code> <p>Add settings class.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element(s). If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>bool | None</code> <p>If <code>return_bool</code> is <code>True</code> in the settings class, the login combo can be used with a conditional <code>if</code> statement and return boolean <code>True</code> or <code>False</code> depending on whether the login form was handled succesfully without errors or not. This will also suppresses exceptions. With default <code>False</code>, the login combo will not return any value. Note that either of the parameters <code>post_login_url_contains</code> or <code>post_login_element_xpath</code> or both also need to be defined in the settings class.</p> Example <pre><code>from browserist import Browser, LoginForm1Step, LoginCredentials\n\nlogin_credentials = LoginCredentials(\n    username=\"some_username\",\n    password=\"some_password\")\n\nlogin_form = LoginForm1Step(\n    url=\"https://example.com/login\",\n    username_input_xpath=\"//xpath/to/username_field\",\n    password_input_xpath=\"//xpath/to/password_field\",\n    submit_button_xpath=\"//xpath/to/login_button\")\n\nwith Browser() as browser:\n    browser.combo.log_in(login_credentials, login_form)\n    browser.open.url(\"https://example.com/some_page\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre> <p>Or use succesfull handling of the login with a conditional <code>if</code> statement by setting <code>return_bool</code> to <code>True</code> as parameter in the settings class:</p> <pre><code>from browserist import Browser, LoginForm1Step, LoginCredentials\n\nlogin_credentials = LoginCredentials(\n    username=\"some_username\",\n    password=\"some_password\")\n\nlogin_form = LoginForm1Step(\n    url=\"https://example.com/login\",\n    username_input_xpath=\"//xpath/to/username_field\",\n    password_input_xpath=\"//xpath/to/password_field\",\n    submit_button_xpath=\"//xpath/to/login_button\",\n    post_login_url_contains=\"https://example.com/successfull_logged_in_page\",\n    post_login_element_xpath=\"//xpath/to/successfull_logged_in_element\",\n    return_bool=True)\n\nwith Browser() as browser:\n    if browser.combo.log_in(login_credentials, login_form):\n        browser.open.url(\"https://example.com/some_page\")\n        browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/#configuration-classes","title":"Configuration Classes","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/#logincredentials","title":"LoginCredentials","text":"<p>Settings class for the login credentials of a user profile.</p> Note <p>Separated from the login form so that the multiple users/roles can use the same form.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Username, e.g. email.</p> required <code>password</code> <code>str</code> <p>Password.</p> required","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/#loginform1step","title":"LoginForm1Step","text":"<p>Settings for login form page in 1 step where both username and password are displayed at once.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>URL to login page.</p> <code>None</code> <code>username_input_xpath</code> <code>str</code> <p>XPath for username input field.</p> required <code>password_input_xpath</code> <code>str</code> <p>XPath for password input field.</p> required <code>submit_button_xpath</code> <code>str</code> <p>XPath for submit button.</p> required <code>post_login_wait_seconds</code> <code>float | None</code> <p>Minor grace time to ensure the login has completed.</p> <code>None</code> <code>post_login_url_contains</code> <code>str | None</code> <p>Optionally await redirect to this URL as a user is typically redirected automatically to a new page or view after logging in.</p> <code>None</code> <code>post_login_element_xpath</code> <code>str | None</code> <p>Upon successful login, optionally await this element to be loaded.</p> <code>None</code> <code>return_bool</code> <code>bool</code> <p>If set to <code>True</code>, the login combo can be used with a conditional <code>if</code> statement and return boolean <code>True</code> or <code>False</code> depending on whether the login form was handled succesfully without errors or not. This will also suppresses exceptions. With default <code>False</code>, the login combo will not return any value. Note that either of the parameters <code>post_login_url_contains</code> or <code>post_login_element_xpath</code> or both also need to be defined in the settings class.</p> <code>False</code>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/log-in/#loginform2steps","title":"LoginForm2Steps","text":"<p>Settings for login form page in 2 steps where username is prompted first, and once confirmed, then the password can be entered.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>URL to login page.</p> <code>None</code> <code>username_input_xpath</code> <code>str</code> <p>XPath for username input field.</p> required <code>username_submit_button_xpath</code> <code>str</code> <p>XPath for username submit button.</p> required <code>password_input_xpath</code> <code>str</code> <p>XPath for password input field.</p> required <code>password_submit_button_xpath</code> <code>str</code> <p>XPath for password submit button.</p> required <code>post_login_wait_seconds</code> <code>float | None</code> <p>Minor grace time to ensure the login has completed.</p> <code>None</code> <code>post_login_url_contains</code> <code>str | None</code> <p>Optionally await redirect to this URL as a user is typically redirected automatically to a new page or view after logging in.</p> <code>None</code> <code>post_login_element_xpath</code> <code>str | None</code> <p>Upon successful login, optionally await this element to be loaded.</p> <code>None</code> <code>return_bool</code> <code>bool</code> <p>If set to <code>True</code>, the login combo can be used with a conditional <code>if</code> statement and return boolean <code>True</code> or <code>False</code> depending on whether the login form was handled succesfully without errors or not. This will also suppresses exceptions. With default <code>False</code>, the login combo will not return any value. Note that either of the parameters <code>post_login_url_contains</code> or <code>post_login_element_xpath</code> or both also need to be defined in the settings class.</p> <code>False</code>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/search/","title":"browser.combo","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/search/#browserist.browser.combo.__main__.ComboDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/search/#browserist.browser.combo.__main__.ComboDriverMethods.search","title":"<code>search(term, settings, timeout=None)</code>","text":"<p>Standardised combination of methods to perform search.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>Terms to search for.</p> required <code>settings</code> <code>SearchSettings</code> <p>Add settings class.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element(s). If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser, SearchSettings\n\nsearch_settings = SearchSettings(\n    url=\"https://google.com\",\n    input_xpath=\"//xpath/to/input_field\",\n    button_xpath=\"//xpath/to/search_button\")\n\nwith Browser() as browser:\n    browser.combo.search(\"some search term\", search_settings)\n    assert browser.tool.count_elements(\"//xpath/to/search_result_elements\") &gt; 0\n</code></pre>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/search/#configuration-classes","title":"Configuration Classes","text":"","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/combo/search/#searchsettings","title":"SearchSettings","text":"<p>Settings class for the search combo.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>URL for the search page. Sometimes not needed if, for example, the search input field is available on all pages.</p> <code>None</code> <code>input_xpath</code> <code>str</code> <p>XPath for the search input field.</p> required <code>button_xpath</code> <code>str</code> <p>XPath for the search button.</p> required <code>await_search_results_url_contains</code> <code>str | None</code> <p>Optionally wait for the search results page URL to change.</p> <code>None</code> <code>await_search_results_xpath</code> <code>str | None</code> <p>Optionally wait for a search result element to be ready.</p> <code>None</code>","tags":["Documentation","Tutorial","Settings","Combo"]},{"location":"reference/browser/get/attribute/","title":"browser.get.attribute","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/attribute/#browserist.browser.get.attribute.__main__.GetAttributeDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/attribute/#browserist.browser.get.attribute.__main__.GetAttributeDriverMethods.value","title":"<code>value(xpath, attribute, timeout=None)</code>","text":"<p>Get value from an attribute of an element.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>attribute</code> <code>str</code> <p>Attribute name.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>Value of the attribute. If the attribute does not exist, <code>None</code> is returned.</p> Example <p>Use <code>\"src\"</code> as attribute to get the source URL from an <code>&lt;img&gt;</code> image element.</p> <pre><code>image_url = browser.get.attribute.value(\"//xpath/to/img\", \"src\")\n</code></pre> <p>Use <code>\"href\"</code> as attribute to get the URL from an <code>&lt;a&gt;</code> link element.</p> <pre><code>link_url = browser.get.attribute.value(\"//xpath/to/a\", \"href\")\n</code></pre> <p>Or use other attributes to get the value from a <code>&lt;meta&gt;</code> element in the <code>&lt;head&gt;</code> section.</p> <pre><code>meta_content = browser.get.attribute.value(\"/html/head/meta[1]\", \"content\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/attribute/#browserist.browser.get.attribute.__main__.GetAttributeDriverMethods.values","title":"<code>values(xpath, attribute, timeout=None)</code>","text":"<p>Get values from an attribute of multiple elements. Assumes that the XPath targets multiple links.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the elements.</p> required <code>attribute</code> <code>str</code> <p>Attribute name.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str | None]</code> <p>Values of the attribute. If an attribute does not exist, <code>None</code> is added to the list.</p> Example <p>Use <code>\"src\"</code> as attribute to get the source URL from <code>&lt;img&gt;</code> image elements.</p> <pre><code>image_urls = browser.get.attribute.values(\"//img\", \"src\")\n</code></pre> <p>Use <code>\"href\"</code> as attribute to get the URL from <code>&lt;a&gt;</code> link elements.</p> <pre><code>link_urls = browser.get.attribute.values(\"//a\", \"href\")\n</code></pre> <p>Or use other attributes to get values from <code>&lt;meta&gt;</code> elements in the <code>&lt;head&gt;</code> section.</p> <pre><code>meta_contents = browser.get.attribute.values(\"/html/head/meta\", \"content\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/html/","title":"browser.get.html","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/html/#browserist.browser.get.html.__main__.GetHtmlDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/html/#browserist.browser.get.html.__main__.GetHtmlDriverMethods.element_inner","title":"<code>element_inner(xpath, timeout=None)</code>","text":"<p>Get inner HTML of an element by XPath.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Inner HTML of an element.</p> Example <p>Get the inner HTML source of an element:</p> <pre><code>inner_html = browser.get.html.element_inner(\"//div[@id='content']\")\nprint(inner_html)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/html/#browserist.browser.get.html.__main__.GetHtmlDriverMethods.element_outer","title":"<code>element_outer(xpath, timeout=None)</code>","text":"<p>Get outer HTML of an element by XPath.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Outer HTML of an element.</p> Example <p>Get the outer HTML source of an element:</p> <pre><code>outer_html = browser.get.html.element_outer(\"//div[@id='content']\")\nprint(outer_html)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/html/#browserist.browser.get.html.__main__.GetHtmlDriverMethods.page_source","title":"<code>page_source()</code>","text":"<p>Get HTML source of the current page.</p> <p>Returns:</p> Type Description <code>str</code> <p>HTML page source.</p> Example <pre><code>page_source = browser.get.html.page_source()\nprint(page_source)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/","title":"browser.get","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.dimensions","title":"<code>dimensions(xpath, timeout=None)</code>","text":"<p>Get width and height of element in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Width and height in pixels.</p> Example <pre><code>width, height = browser.get.dimensions(\"//xpath/to/element\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.element","title":"<code>element(xpath, timeout=None)</code>","text":"<p>Get single <code>WebElement</code> by XPath.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>WebElement</code> <p>Web element.</p> Example <pre><code>element = browser.get.element(\"//xpath/to/element\")\nprint(element.text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.elements","title":"<code>elements(xpath, timeout=None)</code>","text":"<p>Get multiple <code>WebElement</code>s by XPath. Assumes that the XPath targets multiple elements.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the elements.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[WebElement]</code> <p>List of web elements of type <code>WebElement</code>.</p> Example <pre><code>elements = browser.get.elements(\"//xpath/to/elements\")\nfor element in elements:\n    print(element.text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.elements_by_tag","title":"<code>elements_by_tag(tag, timeout=None)</code>","text":"<p>\"Get multiple <code>WebElement</code>s by HTML tag. Assumes that the XPath targets multiple elements.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>HTML tag of the elements. For example, <code>\"img\"</code> as tag for all <code>&lt;img&gt;</code> images, <code>\"a\"</code> for all <code>&lt;a&gt;</code> links, etc.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[WebElement]</code> <p>List of web elements of type <code>WebElement</code>.</p> Example <p>Get and print all paragraphs of a web page:</p> <pre><code>elements = browser.get.elements_by_tag(\"p\")\nfor element in elements:\n    print(element.text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.page_title","title":"<code>page_title()</code>","text":"<p>Get page title of the current page.</p> <p>Returns:</p> Type Description <code>str</code> <p>Page title.</p> Example <pre><code>page_title = browser.get.page_title()\nprint(page_title)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.text","title":"<code>text(xpath, timeout=None)</code>","text":"<p>Get text from element.</p> Note <p>This method assumes that the text field shouldn't be empty and therefore will retry to get the text (for better support of single-page apps with extended loading time).</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Text from element.</p> Example <pre><code>element_text = browser.get.text(\"//xpath/to/element\")\nprint(element_text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/main/#browserist.browser.get.__main__.GetDriverMethods.texts","title":"<code>texts(xpath, timeout=None)</code>","text":"<p>Get array of texts from elements. Assumes that the XPath targets multiple elements.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the elements.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for elements. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of texts from elements.</p> Example <pre><code>element_texts = browser.get.texts(\"//xpath/to/elements\")\nfor element_text in element_texts:\n    print(element_text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/","title":"browser.get.url","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods.current","title":"<code>current()</code>","text":"<p>Get URL of the current page, e.g. <code>https://example.com</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>URL of the current page, e.g. <code>https://example.com</code>.</p> Example <p>This will output the URL <code>https://example.com</code> in the terminal:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    current_url = browser.get.url.current()\n    print(current_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods.current_domain","title":"<code>current_domain()</code>","text":"<p>Get domain of the current page, e.g. <code>example.com</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>Domain of the current page, e.g. <code>example.com</code>.</p> Example <p>This will output the domain <code>example.com</code> in the terminal:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    current_domain = browser.get.url.current_domain()\n    print(current_domain)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods.from_image","title":"<code>from_image(xpath, timeout=None)</code>","text":"<p>Get the source URL of an <code>&lt;img&gt;</code> image element.</p> Note <p>This method targets the <code>src</code> attribute of an <code>&lt;img&gt;</code> image element. And it assumes that the image isn't empty and therefore will retry to get the URL (for better support of single-page apps with extended loading time).</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the image. Should target an <code>&lt;img&gt;</code> tag.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>URL source of the image. If the image does not exist, <code>None</code> is returned.</p> Example <pre><code>image_url = browser.get.url.from_image(\"//xpath/to/img\")\nprint(image_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods.from_images","title":"<code>from_images(xpath, timeout=None)</code>","text":"<p>Get list of source URLs of a group of <code>&lt;img&gt;</code> image elements.</p> Note <p>This method targets the <code>src</code> attribute of the <code>&lt;img&gt;</code> image elements. And it assumes that the XPath targets multiple images.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the images. Should target <code>&lt;img&gt;</code> tags.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str | None]</code> <p>List of image URLs. If an image does not exist, <code>None</code> is added to the list.</p> Example <pre><code>image_urls = browser.get.url.from_images(\"//img\")\nfor image_url in image_urls:\n    print(image_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods.from_link","title":"<code>from_link(xpath, timeout=None)</code>","text":"<p>Get the source URL of an <code>&lt;a&gt;</code> link element.</p> Note <p>This method targets the <code>href</code> attribute of the <code>&lt;a&gt;</code> link element. And it assumes that the link isn't empty and therefore will retry to get the URL (for better support of single-page apps with extended loading time).</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the link. Should target an <code>&lt;a&gt;</code> tag.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>URL of the link. If the link does not exist, <code>None</code> is returned.</p> Example <pre><code>link_url = browser.get.url.from_link(\"//xpath/to/a\")\nprint(link_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/get/url/#browserist.browser.get.url.__main__.GetUrlDriverMethods.from_links","title":"<code>from_links(xpath, timeout=None)</code>","text":"<p>Get list of source URLs of a group of <code>&lt;a&gt;</code> link elements.</p> Note <p>This method targets the <code>href</code> attribute of the <code>&lt;a&gt;</code> link elements. And it assumes that the XPath targets multiple links.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the links. Should target <code>&lt;a&gt;</code> tags.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str | None]</code> <p>List of link URLs. If a link does not exist, <code>None</code> is added to the list.</p> Example <pre><code>link_urls = browser.get.url.from_links(\"//a\")\nfor link_url in link_urls:\n    print(link_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/check-if/","title":"browser.scroll.check_if","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/check-if/#browserist.browser.scroll.check_if.__main__.ScrollCheckIfDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/check-if/#browserist.browser.scroll.check_if.__main__.ScrollCheckIfDriverMethods.is_end_of_page","title":"<code>is_end_of_page()</code>","text":"<p>Check if current scroll position is at the end of the page.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if current scroll position is at the end of the page, <code>False</code> otherwise.</p> Example <pre><code>if browser.scroll.check_if.is_end_of_page():\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/check-if/#browserist.browser.scroll.check_if.__main__.ScrollCheckIfDriverMethods.is_top_of_page","title":"<code>is_top_of_page()</code>","text":"<p>Check if current scroll position is at the top of the page.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if current scroll position is at the top of the page, <code>False</code> otherwise.</p> Example <pre><code>if browser.scroll.check_if.is_top_of_page():\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/get/","title":"browser.scroll.get","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/get/#browserist.browser.scroll.get.__main__.ScrollGetDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/get/#browserist.browser.scroll.get.__main__.ScrollGetDriverMethods.position","title":"<code>position()</code>","text":"<p>Get scroll position of the X and Y axis.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Scroll position of the X and Y axis. In pixels.</p> Example <pre><code>x, y = browser.scroll.get.position()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/get/#browserist.browser.scroll.get.__main__.ScrollGetDriverMethods.total_height","title":"<code>total_height()</code>","text":"<p>Get total scroll height.</p> <p>Returns:</p> Type Description <code>int</code> <p>Total scroll height.</p> Example <pre><code>total_scroll_height = browser.scroll.get.total_height()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/get/#browserist.browser.scroll.get.__main__.ScrollGetDriverMethods.total_width","title":"<code>total_width()</code>","text":"<p>Get total scroll width.</p> <p>Returns:</p> Type Description <code>int</code> <p>Total scroll width.</p> Example <pre><code>total_scroll_width = browser.scroll.get.total_width()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/","title":"browser.scroll","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.by","title":"<code>by(x, y, delay_seconds=1)</code>","text":"<p>If possible, scroll by X and Y pixels as relative to current position.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>In pixels. Scroll on horisontal X axis as relative to current position. Can be positive or negative.</p> required <code>y</code> <code>int</code> <p>In pixels. Scroll on vertical Y axis as relative to current position. Can be positive or negative.</p> required <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.by(0, 100)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.down_by","title":"<code>down_by(pixels, delay_seconds=1)</code>","text":"<p>If possible, scroll down by Y pixels. Horisontal position is unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>int</code> <p>Amount to scroll down as relative to current position.</p> required <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.down_by(100)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.into_view","title":"<code>into_view(xpath, timeout=None, delay_seconds=1)</code>","text":"<p>Find element and scroll up or down until element is visible.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.into_view(\"//xpath/to/element\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.into_view_if_not_in_viewport","title":"<code>into_view_if_not_in_viewport(xpath, timeout=None, delay_seconds=1)</code>","text":"<p>If not visible in the current viewport, find element and scroll up or down until element is visible.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.into_view_if_not_in_viewport(\"//xpath/to/element\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.left_by","title":"<code>left_by(pixels, delay_seconds=1)</code>","text":"<p>If possible, scroll left by X pixels. Horisontal position is unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>int</code> <p>Amount to scroll left as relative to current position.</p> required <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.left_by(50)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.right_by","title":"<code>right_by(pixels, delay_seconds=1)</code>","text":"<p>If possible, scroll right by X pixels. Horisontal position is unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>int</code> <p>Amount to scroll right as relative to current position.</p> required <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.right_by(50)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.to_position","title":"<code>to_position(x, y, delay_seconds=1)</code>","text":"<p>If possible, scroll to coordinate X and Y pixels of page as absolute position.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>Absolute position in pixels on horisontal X axis.</p> required <code>y</code> <code>int</code> <p>Absolute position in pixels on vertical Y axis.</p> required <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.to_position(0, 100)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/main/#browserist.browser.scroll.__main__.ScrollDriverMethods.up_by","title":"<code>up_by(pixels, delay_seconds=1)</code>","text":"<p>If possible, scroll up by Y pixels. Horisontal position is unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>int</code> <p>Amount to scroll up as relative to current position.</p> required <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.up_by(50)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/page/","title":"browser.scroll.page","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/page/#browserist.browser.scroll.page.__main__.ScrollPageDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/page/#browserist.browser.scroll.page.__main__.ScrollPageDriverMethods.down","title":"<code>down(pages=1, delay_seconds=1)</code>","text":"<p>If possible, scroll number of pages down.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>int</code> <p>Number of pages to scroll down. Must be an integer of 1 or greater.</p> <code>1</code> <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <p>Scroll single page down:</p> <pre><code>browser.scroll.page.down()\n</code></pre> <p>Scroll multiple pages down:</p> <pre><code>browser.scroll.page.down(3)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/page/#browserist.browser.scroll.page.__main__.ScrollPageDriverMethods.to_end","title":"<code>to_end(delay_seconds=1)</code>","text":"<p>If possible, scroll to end of page.</p> <p>Parameters:</p> Name Type Description Default <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.page.to_end()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/page/#browserist.browser.scroll.page.__main__.ScrollPageDriverMethods.to_top","title":"<code>to_top(delay_seconds=1)</code>","text":"<p>If possible, scroll to top of page.</p> <p>Parameters:</p> Name Type Description Default <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <pre><code>browser.scroll.page.to_top()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/scroll/page/#browserist.browser.scroll.page.__main__.ScrollPageDriverMethods.up","title":"<code>up(pages=1, delay_seconds=1)</code>","text":"<p>If possible, scroll number of pages up.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>int</code> <p>Number of pages to scroll up. Must be an integer of 1 or greater.</p> <code>1</code> <code>delay_seconds</code> <code>float</code> <p>Option to add custom delay in seconds to ensure the view is updated after scroll.</p> <code>1</code> Example <p>Scroll single page up:</p> <pre><code>browser.scroll.page.up()\n</code></pre> <p>Scroll multiple pages up:</p> <pre><code>browser.scroll.page.up(3)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/get/","title":"browser.viewport.get","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/get/#browserist.browser.viewport.get.__main__.ViewportGetDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/get/#browserist.browser.viewport.get.__main__.ViewportGetDriverMethods.height","title":"<code>height()</code>","text":"<p>Get height of the viewport in pixels.</p> <p>Returns:</p> Type Description <code>int</code> <p>Height of the viewport in pixels.</p> Example <pre><code>viewport_height = browser.viewport.get.height()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/get/#browserist.browser.viewport.get.__main__.ViewportGetDriverMethods.size","title":"<code>size()</code>","text":"<p>Get width and height of the viewport in pixels.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Width and height of the viewport in pixels.</p> Example <pre><code>viewport_width, viewport_height = browser.viewport.get.size()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/get/#browserist.browser.viewport.get.__main__.ViewportGetDriverMethods.width","title":"<code>width()</code>","text":"<p>Get width of the viewport in pixels.</p> <p>Returns:</p> Type Description <code>int</code> <p>Width of the viewport in pixels.</p> Example <pre><code>viewport_width = browser.viewport.get.width()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/set/","title":"browser.viewport.set","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/set/#browserist.browser.viewport.set.__main__.ViewportSetDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/set/#browserist.browser.viewport.set.__main__.ViewportSetDriverMethods.height","title":"<code>height(height)</code>","text":"<p>Attempt to set custom viewport height in pixels.</p> Note <p>It's recommended to run emulations in headless mode since an open browser may have minimum or maximum dimensions, either limited by the browser window or the monitor.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>Viewport height in pixels.</p> required Example <pre><code>browser.viewport.set.height(1080)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/set/#browserist.browser.viewport.set.__main__.ViewportSetDriverMethods.size","title":"<code>size(width, height)</code>","text":"<p>Attempt to set custom viewport size in pixels.</p> Note <p>It's recommended to run emulations in headless mode since an open browser may have minimum or maximum dimensions, either limited by the browser window or the monitor.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Viewport width in pixels.</p> required <code>height</code> <code>int</code> <p>Viewport height in pixels.</p> required Example <pre><code>browser.viewport.set.size(1920, 1080)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/set/#browserist.browser.viewport.set.__main__.ViewportSetDriverMethods.size_by_device","title":"<code>size_by_device(device)</code>","text":"<p>Attempt to set the viewport size by device types, e.g. iPhone, iPad, or other common devices.</p> Note <p>It's recommended to run emulations in headless mode since an open browser may have minimum or maximum dimensions, either limited by the browser window or the monitor.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>DeviceViewportSize</code> <p>Device type to emulate.</p> required Example <pre><code>from browserist import Browser, DeviceViewportSize\n\nwith Browser() as browser:\n    custom_device = DeviceViewportSize(width=375, height=812)\n    browser.viewport.set.size_by_device(custom_device)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/viewport/set/#browserist.browser.viewport.set.__main__.ViewportSetDriverMethods.width","title":"<code>width(width)</code>","text":"<p>Attempt to set custom viewport width in pixels.</p> Note <p>It's recommended to run emulations in headless mode since an open browser may have minimum or maximum dimensions, either limited by the browser window or the monitor.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Viewport width in pixels.</p> required Example <pre><code>browser.viewport.set.width(1920)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/main/","title":"browser.wait","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/main/#browserist.browser.wait.__main__.WaitDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/main/#browserist.browser.wait.__main__.WaitDriverMethods.for_element","title":"<code>for_element(xpath, timeout=None)</code>","text":"<p>Wait until element is ready in the DOM and/or on the screen.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <p>Useful for single-page application elements handled by JavaScript, but also for standard HTML that doesn't load immediately. This helper function ensures that DOM elements are ready before processing. The example waits for any H1 heading to be ready:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.for_element(\"//h1\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/main/#browserist.browser.wait.__main__.WaitDriverMethods.random_seconds","title":"<code>random_seconds(min_seconds=1, max_seconds=5)</code>","text":"<p>Sleep for a random amount of time to make actions look less like a bot. The waiting time will be somewhere between the speficied minimum and maximum seconds.</p> <p>Parameters:</p> Name Type Description Default <code>min_seconds</code> <code>float</code> <p>Minimum seconds to wait.</p> <code>1</code> <code>max_seconds</code> <code>float</code> <p>Maximum seconds to wait.</p> <code>5</code> Example <p>For example, wait between 3 and 20 seconds:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.random_seconds(3, 20)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/main/#browserist.browser.wait.__main__.WaitDriverMethods.seconds","title":"<code>seconds(seconds)</code>","text":"<p>Sleep for a fixed amount of time.</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>float</code> <p>Seconds to wait.</p> required Example <p>For example, wait for 5 seconds:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/download-file/","title":"browser.wait.until.download_file","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/download-file/#browserist.browser.wait.until.download_file.__main__.WaitUntilDownloadFileDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/download-file/#browserist.browser.wait.until.download_file.__main__.WaitUntilDownloadFileDriverMethods.does_not_exist","title":"<code>does_not_exist(file_name, timeout=None)</code>","text":"<p>Wait until a file download does not exist, e.g. a temporary file created by the browser until download is complete.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the file to watch in the download directory, e.g. <code>file.zip</code>. The download directory is implicitly defined in the <code>download_dir</code> parameter of <code>BrowserSettings</code>.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for file to not exist. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.download(\"//xpath/to/button\", expected_file_name=\"file.zip\"))\n    browser.wait.until.download_file.does_not_exist(\"file.zip.download\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/download-file/#browserist.browser.wait.until.download_file.__main__.WaitUntilDownloadFileDriverMethods.exists","title":"<code>exists(file_name, timeout=None)</code>","text":"<p>Wait until a file download exists.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the file to watch in the download directory, e.g. <code>file.zip</code>. The download directory is implicitly defined in the <code>download_dir</code> parameter of <code>BrowserSettings</code>.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for file to exist. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.download(\"//xpath/to/button\", expected_file_name=\"file.zip\"))\n    browser.wait.until.download_file.exists(\"file.zip\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/download-file/#browserist.browser.wait.until.download_file.__main__.WaitUntilDownloadFileDriverMethods.size_does_not_increase","title":"<code>size_does_not_increase(file_name, idle_download_timeout=None)</code>","text":"<p>Wait until a file under download no longer exists or increases in size, for example a temporary file created by the browser until a download is complete.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the file to watch in the download directory, e.g. <code>file.zip</code>. The download directory is implicitly defined in the <code>download_dir</code> parameter of <code>BrowserSettings</code>.</p> required <code>idle_download_timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for file size to not increase, which is constantly renewed as long as the file size increases. If <code>None</code>, the global idle download timeout setting is used (default 3 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.download(\"//xpath/to/button\", expected_file_name=\"file.zip\"))\n    browser.wait.until.download_file.size_does_not_increase(\"file.zip\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/","title":"browser.wait.until","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/#browserist.browser.wait.until.__main__.WaitUntilDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/#browserist.browser.wait.until.__main__.WaitUntilDriverMethods.contains_any_text","title":"<code>contains_any_text(xpath, timeout=None)</code>","text":"<p>Wait until element contains any text, e.g. an element in a single-page application that loads later than first page paint.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.contains_any_text(\"//h1\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/#browserist.browser.wait.until.__main__.WaitUntilDriverMethods.element_disappears","title":"<code>element_disappears(xpath, timeout=None)</code>","text":"<p>Wait until element doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element to disappear. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.input.value(\"//xpath/to/input\", \"test\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.element_disappears(\"//xpath/to/input\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/#browserist.browser.wait.until.__main__.WaitUntilDriverMethods.images_have_loaded","title":"<code>images_have_loaded(xpath='//img', timeout=None)</code>","text":"<p>Wait until the image(s) on the page have loaded.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element. Can target one or more images. If <code>None</code>, all <code>&lt;img&gt;</code> image elements are targeted.</p> <code>'//img'</code> <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element(s) to be loaded. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <p>As images often load after first page paint and sometimes require extra time to download, it's useful know when a specific image or all images have loaded. By default, this method targets all image elements on a page:</p> <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.images_have_loaded()\n</code></pre> <p>If you don't want to target all image elements, you can target, for instance, the first image element by specifying the XPath:</p> <pre><code>    browser.wait.until.images_have_loaded(\"//img[1]\")\n</code></pre> <p>Or target all image elements with a specific class:</p> <pre><code>    browser.wait.until.images_have_loaded(\"//img[contains(@class, 'some-class')]\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/#browserist.browser.wait.until.__main__.WaitUntilDriverMethods.is_clickable","title":"<code>is_clickable(xpath, timeout=None)</code>","text":"<p>Wait until element is clickable.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the element.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for element. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.is_clickable(\"//xpath/to/button\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/main/#browserist.browser.wait.until.__main__.WaitUntilDriverMethods.number_of_window_handles_is","title":"<code>number_of_window_handles_is(expected_handles, timeout=None)</code>","text":"<p>Wait until number of window handles is.</p> Note <p>Useful when working with multiple tabs or browser windows as they sometimes take time to load.</p> <p>Parameters:</p> Name Type Description Default <code>expected_handles</code> <code>int</code> <p>Expected number of window handles.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for operation. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_tab(\"https://google.com\")\n    browser.wait.until.number_of_window_handles_is(2)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/page-title/","title":"browser.wait.until.page_title","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/page-title/#browserist.browser.wait.until.page_title.__main__.WaitUntilPageTitleDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/page-title/#browserist.browser.wait.until.page_title.__main__.WaitUntilPageTitleDriverMethods.changes","title":"<code>changes(baseline_text, timeout=None)</code>","text":"<p>Wait until the page title changes compared to a baseline text, e.g. after a page reload or update.</p> <p>Parameters:</p> Name Type Description Default <code>baseline_text</code> <code>str</code> <p>Baseline text to compare current page title against. It's evaluated as any change.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for page title to change. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    baseline_text = browser.get.page_title()\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.page_title.changes(baseline_text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/page-title/#browserist.browser.wait.until.page_title.__main__.WaitUntilPageTitleDriverMethods.contains","title":"<code>contains(page_title_fragment, timeout=None)</code>","text":"<p>Wait until the page title contains a specified text fragment, e.g. after a redirect or update.</p> <p>Parameters:</p> Name Type Description Default <code>page_title_fragment</code> <code>str</code> <p>The input can contain both a fragment or the full page title.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for page title to contain text fragment. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.page_title.contains(\"Example\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/page-title/#browserist.browser.wait.until.page_title.__main__.WaitUntilPageTitleDriverMethods.equals","title":"<code>equals(page_title, timeout=None)</code>","text":"<p>Wait until the page title has changed to a specific text, e.g. after a redirect or update.</p> <p>Parameters:</p> Name Type Description Default <code>page_title</code> <code>str</code> <p>Full page title to compare the new current page title against. Evaluated as an exact match.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for page title to match specified text. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.page_title.equals(\"Example Domain\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/text/","title":"browser.wait.until.text","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/text/#browserist.browser.wait.until.text.__main__.WaitUntilTextDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/text/#browserist.browser.wait.until.text.__main__.WaitUntilTextDriverMethods.changes","title":"<code>changes(xpath, baseline_text, timeout=None)</code>","text":"<p>Wait until the text of an element changes compared to a baseline text, e.g. after a form action.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the text element.</p> required <code>baseline_text</code> <code>str</code> <p>Baseline text to compare the new text against. It's evaluated as any change.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for text in element to change. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    baseline_text = browser.get.text(\"//h1\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.text.changes(\"//h1\", baseline_text)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/text/#browserist.browser.wait.until.text.__main__.WaitUntilTextDriverMethods.contains","title":"<code>contains(xpath, regex, timeout=None)</code>","text":"<p>Wait until the text of an element contains a specified text fragment, e.g. after a form action.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the text element.</p> required <code>regex</code> <code>str</code> <p>The comparison can contain both a text fragment or a regular expression. Case insensitive.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for text in element to contain the fragment. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.text.contains(\"//h1\", \"Example\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/text/#browserist.browser.wait.until.text.__main__.WaitUntilTextDriverMethods.equals","title":"<code>equals(xpath, regex, timeout=None)</code>","text":"<p>Wait until the text of an element has changed to a specific text, e.g. after a form action.</p> <p>Parameters:</p> Name Type Description Default <code>xpath</code> <code>str</code> <p>XPath of the text element.</p> required <code>regex</code> <code>str</code> <p>Regular expression to compare the text element against. Case sensitive and is evaluated as an exact match.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for text jn element to match the condition. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.text.equals(\"//h1\", \"Example Domain\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/url/","title":"browser.wait.until.url","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/url/#browserist.browser.wait.until.url.__main__.WaitUntilUrlDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/url/#browserist.browser.wait.until.url.__main__.WaitUntilUrlDriverMethods.changes","title":"<code>changes(baseline_url, timeout=None)</code>","text":"<p>Wait until the browser URL has changed compared to a baseline URL, e.g. after a redirect or form action.</p> <p>Parameters:</p> Name Type Description Default <code>baseline_url</code> <code>str</code> <p>Baseline URL to compare the new URL to. It's evaluated as any change.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for URL to change. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    baseline_url = browser.get.url.current()\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.url.changes(baseline_url)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/url/#browserist.browser.wait.until.url.__main__.WaitUntilUrlDriverMethods.contains","title":"<code>contains(url_fragment, timeout=None)</code>","text":"<p>Wait until the browser URL contains a specified text fragment, e.g. after a redirect or updated query string.</p> <p>Parameters:</p> Name Type Description Default <code>url_fragment</code> <code>str</code> <p>The URL variable can contain both a fragment (e.g. <code>\"?login=true\"</code>) or a full URL (e.g. <code>\"https://example.com?login=true\"</code>).</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for URL to contain the specified fragment. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.url.contains(\"some_page_name\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/wait/until/url/#browserist.browser.wait.until.url.__main__.WaitUntilUrlDriverMethods.equals","title":"<code>equals(url, timeout=None)</code>","text":"<p>Wait until the browser URL has changed to a specific URL, e.g. after a redirect or clicking a button.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Full URL to compare the new URL against. Evaluated as an exact match.</p> required <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for URL to match the specified URL. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.url.equals(\"https://example.com/some_page_name\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/get/","title":"browser.window.get","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/get/#browserist.browser.window.get.__main__.WindowGetDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/get/#browserist.browser.window.get.__main__.WindowGetDriverMethods.height","title":"<code>height()</code>","text":"<p>Get the height of browser window on the screen in pixels.</p> <p>Returns:</p> Type Description <code>int</code> <p>Height of browser window on the screen in pixels.</p> Example <pre><code>height = browser.window.get.height()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/get/#browserist.browser.window.get.__main__.WindowGetDriverMethods.position","title":"<code>position()</code>","text":"<p>Get the X and Y coordinates of the top left corner of the browser window on the screen.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Coordinates of the top left corner of the browser window on the screen.</p> Example <p>How to move the window relatively by getting the current position of the window and move it by 10 pixels in both axes, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    x, y = browser.window.get.position()\n    browser.window.set.position(x - 10, y - 10)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/get/#browserist.browser.window.get.__main__.WindowGetDriverMethods.size","title":"<code>size()</code>","text":"<p>Get width and height of browser window on the screen in pixels.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Width and height of browser window on the screen in pixels.</p> Example <pre><code>width, height = browser.window.get.size()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/get/#browserist.browser.window.get.__main__.WindowGetDriverMethods.width","title":"<code>width()</code>","text":"<p>Get the width of browser window on the screen in pixels.</p> <p>Returns:</p> Type Description <code>int</code> <p>Width of browser window on the screen in pixels.</p> Example <pre><code>width = browser.window.get.width()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/handle/","title":"browser.window.handle","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/handle/#browserist.browser.window.handle.__main__.WindowHandleDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/handle/#browserist.browser.window.handle.__main__.WindowHandleDriverMethods.all","title":"<code>all(selenium=False)</code>","text":"<p>Get list of IDs of all open tabs or windows.</p> <p>Parameters:</p> Name Type Description Default <code>selenium</code> <code>bool</code> <p>Set to <code>True</code> if you want the Selenium handle IDs rather than from Browserist's internal window handle controller.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of IDs of all open tabs or windows.</p> Example <pre><code>window_handles = browser.window.handle.all()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/handle/#browserist.browser.window.handle.__main__.WindowHandleDriverMethods.count","title":"<code>count(selenium=False)</code>","text":"<p>Count number of open tabs or windows.</p> <p>Parameters:</p> Name Type Description Default <code>selenium</code> <code>bool</code> <p>Set to <code>True</code> if you want the Selenium handle IDs rather than from Browserist's internal window handle controller.</p> <code>False</code> <p>Returns:</p> Type Description <code>int</code> <p>Number of open tabs or windows.</p> Example <pre><code>sum_of_window_handles = browser.window.handle.count()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/handle/#browserist.browser.window.handle.__main__.WindowHandleDriverMethods.current","title":"<code>current()</code>","text":"<p>Get the ID of the current tab or window.</p> <p>Returns:</p> Type Description <code>str</code> <p>ID of the current tab or window. e.g. <code>CDwindow-69663F4BF867CC38F6AF46D55BFC1A8A</code>.</p> Example <pre><code>current_window_handle = browser.window.handle.current()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/","title":"browser.window","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods.close","title":"<code>close()</code>","text":"<p>Close close the current tab or, if it's the last tab in a window, the current browser window.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_tab(\"https://google.com\")\n    browser.window.close()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods.fullscreen","title":"<code>fullscreen()</code>","text":"<p>Fills the entire screen. Similar to pressing F11 in most browsers.</p> Example <pre><code>browser.window.fullscreen()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods.maximize","title":"<code>maximize()</code>","text":"<p>Enlarge the browser window to the maximum allowed size.</p> Note <p>For most operating systems, the window will fill the screen, without blocking the operating system's own menus and toolbars. Obviously, the size of the browser window also depends on the device and its screen resolution.</p> Example <pre><code>browser.window.maximize()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods.minimize","title":"<code>minimize()</code>","text":"<p>Minimizes the window of the current browsing context.</p> Note <p>The exact behavior of this command is specific to operating systems. Minimizing the window typically hides the window in the system tray.</p> Example <pre><code>browser.window.minimize()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods.switch_to","title":"<code>switch_to(window_handle)</code>","text":"<p>Switch to window/tab by handle ID or name.</p> <p>Parameters:</p> Name Type Description Default <code>window_handle</code> <code>str</code> <p>Handle ID or name of window/tab to switch to.</p> required Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.open.new_tab(\"https://example.com\", \"tab_1\")\n    browser.window.open.new_tab(\"https://google.com\", \"tab_2\")\n    browser.window.switch_to(\"tab_1\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/main/#browserist.browser.window.__main__.WindowDriverMethods.switch_to_original_window","title":"<code>switch_to_original_window()</code>","text":"<p>Switch to initial window/tab.</p> Note <p>Browserist automatically remembers the handle ID of the initial window/tab when the browser is first opened.</p> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_window(\"https://google.com\")\n    browser.window.switch_to_original_window()\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/open/","title":"browser.window.open","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/open/#browserist.browser.window.open.__main__.WindowOpenDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/open/#browserist.browser.window.open.__main__.WindowOpenDriverMethods.new_tab","title":"<code>new_tab(url=None, name=None, timeout=None)</code>","text":"<p>Open and switch to new tab in current browser window.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>If given, the URL will open in the new tab.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Unique name to identify the tab so you later can switch back to this tab with the <code>browser.window.switch_to(\"some_name\")</code> method.</p> <code>None</code> <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for the tab. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.open.new_tab(\"https://example.com\", \"tab_1\")\n    browser.window.open.new_tab(\"https://google.com\", \"tab_2\")\n    browser.window.switch_to(\"tab_1\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/open/#browserist.browser.window.open.__main__.WindowOpenDriverMethods.new_window","title":"<code>new_window(url=None, name=None, timeout=None)</code>","text":"<p>Open and switch to new browser window.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str | None</code> <p>If given, the URL will open in the new window.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Unique name to identify the window so you later can switch back to this window with the <code>browser.window.switch_to(\"some_name\")</code> method.</p> <code>None</code> <code>timeout</code> <code>float | None</code> <p>In seconds. Timeout to wait for the window. If <code>None</code>, the global timeout setting is used (default 5 seconds).</p> <code>None</code> Example <pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.open.new_window(\"https://example.com\", \"window_1\")\n    browser.window.open.new_window(\"https://google.com\", \"window_2\")\n    browser.window.switch_to(\"window_1\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/set/","title":"browser.window.set","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/set/#browserist.browser.window.set.__main__.WindowSetDriverMethods-functions","title":"Functions","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/set/#browserist.browser.window.set.__main__.WindowSetDriverMethods.height","title":"<code>height(height)</code>","text":"<p>If possible, restore the window and set the window height.</p> Note <p>Window size is not the same as the viewport size. The viewport is often smaller than the browser window that needs space for menus and buttons.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>Height of the window in pixels.</p> required Example <pre><code>browser.window.set.height(600)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/set/#browserist.browser.window.set.__main__.WindowSetDriverMethods.position","title":"<code>position(x, y)</code>","text":"<p>If possible, move the window to the chosen coordinate of the screen.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>In pixels. Absolute X coordinate of the screen on the horisontal axis.</p> required <code>y</code> <code>int</code> <p>In pixels. Absolute Y coordinate of the screen on the vertical axis.</p> required Example <p>How to set the absolute position of the window to 100 pixels from the left and 100 pixels from the top of the screen, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.set.position(100, 100)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/set/#browserist.browser.window.set.__main__.WindowSetDriverMethods.size","title":"<code>size(width, height)</code>","text":"<p>If possible, restore the window and set the window size.</p> Note <p>Window size is not the same as the viewport size. The viewport is often smaller than the browser window that needs space for menus and buttons.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the window in pixels.</p> required <code>height</code> <code>int</code> <p>Height of the window in pixels.</p> required Example <pre><code>browser.window.set.size(800, 600)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/browser/window/set/#browserist.browser.window.set.__main__.WindowSetDriverMethods.width","title":"<code>width(width)</code>","text":"<p>If possible, restore the window and set the window width.</p> Note <p>Window size is not the same as the viewport size. The viewport is often smaller than the browser window that needs space for menus and buttons.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the window in pixels.</p> required Example <pre><code>browser.window.set.width(800)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/configuration/browser-settings/","title":"Browser Settings","text":"","tags":["Documentation","Tutorial","Settings"]},{"location":"reference/configuration/browser-settings/#browsersettings","title":"<code>BrowserSettings</code>","text":"<p>Class to configure the browser driver.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>BrowserType</code> <p>Set browser type, e.g. Chrome, Edge, Firefox, etc.</p> <code>EDGE if is_windows() else CHROME</code> <code>headless</code> <code>bool</code> <p>Run the browser in headless mode. May not be supported by all browsers, or some interaction methods, e.g. select, may not be supported.</p> <code>False</code> <code>disable_images</code> <code>bool</code> <p>Neither request nor render images, which typically improves loading speed. May not be supported by all browsers.</p> <code>False</code> <code>page_load_strategy</code> <code>PageLoadStrategy</code> <p>Set page load strategy.</p> <code>NORMAL</code> <code>path_to_executable</code> <code>str | Path | None</code> <p>If the browser executable isn't in a default folder, select which file to use.</p> <code>None</code> <code>download_dir</code> <code>str | Path</code> <p>Set where to save downloads. Default is the <code>Downloads</code> folder of the user.</p> <code>DOWNLOADS_DIR</code> <code>screenshot_dir</code> <code>str | Path</code> <p>Set where to save sreenshots. Default is the <code>Downloads</code> folder of the user.</p> <code>DOWNLOADS_DIR</code> <code>timeout</code> <code>TimeoutSettings</code> <p>Set timeout strategy and time.</p> <code>TimeoutSettings()</code> <code>viewport</code> <code>DeviceViewportSize | tuple[int, int] | None</code> <p>Emulate viewport size as device or set custom value in pixels. If not set, the browser's default size is used.</p> <code>None</code> <code>check_connection</code> <code>bool</code> <p>Check whether there is an internet connection before starting the browser. Bypass the check by setting it to <code>False</code>.</p> <code>True</code> <code>user_agent</code> <code>str | None</code> <p>Set a custom user agent to override the default user agent. If not set, the browser's default user agent is used.</p> <code>None</code> <code>proxy</code> <code>str | ProxySettings | None</code> <p>Enable a custom proxy server for the browser. If not using <code>ProxySettings</code>, use a string containing IP address and port number. For example, <code>http://127.0.0.1:8080</code> for a public proxy or <code>http://username:password@127.0.0.1:8080</code> for a private proxy that requires authentication.</p> <code>None</code> Example <p>Use Firefox as browser type:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(browser_type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>Use browser in headless mode and with images disabled:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(headless=True, disable_images=True)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>Use custom directory for screenshots:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(screenshot_dir=\"/screenshots/folder\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.visible_portion()\n</code></pre> <p>Use custom viewport size:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(viewport=(1024, 768))\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>Use custom <code>User-agent</code> in the request header:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(user_agent=\"MyUserAgent\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    user_agent = browser.user_agent.get()\n    print(user_agent)\n</code></pre> <p>How the print output appears in the terminal:</p> <pre><code>MyUserAgent\n</code></pre> <p>How to disable checking for an internet connection:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(check_connection=False)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>Use a custom proxy with a basic URL:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(proxy=\"http://127.0.0.1:8080\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>Use a custom proxy with a <code>ProxySettings</code> configuration class:</p> <pre><code>from browserist import Browser, BrowserSettings, ProxySettings, ProxyProtocol\n\nproxy_settings = ProxySettings(\n    ip=\"127.0.0.1\",\n    port=8080,\n    protocol=ProxyProtocol.HTTP)\n\nsettings = BrowserSettings(proxy=proxy_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial","Settings"]},{"location":"reference/configuration/browser-type/","title":"Browser Type Settings","text":"","tags":["Documentation","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"reference/configuration/browser-type/#browsertype","title":"<code>BrowserType</code>","text":"<p>Class to define browser type as used in <code>BrowserSettings</code>.</p> <p>Attributes:</p> Name Type Description <code>BrowserType.CHROME</code> <code>Enum</code> <p>Chrome browser. Default browser (except on Windows).</p> <code>BrowserType.EDGE</code> <code>Enum</code> <p>Edge browser. Default on Windows.</p> <code>BrowserType.FIREFOX</code> <code>Enum</code> <p>Firefox browser.</p> <code>BrowserType.INTERNET_EXPLORER</code> <code>Enum</code> <p>Internet Explorer browser.</p> <code>BrowserType.SAFARI</code> <code>Enum</code> <p>Safari browser.</p> Example <p>Use Firefox as browser type:</p> <pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(browser_type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>How to run multiple browsers:</p> <pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME)\nedge = BrowserSettings(type=BrowserType.EDGE)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n        browser.wait.seconds(5)\n</code></pre>","tags":["Documentation","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"reference/configuration/page-load-strategy/","title":"Page Load Strategy Settings","text":"","tags":["Documentation","Tutorial","Settings","Performance"]},{"location":"reference/configuration/page-load-strategy/#pageloadstrategy","title":"<code>PageLoadStrategy</code>","text":"<p>Class to configure page load strategy for Selenium as used in <code>BrowserSettings</code>.</p> <p>Attributes:</p> Name Type Description <code>PageLoadStrategy.NORMAL</code> <code>Enum</code> <p>Used by default. Waits for all resources to download. Ready state: Complete.</p> <code>PageLoadStrategy.EAGER</code> <code>Enum</code> <p>DOM access is ready, but other resources like images may still be loading. Ready state: Interactive.</p> <code>PageLoadStrategy.NONE</code> <code>Enum</code> <p>Does not block web driver at all. Ready state: Any.</p> Example <p>How to change the default page load strategy to eager:</p> <pre><code>from browserist import Browser, BrowserSettings, PageLoadStrategy\n\nsettings = BrowserSettings(page_load_strategy=PageLoadStrategy.EAGER)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Performance"]},{"location":"reference/configuration/proxy-settings/","title":"Proxy Settings","text":"","tags":["Documentation","Tutorial","Settings","Proxy"]},{"location":"reference/configuration/proxy-settings/#proxysettings","title":"<code>ProxySettings</code>","text":"<p>Class to configure the proxy as used in <code>BrowserSettings</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>IP address of the proxy server. Should be an IPv4 address, e.g. <code>127.0.0.1</code>.</p> required <code>port</code> <code>int</code> <p>Port number of the proxy server, e.g. <code>8080</code>.</p> required <code>type</code> <code>ProxyProtocol</code> <p>Type of proxy protocol.</p> <code>HTTP</code> <code>username</code> <code>str | None</code> <p>Username for the proxy server.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>Password for the proxy server.</p> <code>None</code> Example <p>How to set a proxy server with a basic URL:</p> <pre><code>from browserist import Browser, BrowserSettings, ProxySettings\n\nproxy_settings = ProxySettings(\n    ip=\"127.0.0.1\",\n    port=8080)\n\nsettings = BrowserSettings(proxy=proxy_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Proxy"]},{"location":"reference/configuration/proxy-settings/#proxyprotocol","title":"<code>ProxyProtocol</code>","text":"<p>Class to define the type of proxy protocol as used in <code>ProxySettings</code>.</p> <p>Attributes:</p> Name Type Description <code>ProxyProtocol.HTTP</code> <code>Enum</code> <p>Use HTTP proxy.</p> <code>ProxyProtocol.HTTPS</code> <code>Enum</code> <p>Use HTTPS proxy.</p> <code>ProxyProtocol.SOCKS4</code> <code>Enum</code> <p>Use SOCKS4 proxy.</p> <code>ProxyProtocol.SOCKS5</code> <code>Enum</code> <p>Use SOCKS5 proxy.</p> Example <p>How to set a different proxy protocol than the default <code>HTTP</code>:</p> <pre><code>from browserist import Browser, BrowserSettings, ProxySettings, ProxyProtocol\n\nproxy_settings = ProxySettings(\n    ip=\"127.0.0.1\",\n    port=8080,\n    protocol=ProxyProtocol.HTTPS)\n\nsettings = BrowserSettings(proxy=proxy_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Proxy"]},{"location":"reference/configuration/timeout-settings/","title":"Timeout Settings","text":"","tags":["Documentation","Tutorial","Settings","Performance"]},{"location":"reference/configuration/timeout-settings/#timeoutsettings","title":"<code>TimeoutSettings</code>","text":"<p>Class to configure timeout settings and strategy as used in <code>BrowserSettings</code>.</p> <p>Parameters:</p> Name Type Description Default <code>strategy</code> <code>TimeoutStrategy</code> <p>If a function times out, should the browser continue or stop? Default is stop.</p> <code>STOP</code> <code>seconds</code> <code>float</code> <p>General timeout in seconds to be applied for each function (note that a function-specific timeout overrides this).</p> <code>5</code> <code>idle_download_seconds</code> <code>float</code> <p>General timeout in seconds to be applied for downloads to determine when a file download is idle.</p> <code>3</code> Example <p>How to set the timeout strategy and timeout:</p> <pre><code>from browserist import Browser, BrowserSettings, TimeoutSettings, TimeoutStrategy\n\ntimeout_settings = TimeoutSettings(\n    strategy=TimeoutStrategy.CONTINUE,\n    seconds=10)\n\nsettings = BrowserSettings(timeout=timeout_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Performance"]},{"location":"reference/configuration/timeout-settings/#timeoutstrategy","title":"<code>TimeoutStrategy</code>","text":"<p>Define timeout strategy as used in <code>TimeoutSettings</code>.</p> <p>Attributes:</p> Name Type Description <code>TimeoutStrategy.STOP</code> <code>Enum</code> <p>If a function times out, stop operation.</p> <code>TimeoutStrategy.CONTINUE</code> <code>Enum</code> <p>If a function times out, continue operation.</p> Example <p>How to set a different timeout strategy than the default <code>STOP</code>:</p> <pre><code>from browserist import Browser, BrowserSettings, TimeoutSettings, TimeoutStrategy\n\ntimeout_settings = TimeoutSettings(\n    strategy=TimeoutStrategy.CONTINUE)\n\nsettings = BrowserSettings(timeout=timeout_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Documentation","Tutorial","Settings","Performance"]},{"location":"reference/viewport/common-devices/apple/","title":"common_devices.Apple","text":"<p>Viewport sizes for common Apple devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\niphone_x = common_devices.Apple.IPHONE_X\nsettings = BrowserSettings(\n    headless=True,\n    viewport=iphone_x)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/apple.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass AppleDevices:\n    \"\"\"Viewport sizes for common Apple devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        iphone_x = common_devices.Apple.IPHONE_X\n        settings = BrowserSettings(\n            headless=True,\n            viewport=iphone_x)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    IPHONE_15_PRO_MAX = DeviceViewportSize(430, 932)\n    IPHONE_15_PRO = DeviceViewportSize(393, 852)\n    IPHONE_15_PLUS = DeviceViewportSize(430, 932)\n    IPHONE_15 = DeviceViewportSize(393, 852)\n\n    IPHONE_14_PRO_MAX = DeviceViewportSize(430, 932)\n    IPHONE_14_PRO = DeviceViewportSize(393, 852)\n    IPHONE_14_PLUS = DeviceViewportSize(428, 926)\n    IPHONE_14 = DeviceViewportSize(390, 844)\n\n    IPHONE_13_PRO_MAX = DeviceViewportSize(428, 926)\n    IPHONE_13_PRO = DeviceViewportSize(390, 844)\n    IPHONE_13_MINI = DeviceViewportSize(375, 812)\n    IPHONE_13 = DeviceViewportSize(390, 844)\n\n    IPHONE_12_PRO_MAX = DeviceViewportSize(428, 926)\n    IPHONE_12_PRO = DeviceViewportSize(390, 844)\n    IPHONE_12_MINI = DeviceViewportSize(375, 812)\n    IPHONE_12 = DeviceViewportSize(390, 844)\n\n    IPHONE_11_PRO_MAX = DeviceViewportSize(414, 896)\n    IPHONE_11_PRO = DeviceViewportSize(375, 812)\n    IPHONE_11 = DeviceViewportSize(414, 896)\n\n    IPHONE_XS_MAX = DeviceViewportSize(414, 896)\n    IPHONE_XS = DeviceViewportSize(375, 812)\n    IPHONE_XR = DeviceViewportSize(414, 896)\n    IPHONE_X = DeviceViewportSize(375, 812)\n\n    IPHONE_8_PLUS = DeviceViewportSize(414, 736)\n    IPHONE_8 = DeviceViewportSize(375, 667)\n\n    IPHONE_7_PLUS = DeviceViewportSize(414, 736)\n    IPHONE_7 = DeviceViewportSize(375, 667)\n\n    IPHONE_6S_PLUS = DeviceViewportSize(375, 667)\n    IPHONE_6S = DeviceViewportSize(375, 667)\n    IPHONE_6_PLUS = DeviceViewportSize(375, 667)\n    IPHONE_6 = DeviceViewportSize(375, 667)\n\n    IPHONE_SE_3RD_GEN = DeviceViewportSize(375, 667)\n    IPHONE_SE_2ND_GEN = DeviceViewportSize(375, 667)\n    IPHONE_SE_1ST_GEN = DeviceViewportSize(320, 568)\n\n    IPAD_PRO_12_9_INCH_6TH_GEN = DeviceViewportSize(1024, 1366)\n    IPAD_PRO_12_9_INCH_5TH_GEN = DeviceViewportSize(1024, 1366)\n    IPAD_PRO_12_9_INCH_4TH_GEN = DeviceViewportSize(1024, 1366)\n    IPAD_PRO_12_9_INCH_3RD_GEN = DeviceViewportSize(1024, 1366)\n    IPAD_PRO_12_9_INCH_2ND_GEN = DeviceViewportSize(1024, 1366)\n    IPAD_PRO_12_9_INCH_1ST_GEN = DeviceViewportSize(1024, 1366)\n\n    IPAD_PRO_11_INCH_4TH_GEN = DeviceViewportSize(834, 1194)\n    IPAD_PRO_11_INCH_3RD_GEN = DeviceViewportSize(834, 1194)\n    IPAD_PRO_11_INCH_2ND_GEN = DeviceViewportSize(834, 1194)\n    IPAD_PRO_11_INCH_1ST_GEN = DeviceViewportSize(834, 1194)\n\n    IPAD_PRO_10_5_INCH = DeviceViewportSize(834, 1112)\n\n    IPAD_PRO_9_7_INCH = DeviceViewportSize(768, 1024)\n\n    IPAD_AIR_5TH_GEN = DeviceViewportSize(820, 1180)\n    IPAD_AIR_4TH_GEN = DeviceViewportSize(820, 1180)\n    IPAD_AIR_3RD_GEN = DeviceViewportSize(834, 1112)\n    IPAD_AIR_2ND_GEN = DeviceViewportSize(768, 1024)\n    IPAD_AIR_1ST_GEN = DeviceViewportSize(768, 1024)\n\n    IPAD_MINI_6TH_GEN = DeviceViewportSize(744, 1133)\n    IPAD_MINI_5TH_GEN = DeviceViewportSize(768, 1024)\n    IPAD_MINI_4TH_GEN = DeviceViewportSize(768, 1024)\n    IPAD_MINI_3RD_GEN = DeviceViewportSize(768, 1024)\n    IPAD_MINI_2ND_GEN = DeviceViewportSize(768, 1024)\n    IPAD_MINI_1ST_GEN = DeviceViewportSize(768, 1024)\n\n    IPAD_10TH_GEN = DeviceViewportSize(810, 1080)\n    IPAD_9TH_GEN = DeviceViewportSize(810, 1080)\n    IPAD_8TH_GEN = DeviceViewportSize(810, 1080)\n    IPAD_7TH_GEN = DeviceViewportSize(810, 1080)\n    IPAD_6TH_GEN = DeviceViewportSize(768, 1024)\n    IPAD_5TH_GEN = DeviceViewportSize(768, 1024)\n    IPAD_4TH_GEN = DeviceViewportSize(768, 1024)\n    IPAD_3RD_GEN = DeviceViewportSize(768, 1024)\n    IPAD_2ND_GEN = DeviceViewportSize(768, 1024)\n    IPAD_1ST_GEN = DeviceViewportSize(768, 1024)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/google/","title":"common_devices.Google","text":"<p>Viewport sizes for common Google devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\nnest_hub_max = common_devices.Google.NEST_HUB_MAX\nsettings = BrowserSettings(\n    headless=True,\n    viewport=nest_hub_max)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/google.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass GoogleDevices:\n    \"\"\"Viewport sizes for common Google devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        nest_hub_max = common_devices.Google.NEST_HUB_MAX\n        settings = BrowserSettings(\n            headless=True,\n            viewport=nest_hub_max)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    PIXEL_5 = DeviceViewportSize(393, 851)\n\n    PIXEL_4A = DeviceViewportSize(393, 851)\n    PIXEL_4_XL = DeviceViewportSize(412, 869)\n    PIXEL_4 = DeviceViewportSize(393, 830)\n\n    PIXEL_3A_XL = DeviceViewportSize(412, 823)\n    PIXEL_3A = DeviceViewportSize(393, 808)\n    PIXEL_3_XL = DeviceViewportSize(412, 846)\n    PIXEL_3 = DeviceViewportSize(393, 786)\n\n    PIXEL_2_XL = DeviceViewportSize(412, 823)\n    PIXEL_2 = DeviceViewportSize(412, 732)\n\n    PIXEL_1_XL = DeviceViewportSize(412, 732)\n    PIXEL_1 = DeviceViewportSize(412, 732)\n\n    NEST_HUB = DeviceViewportSize(1024, 600)\n    NEST_HUB_MAX = DeviceViewportSize(1280, 800)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/huawei/","title":"common_devices.Huawei","text":"<p>Viewport sizes for common Huawei devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\nhuawei_p40_lite = common_devices.Huawei.P40_LITE\n    settings = BrowserSettings(\n    headless=True,\n    viewport=huawei_p40_lite)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/huawei.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass HuaweiDevices:\n    \"\"\"Viewport sizes for common Huawei devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        huawei_p40_lite = common_devices.Huawei.P40_LITE\n            settings = BrowserSettings(\n            headless=True,\n            viewport=huawei_p40_lite)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    MATE_30_PRO = DeviceViewportSize(392, 800)\n    MATE_30 = DeviceViewportSize(360, 780)\n\n    MATE_20_LITE = DeviceViewportSize(360, 780)\n    MATE_20_PRO = DeviceViewportSize(360, 780)\n\n    MATE_10_LITE = DeviceViewportSize(360, 720)\n\n    NOVA_7_PRO = DeviceViewportSize(360, 780)\n    NOVA_7_SE = DeviceViewportSize(360, 800)\n    NOVA_7_I = DeviceViewportSize(360, 770)\n\n    NOVA_6 = DeviceViewportSize(360, 880)\n\n    P40_PRO = DeviceViewportSize(400, 880)\n    P40_LITE = DeviceViewportSize(360, 770)\n    P40 = DeviceViewportSize(360, 780)\n\n    P30_PRO = DeviceViewportSize(360, 780)\n    P30_LITE = DeviceViewportSize(360, 771)\n    P30 = DeviceViewportSize(360, 780)\n\n    P20_PRO = DeviceViewportSize(360, 747)\n    P20_LITE = DeviceViewportSize(360, 760)\n    P20 = DeviceViewportSize(360, 748)\n\n    P10_PLUS = DeviceViewportSize(360, 640)\n    P10_LITE = DeviceViewportSize(360, 640)\n    P10 = DeviceViewportSize(360, 640)\n\n    P9_LITE = DeviceViewportSize(360, 640)\n    P9 = DeviceViewportSize(360, 640)\n\n    P8_LITE = DeviceViewportSize(360, 640)\n\n    Y9_PRIME = DeviceViewportSize(360, 780)\n    Y9_S = DeviceViewportSize(360, 780)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/microsoft/","title":"common_devices.Microsoft","text":"<p>Viewport sizes for common Microsoft devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\nsurface_pro_7 = common_devices.Microsoft.SURFACE_PRO_7\nsettings = BrowserSettings(\n    headless=True,\n    viewport=surface_pro_7)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/microsoft.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass MicrosoftDevices:\n    \"\"\"Viewport sizes for common Microsoft devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        surface_pro_7 = common_devices.Microsoft.SURFACE_PRO_7\n        settings = BrowserSettings(\n            headless=True,\n            viewport=surface_pro_7)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    SURFACE_PRO_X = DeviceViewportSize(960, 1440)\n    SURFACE_PRO_7 = DeviceViewportSize(912, 1368)\n    SURFACE_PRO_6 = DeviceViewportSize(912, 1368)\n    SURFACE_PRO_5 = DeviceViewportSize(912, 1368)\n    SURFACE_PRO_4 = DeviceViewportSize(912, 1368)\n    SURFACE_PRO_3 = DeviceViewportSize(960, 1440)\n    SURFACE_PRO_2 = DeviceViewportSize(720, 1280)\n    SURFACE_PRO_1 = DeviceViewportSize(720, 1280)\n\n    SURFACE_3 = DeviceViewportSize(720, 1280)\n    SURFACE_2 = DeviceViewportSize(720, 1280)\n    SURFACE_1 = DeviceViewportSize(768, 1366)\n\n    SURFACE_DUO = DeviceViewportSize(540, 720)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/oneplus/","title":"common_devices.OnePlus","text":"<p>Viewport sizes for common OnePlus devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\noneplus_8_pro = common_devices.OnePlus.ONEPLUS_8_PRO\nsettings = BrowserSettings(\n    headless=True,\n    viewport=oneplus_8_pro)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/oneplus.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass OnePlusDevices:\n    \"\"\"Viewport sizes for common OnePlus devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        oneplus_8_pro = common_devices.OnePlus.ONEPLUS_8_PRO\n        settings = BrowserSettings(\n            headless=True,\n            viewport=oneplus_8_pro)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    ONEPLUS_9_PRO = DeviceViewportSize(412, 919)\n    ONEPLUS_9 = DeviceViewportSize(412, 915)\n\n    ONEPLUS_8_PRO = DeviceViewportSize(412, 906)\n    ONEPLUS_8 = DeviceViewportSize(412, 915)\n\n    ONEPLUS_7T_PRO = DeviceViewportSize(412, 892)\n    ONEPLUS_7T = DeviceViewportSize(412, 914)\n    ONEPLUS_7_PRO = DeviceViewportSize(412, 892)\n    ONEPLUS_7 = DeviceViewportSize(412, 892)\n\n    ONEPLUS_6 = DeviceViewportSize(412, 869)\n    ONEPLUS_6T = DeviceViewportSize(412, 892)\n\n    NORD = DeviceViewportSize(412, 915)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/oppo/","title":"common_devices.Oppo","text":"<p>Viewport sizes for common Oppo devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\noppo_f1_plus = common_devices.Oppo.F1_PLUS\n    settings = BrowserSettings(\n    headless=True,\n    viewport=oppo_f1_plus)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/oppo.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass OppoDevices:\n    \"\"\"Viewport sizes for common Oppo devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        oppo_f1_plus = common_devices.Oppo.F1_PLUS\n            settings = BrowserSettings(\n            headless=True,\n            viewport=oppo_f1_plus)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    F1_PLUS = DeviceViewportSize(360, 740)  # TODO: To be verified.\n    F1 = DeviceViewportSize(360, 740)  # TODO: To be verified.\n\n    R9_PLUS = DeviceViewportSize(360, 740)  # TODO: To be verified.\n    R9 = DeviceViewportSize(360, 740)  # TODO: To be verified.\n\n    A53 = DeviceViewportSize(360, 740)  # TODO: To be verified.\n    A37 = DeviceViewportSize(360, 640)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/samsung/","title":"common_devices.Samsung","text":"<p>Viewport sizes for common Samsung devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\ngalaxy_s8_plus = common_devices.Samsung.GALAXY_S8_PLUS\nsettings = BrowserSettings(\n    headless=True,\n    viewport=galaxy_s8_plus)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/samsung.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass SamsungDevices:\n    \"\"\"Viewport sizes for common Samsung devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        galaxy_s8_plus = common_devices.Samsung.GALAXY_S8_PLUS\n        settings = BrowserSettings(\n            headless=True,\n            viewport=galaxy_s8_plus)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    GALAXY_J7 = DeviceViewportSize(360, 640)\n    GALAXY_J6 = DeviceViewportSize(360, 640)\n    GALAXY_J3 = DeviceViewportSize(360, 640)\n\n    GALAXY_S9_PLUS = DeviceViewportSize(412, 846)\n    GALAXY_S9 = DeviceViewportSize(360, 740)\n\n    GALAXY_S8_PLUS = DeviceViewportSize(412, 846)\n    GALAXY_S8 = DeviceViewportSize(360, 740)\n\n    GALAXY_S7_EDGE = DeviceViewportSize(360, 640)\n    GALAXY_S7 = DeviceViewportSize(360, 640)\n\n    GALAXY_S20_ULTRA = DeviceViewportSize(412, 915)\n\n    GALAXY_FOLD = DeviceViewportSize(280, 653)\n\n    GALAXY_A51_71 = DeviceViewportSize(412, 914)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/vivo/","title":"common_devices.Vivo","text":"<p>Viewport sizes for common Vivo devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\nvivo_y20 = common_devices.Vivo.Y20\n    settings = BrowserSettings(\n    headless=True,\n    viewport=vivo_y20)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/vivo.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass VivoDevices:\n    \"\"\"Viewport sizes for common Vivo devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        vivo_y20 = common_devices.Vivo.Y20\n            settings = BrowserSettings(\n            headless=True,\n            viewport=vivo_y20)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    Y55S = DeviceViewportSize(360, 640)\n    Y20 = DeviceViewportSize(385, 854)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/viewport/common-devices/xiaomi/","title":"common_devices.Xiaomi","text":"<p>Viewport sizes for common Xiaomi devices.</p> Example <pre><code>from browserist import Browser, BrowserSettings, common_devices\n\nxiaomi_mi_10_pro = common_devices.Xiaomi.MI_10_PRO\n    settings = BrowserSettings(\n    headless=True,\n    viewport=xiaomi_mi_10_pro)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> Source code in <code>src/browserist/model/viewport/collection/xiaomi.py</code> Python<pre><code>@dataclass(slots=True, frozen=True)\nclass XiaomiDevices:\n    \"\"\"Viewport sizes for common Xiaomi devices.\n\n    Example:\n        ```python title=\"\" linenums=\"1\" hl_lines=\"3 6\"\n        from browserist import Browser, BrowserSettings, common_devices\n\n        xiaomi_mi_10_pro = common_devices.Xiaomi.MI_10_PRO\n            settings = BrowserSettings(\n            headless=True,\n            viewport=xiaomi_mi_10_pro)\n\n        with Browser(settings) as browser:\n            browser.open.url(\"https://example.com\")\n        ```\n    \"\"\"\n\n    MI_10T_PRO = DeviceViewportSize(393, 873)\n    MI_10T = DeviceViewportSize(393, 873)\n    MI_10_PRO = DeviceViewportSize(393, 851)\n    MI_10 = DeviceViewportSize(393, 851)\n\n    MI_9T = DeviceViewportSize(393, 851)\n    MI_9_LITE = DeviceViewportSize(393, 851)\n    MI_9_SE = DeviceViewportSize(393, 851)\n    MI_9 = DeviceViewportSize(393, 851)\n\n    MI_8_PRO = DeviceViewportSize(393, 817)\n    MI_8_SE = DeviceViewportSize(393, 816)\n    MI_8 = DeviceViewportSize(393, 817)\n\n    MI_6 = DeviceViewportSize(393, 816)\n\n    MI_3 = DeviceViewportSize(360, 640)\n\n    REDMI_NOTE_9_PRO = DeviceViewportSize(393, 873)\n    REDMI_NOTE_9 = DeviceViewportSize(393, 851)\n\n    REDMI_NOTE_8_PRO = DeviceViewportSize(393, 851)\n    REDMI_NOTE_8 = DeviceViewportSize(393, 851)\n\n    REDMI_NOTE_7 = DeviceViewportSize(393, 851)\n</code></pre>","tags":["Documentation","Tutorial"]},{"location":"settings/browser-types/","title":"How to Configure Browser Type","text":"","tags":["Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/browser-types/#basic-usage","title":"Basic Usage","text":"<p>If you want to use different types of browsers \u2013 for example, Firefox, Edge, Chrome, etc. \u2013 define this in the <code>BrowserSettings</code> class:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre>","tags":["Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/browser-types/#supported-browsers","title":"Supported Browsers","text":"Name Type Notes Chrome <code>BrowserType.CHROME</code> Default (except on Windows) Edge <code>BrowserType.EDGE</code> Default on Windows Firefox <code>BrowserType.FIREFOX</code> Internet Explorer <code>BrowserType.INTERNET_EXPLORER</code> Safari <code>BrowserType.SAFARI</code> <p>More information about installation of browser drivers.</p> <p>Custom Browser Executable</p> <p>If the browser executable isn't in a default folder, choose which file to use by setting the <code>path_to_executable</code> option in the <code>BrowserSettings</code> class.</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(\n    type=BrowserType.FIREFOX,\n    path_to_executable=\"/path/to/executable/firefox.exe\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre>","tags":["Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/browser-types/#how-to-run-multiple-browsers","title":"How to Run Multiple Browsers","text":"<p>When you have multiple browser drivers installed, you can run them in sequence like this:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME)\nedge = BrowserSettings(type=BrowserType.EDGE)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n        browser.wait.seconds(5)\n</code></pre>","tags":["Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/check-connection/","title":"Why Check the Internet Connection?","text":"<p>Browserist automatically checks the internet connection before starting the browser by default. This is to ensure that the browser is ready to interact with the web. If the internet connection is not available, Browserist will raise an error.</p>","tags":["Tutorial","Settings"]},{"location":"settings/check-connection/#how-to-disable-checking-the-internet-connection","title":"How to Disable Checking the Internet Connection","text":"<p>If you want to bypass the check, simply set the <code>check_connection</code> option to <code>False</code>:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(check_connection=False)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings"]},{"location":"settings/overview/","title":"Configuration Options \ud83d\udee0\ufe0f","text":"<p>When using Selenium, you often need to configure the driver differently for each browser, whether it should disable images or run in headless mode.</p> <p>With Browserist, many of these complexities are handled automatically under the hood, so all you need to do is set the browser type and other options in the <code>BrowserSettings</code> class.</p>","tags":["Tutorial","Settings","Browser Types","Performance","Headless","Viewport"]},{"location":"settings/overview/#examples","title":"Examples","text":"","tags":["Tutorial","Settings","Browser Types","Performance","Headless","Viewport"]},{"location":"settings/overview/#basic-usage","title":"Basic Usage","text":"<p>If you want to use a specific browser types, e.g. Firefox, it's easy to define in the settings:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Browser Types","Performance","Headless","Viewport"]},{"location":"settings/overview/#advanced-options","title":"Advanced Options","text":"<p>And if you want to use Firefox in headless mode, disable images, and emulate the viewport of a specific device, that's also possible:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType, common_devices\n\niphone_se = common_devices.Apple.IPHONE_SE\n\nsettings = BrowserSettings(\n    type=BrowserType.FIREFOX,\n    headless=True,\n    disable_images=True,\n    viewport=iphone_se)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Browser Types","Performance","Headless","Viewport"]},{"location":"settings/overview/#options-for-browsersettings","title":"Options for <code>BrowserSettings</code>","text":"<p>Use <code>BrowserSettings</code> with the following options:</p> Setting Option Default Description <code>type</code> <code>BrowserType</code> <code>BrowserType.CHROME</code> (except <code>BrowserType.EDGE</code> for Windows) Set browser type, e.g. Chrome, Edge, Firefox, etc. <code>headless</code> <code>True</code> or <code>False</code> <code>False</code> Run the browser in headless mode. May not be supported by all browsers, or some interaction methods, e.g. select, may not be supported. <code>disable_images</code> <code>True</code> or <code>False</code> <code>False</code> Neither request nor render images, which typically improves loading speed. May not be supported by all browsers. <code>page_load_strategy</code> <code>PageLoadStrategy</code> <code>PageLoadStrategy.NORMAL</code> Set page load strategy. <code>path_to_executable</code> Path to file System default If the browser executable isn't in a default folder, select which file to use. <code>download_dir</code> Path to directory System default Set where to save downloads. Default is the <code>Downloads</code> folder of the user. <code>screenshot_dir</code> Path to directory System default Set where to save sreenshots. Default is the <code>Downloads</code> folder of the user. <code>timeout</code> <code>TimeoutSettings</code> <code>TimeoutStrategy.STOP</code> and 5 seconds Set timeout strategy and time. <code>viewport</code> <code>DeviceViewportSize</code> or <code>(width, height)</code> Browser default size Emulate viewport size as device or set custom value in pixels. <code>check_connection</code> <code>True</code> or <code>False</code> <code>True</code> Check whether there is an internet connection before starting the browser. Bypass the check by setting it to <code>False</code>. <code>user_agent</code> User agent string <code>str</code> Browser default Set a custom user agent to override the default user agent. <code>proxy</code> <code>ProxySettings</code> or  IP address <code>str</code> <code>None</code> Enable a custom proxy server for the browser. If not using <code>ProxySettings</code>, use a string containing IP address and port number. For example, <code>http://127.0.0.1:8080</code> for a public proxy or <code>http://username:password@127.0.0.1:8080</code> for a private proxy that requires authentication. <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial","Settings","Browser Types","Performance","Headless","Viewport"]},{"location":"settings/page-load-strategy/","title":"What Is a Page Load Strategy?","text":"<p>When is a page considered to be loaded? When all resources \u2013 stylesheets, images, scripts, etc. \u2013 have finished loading, or perhaps earlier when you can interact with the page?</p> <p>This choice is important if you want to tweak the performance of how fast your automation script runs. Just be aware that the page load strategy options are a trade-off between speed and stability, and the browser may hang idle or crash if you choose the wrong strategy.</p> <p>The default \u2013 and most commonly used \u2013 strategy is to wait for all resources to be downloaded: <code>PageLoadStrategy.NORMAL</code>. However, if your script doesn't need to download images or need to interact with the page, try the <code>PageLoadStrategy.EAGER</code> or <code>PageLoadStrategy.NONE</code> strategies to speed up the execution.</p>","tags":["Tutorial","Settings","Selenium","Performance"]},{"location":"settings/page-load-strategy/#strategy-options","title":"Strategy Options","text":"<p>Configure the page load strategy with the <code>PageLoadStrategy</code> class. This is then passed on to the underlying Selenium web driver. The options are:</p> Option Description Ready State <code>PageLoadStrategy.NORMAL</code> Default. Waits for all resources to download. Complete <code>PageLoadStrategy.EAGER</code> DOM access is ready, but other resources like images may still be loading. Interactive <code>PageLoadStrategy.NONE</code> Does not block web driver at all. Any <p>Note</p> <p>The page load strategy is set for the entire browser session. It can't be changed later for individual functions.</p>","tags":["Tutorial","Settings","Selenium","Performance"]},{"location":"settings/page-load-strategy/#example","title":"Example","text":"<p>How to set the page load strategy when opening a new browser:</p> Python<pre><code>from browserist import Browser, BrowserSettings, PageLoadStrategy\n\nsettings = BrowserSettings(page_load_strategy=PageLoadStrategy.EAGER)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Selenium","Performance"]},{"location":"settings/page-load-strategy/#what-is-the-document-ready-state","title":"What Is the Document Ready State?","text":"<p>The <code>document.readyState</code> is a property of the Document Object Model (DOM) that indicates the loading status of the page. When navigating to a new page via URL, the browser driver waits until the document ready state is complete by default.</p> <p>Note that this doesn't mean that the page has finished loading. This is especially the case for single-page applications that use JavaScript to dynamically load content after the document ready state is complete. Furthermore, the behavior does not apply to navigation that is a result of clicking an element or submitting a form.</p> <p>If a page takes a long time to load as a result of downloading assets (e.g. images, CSS, JavaScript) that aren't important to the automation, you can change from the default <code>PageLoadStrategy.NORMAL</code> to <code>PageLoadStrategy.EAGER</code> or <code>PageLoadStrategy.NONE</code> to speed up the session.</p> <p>Warning</p> <p>Though you may gain some performance by using either <code>PageLoadStrategy.NONE</code> or <code>PageLoadStrategy.EAGER</code>, it's usually not recommended. The browser may not be ready to execute the next function, which can lead to unstability. It's often better to use <code>PageLoadStrategy.NORMAL</code> and, if the browser allows it, disable images instead.</p>","tags":["Tutorial","Settings","Selenium","Performance"]},{"location":"settings/proxy/","title":"What Is a Proxy and Why Using It?","text":"<p>A proxy server acts as an intermediary between your browser and the internet. Here are five common use cases for using a proxy server:</p> <ol> <li> <p>Enhanced security and privacy: By routing your internet traffic through a proxy server, you can hide your IP address and protect your personal information from potential threats.</p> </li> <li> <p>Accessing geo-restricted content: Proxies can help you bypass geo-restrictions and access content that is not available in your region by masking your IP address with one from a different location.</p> </li> <li> <p>Improved performance: Some proxy servers cache frequently accessed web pages, which can speed up your browsing experience by reducing the load time for those pages.</p> </li> <li> <p>Bypassing network restrictions: In environments with strict network restrictions, such as schools or workplaces, proxies can help you access blocked websites and services.</p> </li> <li> <p>Anonymity: When performing web scraping, using a proxy server can help you avoid IP bans and maintain anonymity, allowing you to gather data more effectively.</p> </li> </ol> <p>By understanding these use cases, you can determine whether using a proxy server is beneficial for your specific needs and context.</p>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#types-of-proxies","title":"Types of Proxies","text":"<p>There are two types of proxy servers:</p> Type Description Public Proxy These are accessible from the internet and are usually free to use without authentication. Private Proxy These are usually paid and require authentication. <p>Tip</p> <p>When using public proxies, be aware that they may be unreliable and slow. It's recommended to use a private proxy for more consistent performance. Also, keep in mind that public proxies may not be available in all regions, they may have usage limitations, they may be blocked by your internet service provider, or they may be blocked by the website you're trying to access.</p>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#how-to-set-a-proxy","title":"How to Set a Proxy","text":"<p>Learn how to set a proxy for the needs and context of your automation workflow with Browserist.</p>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#public-proxy","title":"Public Proxy","text":"<p>Public proxies are accessible from the internet and are usually free to use without authentication.</p>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#basic-usage","title":"Basic Usage","text":"<p>Example:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(proxy=\"http://127.0.0.1:8080\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#with-proxysettings-configuration-class","title":"With <code>ProxySettings</code> Configuration Class","text":"<p>If you want to use the <code>ProxySettings</code> configuration class instead, here's how:</p> Python<pre><code>from browserist import Browser, BrowserSettings, ProxySettings, ProxyProtocol\n\nproxy_settings = ProxySettings(\n    ip=\"127.0.0.1\",\n    port=8080,\n    protocol=ProxyProtocol.HTTP)\n\nsettings = BrowserSettings(proxy=proxy_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#private-proxy","title":"Private Proxy","text":"<p>Ensure that you have the necessary credentials to access a private proxy server before using it.</p>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#basic-usage_1","title":"Basic Usage","text":"<p>Change the <code>username</code> and <code>password</code> values of the proxy string to match your credentials:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(proxy=\"http://username:password@127.0.0.1:8080\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#with-proxysettings-configuration-class_1","title":"With <code>ProxySettings</code> Configuration Class","text":"<p>If you want to use the <code>ProxySettings</code> configuration class instead, here's how:</p> Python<pre><code>from browserist import Browser, BrowserSettings, ProxySettings, ProxyProtocol\n\nproxy_settings = ProxySettings(\n    ip=\"127.0.0.1\",\n    port=8080,\n    protocol=ProxyProtocol.HTTP\n    username=\"username\",\n    password=\"password\")\n\nsettings = BrowserSettings(proxy=proxy_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/proxy/#supported-browsers","title":"Supported Browsers","text":"<p>Note</p> <p>Only a few browsers support using a proxy server, for instance Chrome, Edge, and Firefox.</p> <p>Browsers that support using a proxy server for browser automation:</p> Chrome Edge Firefox Safari Internet Explorer <p>When configuring the proxy, use either a string with the IP address and port number, or the <code>ProxySettings</code> class:</p> Settings Type Chrome Edge Firefox <code>str</code> with IP address, e.g. <code>http://127.0.0.1:8080</code> <code>ProxySettings</code>","tags":["Tutorial","Settings","Proxy"]},{"location":"settings/timeout-strategy/","title":"What Is a Timeout Strategy?","text":"<p>How long should the browser wait and keep retrying to interact with an element: 5, 10, or 20 seconds? And what happens when a function times out: Should the browser stop or continue its operation?</p> <p>Learn how to set the best timeout strategy for the needs and context of your automation workflow.</p>","tags":["Tutorial","Settings","Performance"]},{"location":"settings/timeout-strategy/#settings-and-strategy","title":"Settings and Strategy","text":"<p><code>TimeoutSettings</code> defines the <code>TimeoutStrategy</code> together with a general timeout in seconds. For example:</p> Python<pre><code>from browserist import TimeoutSettings, TimeoutStrategy\n\ntimeout_settings = TimeoutSettings(\n    strategy=TimeoutStrategy.CONTINUE,\n    seconds=10)\n</code></pre> <p>Tip</p> <p>The general timeout can often be shortened or lengthened by the function-specific timeout. It's recommended to keep the default of 5 seconds or to set the general timeout to a value that's sufficient for most functions \u2013 most methods run faster anyway \u2013 and then override it for specific functions.</p>","tags":["Tutorial","Settings","Performance"]},{"location":"settings/timeout-strategy/#options-for-timeoutsettings","title":"Options for <code>TimeoutSettings</code>","text":"Parameter Description <code>seconds</code> General timeout and default is <code>5</code> seconds. Note that a function-specific timeout overrides this. <code>strategy</code> <code>TimeoutStrategy.STOP</code> (default) or <code>TimeoutStrategy.CONTINUE</code>.","tags":["Tutorial","Settings","Performance"]},{"location":"settings/timeout-strategy/#options-for-timeoutstrategy","title":"Options for <code>TimeoutStrategy</code>","text":"Option Description <code>TimeoutStrategy.STOP</code> Default. Fail fast upon timeout and raise errors. <code>TimeoutStrategy.CONTINUE</code> Continue despite timeouts and most errors (syntax errors excluded).","tags":["Tutorial","Settings","Performance"]},{"location":"settings/timeout-strategy/#example","title":"Example","text":"<p>How to define a general strategy and timeout of 10 seconds for all functions, which we then override to 5 seconds for a specific function:</p> Python<pre><code>from browserist import Browser, BrowserSettings, TimeoutSettings, TimeoutStrategy\n\ntimeout_settings = TimeoutSettings(\n    strategy=TimeoutStrategy.CONTINUE,\n    seconds=10)\n\nsettings = BrowserSettings(timeout=timeout_settings)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    headline = browser.get.text(\"//h1\", timeout=5)\n    print(headline)\n</code></pre>","tags":["Tutorial","Settings","Performance"]},{"location":"settings/user-agent/","title":"What Is a User Agent?","text":"<p>Browsers identify themselves to websites with a <code>User-Agent</code> string in the request header. The user agent string contains information about:</p> <ul> <li>Browser type</li> <li>Browser version</li> <li>Operating system and platform</li> </ul> <p>Websites use this information to provide the best possible user experience, or sometimes to block certain features or identify automated bots so that they can be excluded from analytics.</p> <p>User agents come in many forms and can look like this:</p> <pre><code>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0\n</code></pre> <p>Learn more about user agents and what they can do.</p>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#how-to-set-user-agent","title":"How to Set User Agent","text":"<p>Note</p> <p>Few browsers allow you to set the <code>User-Agent</code> on the fly, but most allow you to set it at the start of a session. See the table of supported browsers below for details.</p>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#for-a-session","title":"For a Session","text":"<p>How to set the user agent in the beginning of a session:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(user_agent=\"MyUserAgent\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    user_agent = browser.user_agent.get()\n    print(user_agent)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>MyUserAgent\n</code></pre>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#on-the-fly","title":"On the Fly","text":"","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#basic-usage","title":"Basic Usage:","text":"Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.user_agent.set(\"MyUserAgent\")\n    browser.open.url(\"https://example.com\")\n    user_agent = browser.user_agent.get()\n    print(user_agent)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>MyUserAgent\n</code></pre>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#append-to-existing-user-agent","title":"Append to Existing User Agent:","text":"<p>If you want to identify your sessions, for instance to exclude bot traffic from your analytics, you can append the existing user agent with a custom value. Imagine that a browser's default user agent is:</p> <pre><code>Mozilla/5.0\n</code></pre> <p>Let's add a custom value to it:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    user_agent = browser.user_agent.get()\n    user_agent += \" MyUserAgent\"\n    browser.user_agent.set(user_agent)\n    browser.open.url(\"https://example.com\")\n    new_user_agent = browser.user_agent.get()\n    print(new_user_agent)\n</code></pre> <p>How the user agent now appears in the terminal:</p> <pre><code>Mozilla/5.0 MyUserAgent\n</code></pre>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#supported-browsers","title":"Supported Browsers","text":"<p>Most browsers support setting the <code>User-Agent</code> at the start of a session, but only a few allow you to set it on the fly:</p> Case Chrome Edge Firefox Safari Internet Explorer For a session On the fly","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#how-to-randomize-user-agent","title":"How to Randomize User Agent","text":"<p>As example for advanced usage, you can randomize the user agent per session or on the fly.</p>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#per-session","title":"Per Session","text":"<p>Example:</p> Python<pre><code>import random\nfrom browserist import Browser, BrowserSettings\n\nUSER_AGENTS = [\n    \"MyUserAgent1\",\n    \"MyUserAgent2\",\n    \"MyUserAgent3\",\n]\n\nuser_agent = random.choice(USER_AGENTS)\nsettings = BrowserSettings(user_agent=user_agent)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings"]},{"location":"settings/user-agent/#on-the-fly_1","title":"On the Fly","text":"<p>Example:</p> Python<pre><code>import random\nfrom browserist import Browser\n\nUSER_AGENTS = [\n    \"MyUserAgent1\",\n    \"MyUserAgent2\",\n    \"MyUserAgent3\",\n]\n\nwith Browser() as browser:\n    user_agent = random.choice(USER_AGENTS)\n    browser.user_agent.set(user_agent)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Settings"]},{"location":"settings/viewport/","title":"What Is a Viewport Size?","text":"<p>The viewport is the inner size of the browser window that displays the web page. Based on screen size and resolution \u2013 from desktop monitors to tablets and mobile phones \u2013 the viewport may be smaller than the actual web page and require scrolling to view the entire page.</p> <p>If you want to change the outer size, check the window size section.</p>","tags":["Tutorial","Settings","Viewport","Headless"]},{"location":"settings/viewport/#emulate-common-devices","title":"Emulate Common Devices","text":"<p>You can set the viewport to emulate common device sizes (e.g. various popular mobile phones or tablets). Example:</p> Python<pre><code>from browserist import Browser, BrowserSettings, common_devices\n\niphone_se = common_devices.Apple.IPHONE_SE\n\nsettings = BrowserSettings(\n    headless=True,\n    viewport=iphone_se)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>And you can later change the viewport to another device:</p> <pre><code>    ipad_air_2 = common_devices.Apple.IPAD_AIR_2\n    browser.viewport.set.size_by_device(ipad_air_2)\n</code></pre> <p>Tip</p> <p>It's recommended to run viewport emulations in headless mode since an open browser may have minimum or maximum dimensions, either limited by the browser window or the monitor.</p>","tags":["Tutorial","Settings","Viewport","Headless"]},{"location":"settings/viewport/#available-common-devices","title":"Available Common Devices","text":"<p>Browserist provides a pre-defined collection of common devices, covering tablets and mobile phones from the most popular manufacturers. Find more information in the reference documentation and source code:</p> <ul> <li>Apple</li> <li>Google</li> <li>Microsoft</li> <li>Samsung</li> </ul>","tags":["Tutorial","Settings","Viewport","Headless"]},{"location":"settings/viewport/#create-custom-devices","title":"Create Custom Devices","text":"<p>You can also define custom device sizes for viewport emulation with the <code>DeviceViewportSize</code> class. Example:</p> Python<pre><code>from browserist import Browser, BrowserSettings, DeviceViewportSize\n\ncustom_device_1 = DeviceViewportSize(540, 720)\ncustom_device_2 = DeviceViewportSize(912, 1368)\ncustom_device_3 = DeviceViewportSize(1024, 768)\n\nsettings = BrowserSettings(headless=True)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    for device in [custom_device_1, custom_device_2, custom_device_3]:\n        browser.viewport.set.size_by_device(device)\n        browser.screenshot.visible_portion()\n</code></pre>","tags":["Tutorial","Settings","Viewport","Headless"]},{"location":"settings/viewport/#custom-viewport-size","title":"Custom Viewport Size","text":"<p>Alternatively, simply specify the viewport size in pixels as tuple for width and height, e.g. <code>(1024, 768)</code>:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(\n    headless=True,\n    viewport=(1024, 768))\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>And you can change the viewport size later:</p> <pre><code>    browser.viewport.set.size(768, 1024)\n</code></pre>","tags":["Tutorial","Settings","Viewport","Headless"]},{"location":"settings/comparison-to-selenium/browser-types/","title":"How to Use Different Browser Types in Selenium and Browserist","text":"<p>If you need to automate web scraping or test flows with different browsers \u2013 for example, Firefox, Edge, or Chrome \u2013 Selenium and Browserist do it differently.</p>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#basic-usage","title":"Basic Usage","text":"","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#with-selenium","title":"With Selenium","text":"<p>If you want to use Chrome for browser automation with Selenium, here's how to initiate a session:</p> Python<pre><code>from selenium import webdriver\n\ndriver = webdriver.Chrome()\n\ndriver.get(\"https://example.com\")\ndriver.implicitly_wait(5)\ndriver.quit()\n</code></pre> <p>If you want to use Firefox, just replace <code>webdriver.Chrome()</code> with <code>webdriver.Firefox()</code>. Or use <code>webdriver.Edge()</code> for Edge.</p>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#with-browserist","title":"With Browserist","text":"<p>With Browserist, you can often achieve the same thing, but with less and more readable code:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.CHROME)\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>For Firefox or Edge, just replace <code>BrowserType.CHROME</code> with <code>BrowserType.FIREFOX</code> or <code>BrowserType.EDGE</code>, respectively.</p>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#multiple-browsers-in-a-session","title":"Multiple Browsers in a Session","text":"<p>Let's imagine another example where we want to do the same task, but with different browser types.</p>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#with-browserist_1","title":"With Browserist","text":"<p>Because the configuration class is separate from the web driver and consistent across browser types, Browserist often scales with less code compared to Selenium:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME)\nedge = BrowserSettings(type=BrowserType.EDGE)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n        # Do something\n</code></pre>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#with-selenium_1","title":"With Selenium","text":"<p>With Selenium, the above example could be rewritten like this:</p> Python<pre><code>from selenium import webdriver\n\ndef do_something(driver)\n    driver.get(\"https://example.com\")\n    driver.implicitly_wait(5)\n    # Do someting\n    driver.quit()\n\nchrome_driver = webdriver.Chrome()\ndo_something(chrome_driver)\n\nedge_driver = webdriver.Edge()\ndo_something(edge_driver)\n\nfirefox_driver = webdriver.Firefox()\ndo_something(firefox_driver)\n</code></pre>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/browser-types/#selenium-mixed-with-browserist","title":"Selenium Mixed with Browserist","text":"<p>Alternatively, you can mix Selenium with Browserist:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME)\nedge = BrowserSettings(type=BrowserType.EDGE)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        driver = browser.driver\n        driver.get(\"https://example.com\")\n        # Do something\n</code></pre>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox","Internet Explorer","Safari"]},{"location":"settings/comparison-to-selenium/disable-images/","title":"Disable Images in Selenium and Browserist","text":"","tags":["Selenium","Tutorial","Disable Images","Settings"]},{"location":"settings/comparison-to-selenium/disable-images/#why-disable-images-advantages-and-disadvantages","title":"Why Disable Images? Advantages and Disadvantages","text":"<p>If you want to scrape a website that loads images, you can gain a performance boost by disabling images.</p> <p>This is often done in combination with headless mode, since you can't see any graphics in a headless browser. On the other hand, the disadvantage is obviously that you can't observe what the browser is doing.</p>","tags":["Selenium","Tutorial","Disable Images","Settings"]},{"location":"settings/comparison-to-selenium/disable-images/#how-to-configure","title":"How to Configure","text":"","tags":["Selenium","Tutorial","Disable Images","Settings"]},{"location":"settings/comparison-to-selenium/disable-images/#selenium","title":"Selenium","text":"<p>With Selenium, each browser type has its own configuration:</p> ChromeEdgeFirefox Python<pre><code>from selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options as ChromeOptions\n\nchrome_options = ChromeOptions()\npreferences = {\n    \"profile.managed_default_content_settings.images\": 2,\n    \"profile.default_content_settings.images\": 2\n}\nchrome_options.add_experimental_option(\"prefs\", preferences)\n\ndriver = webdriver.Chrome(options=chrome_options)\n</code></pre> Python<pre><code>from selenium import webdriver\nfrom selenium.webdriver.edge.options import Options as EdgeOptions\n\nedge_options = EdgeOptions()\nedge_options.use_chromium = True\npreferences = {\n    \"profile.managed_default_content_settings.images\": 2,\n    \"profile.default_content_settings.images\": 2\n}\nedge_options.add_experimental_option(\"prefs\", preferences)\n\ndriver = webdriver.Edge(options=edge_options)\n</code></pre> Python<pre><code>from selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\n\nfirefox_options = webdriver.FirefoxOptions()\nfirefox_options.set_preference(\"permissions.default.image\", 2)\nfirefox_options.set_preference(\"dom.ipc.plugins.enabled.libflashplayer.so\", \"false\")\n\ndriver = webdriver.Firefox(options=firefox_options)\n</code></pre>","tags":["Selenium","Tutorial","Disable Images","Settings"]},{"location":"settings/comparison-to-selenium/disable-images/#browserist","title":"Browserist","text":"<p>Or use Browserist where the configuration is the same for all browser types \u2013\u00a0less hassle as the configuration of Selenium is automatically handled in the background. Simply set <code>disable_images=True</code> in the <code>BrowserSettings</code> class:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome = BrowserSettings(type=BrowserType.CHROME, disable_images=True)\nedge = BrowserSettings(type=BrowserType.EDGE, disable_images=True)\nfirefox = BrowserSettings(type=BrowserType.FIREFOX, disable_images=True)\n\nfor settings in [chrome, edge, firefox]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n        browser.wait.seconds(5)\n</code></pre>","tags":["Selenium","Tutorial","Disable Images","Settings"]},{"location":"settings/comparison-to-selenium/disable-images/#supported-browsers","title":"Supported Browsers","text":"<p>Note</p> <p>Not all browsers support disabling of images well: Both Safari and Internet Explorer requires us to update global settings in the operating system that may impact how these browsers behave outside Browserist.</p> <p>Browsers that support disabling of images:</p> Chrome Edge Firefox Safari Internet Explorer","tags":["Selenium","Tutorial","Disable Images","Settings"]},{"location":"settings/comparison-to-selenium/headless-mode/","title":"Headless Mode in Selenium and Browserist","text":"","tags":["Selenium","Tutorial","Headless","Settings"]},{"location":"settings/comparison-to-selenium/headless-mode/#why-headless-mode-advantages-and-disadvantages","title":"Why Headless Mode? Advantages and Disadvantages","text":"<p>When you want to run an automated browser in the background while doing something else, you can gain a performance boost by running the browser in headless mode.</p> <p>This is often done in combination with disabling images, since you can't see any graphics in a headless browser. On the other hand, the disadvantage is obviously that you can't observe what the browser is doing.</p>","tags":["Selenium","Tutorial","Headless","Settings"]},{"location":"settings/comparison-to-selenium/headless-mode/#how-to-configure","title":"How to Configure","text":"","tags":["Selenium","Tutorial","Headless","Settings"]},{"location":"settings/comparison-to-selenium/headless-mode/#selenium","title":"Selenium","text":"<p>With Selenium, each browser type has its own configuration:</p> ChromeEdgeFirefox Python<pre><code>from selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options as ChromeOptions\n\nchrome_options = ChromeOptions()\nchrome_options.add_argument(\"--headless\")\n\ndriver = webdriver.Chrome(options=chrome_options)\n</code></pre> Python<pre><code>from selenium import webdriver\nfrom selenium.webdriver.edge.options import Options as EdgeOptions\n\nedge_options = EdgeOptions()\nedge_options.use_chromium = True\nedge_options.add_argument(\"headless\")\n\ndriver = webdriver.Edge(options=edge_options)\n</code></pre> Python<pre><code>from selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options as FirefoxOptions\n\nfirefox_options = webdriver.FirefoxOptions()\nfirefox_options.add_argument(\"--headless\")\nfirefox_options.add_argument(\"--disable-gpu\")\n\ndriver = webdriver.Firefox(options=firefox_options)\n</code></pre>","tags":["Selenium","Tutorial","Headless","Settings"]},{"location":"settings/comparison-to-selenium/headless-mode/#browserist","title":"Browserist","text":"<p>Or use Browserist where the configuration is the same for all browser types \u2013\u00a0less hassle as the configuration of Selenium is automatically handled in the background. Simply set <code>headless=True</code> in the <code>BrowserSettings</code> class:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nchrome_headless = BrowserSettings(type=BrowserType.CHROME, headless=True)\nedge_headless = BrowserSettings(type=BrowserType.EDGE, headless=True)\nfirefox_headless = BrowserSettings(type=BrowserType.FIREFOX, headless=True)\n\nfor settings in [chrome_headless, edge_headless, firefox_headless]:\n    with Browser(settings) as browser:\n        browser.open.url(\"https://example.com\")\n        browser.wait.seconds(5)\n</code></pre>","tags":["Selenium","Tutorial","Headless","Settings"]},{"location":"settings/comparison-to-selenium/headless-mode/#supported-browsers","title":"Supported Browsers","text":"<p>Note</p> <p>Not all browsers support headless mode, for instance Safari and Internet Explorer.</p> <p>Browsers that support headless mode:</p> Chrome Edge Firefox Safari Internet Explorer","tags":["Selenium","Tutorial","Headless","Settings"]},{"location":"settings/comparison-to-selenium/main-differences/","title":"Configuration Differences Between Selenium and Browserist","text":"<p>While Browserist is an extension to Selenium, they're configured differently. Browserist is made for users who value less code and more readable code, and so the syntax is different.</p> <p>You can find configuration examples for different use cases, both for beginners and advanced users :</p> <ul> <li>Browser types</li> <li>Headless mode</li> <li>Disable images</li> </ul>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox"]},{"location":"settings/comparison-to-selenium/main-differences/#how-to-use-seleniums-web-driver-from-browserist","title":"How to Use Selenium's Web Driver from Browserist","text":"<p>f you prefer to configure a session with Browserist, but use Selenium for other parts of the browser automation, it's possible to mix both frameworks. Example where Selenium's <code>driver</code> is highlighted:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(type=BrowserType.CHROME)\nwith Browser(settings) as browser:\n    driver = browser.driver\n    driver.get(\"https://example.com\")\n    driver.implicitly_wait(5)\n    browser.open.url(\"https://google.com\")\n    browser.wait.seconds(5)\n</code></pre>","tags":["Selenium","Tutorial","Settings","Browser Types","Chrome","Edge","Firefox"]},{"location":"user-guide/","title":"User Guide \ud83d\udc68\u200d\ud83d\udd27","text":"<p>Find tutorials, tips and tricks in this section. For more info about configuration options, go to the section for settings and browser types.</p>","tags":["Tutorial"]},{"location":"user-guide/#quick-links","title":"Quick Links","text":"","tags":["Tutorial"]},{"location":"user-guide/#general","title":"General","text":"<ul> <li>Navigation</li> <li>Working with multiple tabs</li> <li>Downloading files</li> <li>Taking screenshots</li> <li>Getting HTML source</li> </ul>","tags":["Tutorial"]},{"location":"user-guide/#combo-methods","title":"Combo Methods","text":"<ul> <li>Cookie banner</li> <li>Log in</li> <li>Search</li> </ul> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial"]},{"location":"user-guide/context-manager/","title":"Context Manager","text":"","tags":["Tutorial"]},{"location":"user-guide/context-manager/#how-to-automatically-close-the-browser-session","title":"How to Automatically Close the Browser Session","text":"<p>Instead of manually quitting the browser with <code>browser.quit()</code>, it's recommend to use the context manager and <code>with</code> statements.</p>","tags":["Tutorial"]},{"location":"user-guide/context-manager/#advantages","title":"Advantages","text":"<p>Apart from less code and more readable code, the built-in context manager automatically closes the browser (so you don't forget it) when the automation task is done or if an error occurs.</p> <p>As an added benefit, the <code>with</code> statement prevents you from having unused browser windows lingering in the background.</p>","tags":["Tutorial"]},{"location":"user-guide/context-manager/#examples","title":"Examples","text":"","tags":["Tutorial"]},{"location":"user-guide/context-manager/#with-context-manager","title":"With Context Manager","text":"<p>It's recommended to do this where the <code>with</code> statement implicitly closes the browser when the indented block ends:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/context-manager/#without-context-manager","title":"Without Context Manager","text":"<p>And not recommended to do this:</p> Python<pre><code>from browserist import Browser\n\nbrowser = Browser()\nbrowser.open.url(\"https://example.com\")\nbrowser.quit()\n</code></pre> <p>Warning</p> <p>If you forget to close a browser instance with <code>browser.quit()</code> and when you don't use the <code>with</code> context manager, you have to close the browser manually. If not closed manually, one or more unused browser windows may remain inactive in the background and this takes up resources.</p>","tags":["Tutorial"]},{"location":"user-guide/download-files/","title":"How to Download Files","text":"","tags":["Tutorial"]},{"location":"user-guide/download-files/#best-practice-for-browser-automation","title":"Best Practice for Browser Automation","text":"<p>Instead of using the <code>click.button()</code> method to download files, you get more control with the dedicated <code>click.download()</code> and <code>click.download_and_get_file_path()</code> methods.</p> <p>Read on to learn how to automate file downloads in an easy and stable way.</p>","tags":["Tutorial"]},{"location":"user-guide/download-files/#destination-directory-for-downloads","title":"Destination Directory for Downloads","text":"<p>First, make sure you know where files are downloaded to. The default is the user's <code>Downloads</code> folder, or you can set a custom download directory in the <code>download_dir</code> parameter of <code>BrowserSettings</code>.</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(download_dir=\"/my/downloads\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.download(\"//xpath/to/button\")\n</code></pre> <p>Note</p> <p>It's only possible to set a single download directory for each browser session, not different destinations for different downloads.</p> <p>Avoid that multiple browser instances have access to the same download directory. As Browserist monitors the download directory for file changes, it may cause unexpected behaviour if multiple files are downloaded to the same directory at the same time.</p>","tags":["Tutorial"]},{"location":"user-guide/download-files/#methods","title":"Methods","text":"<p>There are two main methods you can use to download files:</p> Method Description <code>click.download()</code> Download file as background task or await completion <code>click.download_and_get_file_path()</code> Download file and return its path after completion","tags":["Tutorial"]},{"location":"user-guide/download-files/#simple-download","title":"Simple Download","text":"<p>Use the <code>click.download()</code> method for simple file downloads, either as a background task or await the download to complete. Options:</p> Parameters Background Task Advantage Disadvantage <code>\"//xpath/to/button\"</code> Faster If the browser closes during a download, the download may be aborted or left incomplete ...<code>await_download=True</code> Stable download as we wait for download to complete This will attempt to guess the file name, which may be slower ...<code>expected_file_name=\"file.zip\"</code> Stable download as we wait for download to complete Slower than background task, yet faster if you know the file name <p>Examples in context:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.download(\"//xpath/to/button\")\n    browser.click.download(\"//xpath/to/button\", await_download=True)\n    browser.click.download(\"//xpath/to/button\", await_download=True, expected_file_name=\"file.zip\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/download-files/#get-the-path-to-the-downloaded-file","title":"Get the Path to the Downloaded File","text":"<p>Use the <code>click.download_and_get_file_path()</code> method to download a file and get its file path once the download is complete. As downloads are handled automatically by the browser, this is useful if you don't know the file name beforehand. For example:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    file_path = browser.click.download_and_get_file_path(\"//xpath/to/button\")\n</code></pre> <p>The return type is <code>Path</code> from the standard <code>pathlib</code> library, and so you can easily get the file name or absolute path.</p> <p>For instance, this will output the file name <code>file.zip</code> in the terminal:</p> <pre><code>    print(file_path.name)\n</code></pre> <p>And this will output the absolute file path <code>/home/user/downloads/file.zip</code> in the terminal:</p> <pre><code>    print(file_path.absolute())\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/html-source/","title":"How to Get the HTML Source","text":"<p>Sometimes it's useful to get the HTML source of a page or specific elements. With Browserist, that's easily done.</p> <p>For the following examples, let's imagine the following boilerplate page source:</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Example.com&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/html-source/#page-source","title":"Page Source","text":"<p>How to get all the HTML source of a page:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    page_source = browser.get.html.page_source()\n    print(page_source)\n</code></pre> <p>This will print the full page source as above:</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    ...\n&lt;/html&gt;\n</code></pre> <p>How to Get the HTML from Single-Page Applications (SPAs) or Lazy Loading Pages</p> <p>When working with single-page applications (SPA) that dynamically or lazily load the content of a page, it's notoriously difficult to get the page source. The source simply changes depending on its state. Instead, you can get the HTML of a particular state. For example:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.scroll.page.to_end()\n    html_of_current_state = browser.get.html.element_outer(\"//html\")\n    print(html_of_current_state)\n</code></pre> <p>We use <code>browser.scroll.page.to_end()</code> to ensure that all loading of all page content is triggered, which can be replaced by other interactions like clicking a button or selecting an item in a drop-down menu.</p> <p>And instead of <code>browser.get.html.page_source()</code>, we use <code>browser.get.html.element_outer(\"//html\")</code> to get the HTML of the current state.</p>","tags":["Tutorial"]},{"location":"user-guide/html-source/#source-by-element","title":"Source by Element","text":"","tags":["Tutorial"]},{"location":"user-guide/html-source/#inner-html","title":"Inner HTML","text":"<p>How to get the inner HTML source of an element:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    inner_html = browser.get.html.element_inner(\"//body\")\n    print(inner_html)\n</code></pre> <p>This will give you the inner HTML of the <code>&lt;body&gt;</code> tag:</p> HTML<pre><code>&lt;h1&gt;Welcome&lt;/h1&gt;\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/html-source/#outer-html","title":"Outer HTML","text":"<p>How to get the outer HTML source of an element:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    outer_html = browser.get.html.element_outer(\"//body\")\n    print(outer_html)\n</code></pre> <p>This will give you the outer HTML of the <code>&lt;body&gt;</code> tag:</p> HTML<pre><code>&lt;body&gt;\n    &lt;h1&gt;Welcome&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;/body&gt;\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/screenshots/","title":"How to Take Screenshots","text":"","tags":["Tutorial"]},{"location":"user-guide/screenshots/#best-practice-for-browser-automation","title":"Best Practice for Browser Automation","text":"<p>Screenshots are useful for capturing and documenting the visual appearance of a web page. By automating the process, we can save time and ensure consistency when capturing screenshots across browsers and devices.</p>","tags":["Tutorial"]},{"location":"user-guide/screenshots/#settings","title":"Settings","text":"","tags":["Tutorial"]},{"location":"user-guide/screenshots/#global-destination","title":"Global Destination","text":"<p>You can set the directory where the screenshots are saved by customizing the <code>screenshot_dir</code> parameter of the <code>BrowserSettings</code>. For example:</p> Python<pre><code>from browserist import Browser, BrowserSettings\n\nsettings = BrowserSettings(screenshot_dir=\"/screenshots/folder\")\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.visible_portion()\n</code></pre> <p>Info</p> <p>By default, screenshots are saved in the <code>Downloads</code> folder of the user.</p>","tags":["Tutorial"]},{"location":"user-guide/screenshots/#override-destination-locally","title":"Override Destination Locally","text":"<p>Or you can override the global settings for a specific screenshot each time you take a screenshot. Simply add the <code>destination_dir</code> parameter to the screenshot method:</p> Visible PortionComplete PageElement <pre><code>browser.screenshot.visible_portion(destination_dir=\"/screenshots/folder\")\n</code></pre> <pre><code>browser.screenshot.complete_page(destination_dir=\"/screenshots/folder\")\n</code></pre> <pre><code>browser.screenshot.element(\"//xpath/to/element\", destination_dir=\"/screenshots/folder\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/screenshots/#custom-file-naming","title":"Custom File Naming","text":"<p>You can customize the name of the screenshot file each time you take a screenshot. For example:</p> Visible PortionComplete PageElement <pre><code>browser.screenshot.visible_portion(\"image.png\")\n</code></pre> <pre><code>browser.screenshot.complete_page(\"image.png\")\n</code></pre> <pre><code>browser.screenshot.element(\"//xpath/to/element\", \"image.png\")\n</code></pre> <p>Or combine custom file naming with a custom destination directory:</p> Visible PortionComplete PageElement <pre><code>browser.screenshot.visible_portion(\"image.png\", \"/screenshots/folder\")\n</code></pre> <pre><code>browser.screenshot.complete_page(\"image.png\", \"/screenshots/folder\")\n</code></pre> <pre><code>browser.screenshot.element(\"//xpath/to/element\", \"image.png\", \"/screenshots/folder\")\n</code></pre> <p>Note</p> <p>When setting a custom file name, screenshots should always be saved as a PNG file with a <code>.png</code> extension.</p>","tags":["Tutorial"]},{"location":"user-guide/screenshots/#different-types-of-screenshots","title":"Different Types of Screenshots","text":"","tags":["Tutorial"]},{"location":"user-guide/screenshots/#visible-portion","title":"Visible Portion","text":"<p>How to capture the visible portion of a web page, i.e. the current viewport:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.visible_portion()\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/screenshots/#element","title":"Element","text":"<p>You can also take screenshots of a specific element on a web page:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.element(\"//xpath/to/element\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/screenshots/#complete-page","title":"Complete Page","text":"<p>To capture the entire page, including parts that are not currently visible in the viewport, Browserist scrolls the page programmatically and takes multiple screenshots, which are then stitched together to create a full-page screenshot:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.complete_page()\n</code></pre> <p>Firefox Is Recommended for Complete Page Screenshots</p> <p>Firefox is recommended browser for complete page screenshots as it executes this in one go. Other browsers can't capture the entire page at once, and so we need to merge screenshots portion by portions \u2013 and this is obviously much slower. For example:</p> Python<pre><code>from browserist import Browser, BrowserSettings, BrowserType\n\nsettings = BrowserSettings(browser_type=BrowserType.FIREFOX)\n\nwith Browser(settings) as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.complete_page()\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/combo-methods/cookie-banner/","title":"How to Handle Cookie Banners","text":"<p>As you often need to accept cookie consent banners before you can scrape web pages, Browserist has a standardised method to do this at scale. The <code>CookieBannerSettings</code> class enables you to easily share the same settings across different browsers or scripts.</p> <p>View all options in the reference documentation.</p>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/cookie-banner/#examples","title":"Examples","text":"","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/cookie-banner/#basic-usage","title":"Basic Usage","text":"<p>Gettning started:</p> Python<pre><code>from browserist import Browser, CookieBannerSettings\n\naccept_cookies = CookieBannerSettings(\n    url=\"https://example.com\",\n    has_loaded_xpath=\"//xpath/to/cookie_banner\",\n    button_xpath=\"//xpath/to/accept_button\")\n\nwith Browser() as browser:\n    browser.combo.cookie_banner(accept_cookies)\n    browser.open.url(\"https://example.com/some_page\")\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/cookie-banner/#conditional-flows","title":"Conditional Flows","text":"<p>Sometimes it's useful to let a flow be dependent of succesfull handling of the cookie banner. This is possible by setting <code>return_bool</code> to <code>True</code> as parameter in the settings class and using a conditional <code>if</code> statement in combination with the cookie banner combo. For example:</p> Python<pre><code>from browserist import Browser, CookieBannerSettings\n\naccept_cookies = CookieBannerSettings(\n    url=\"https://example.com\",\n    has_loaded_xpath=\"//xpath/to/cookie_banner\",\n    button_xpath=\"//xpath/to/accept_button\",\n    return_bool=True)\n\nwith Browser() as browser:\n    if browser.combo.cookie_banner(accept_cookies):\n        browser.open.url(\"https://example.com/some_page\")\n        browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/cookie-banner/#testing-purposes","title":"Testing Purposes","text":"<p>Let's expand the examples and imagine that a website can personalise the content when returning users accept cookies. We want to test whether it's working as expected. For instance:</p> Python<pre><code>from browserist import Browser, CookieBannerSettings\n\naccept_cookies = CookieBannerSettings(\n    url=\"https://example.com\",\n    has_loaded_xpath=\"//xpath/to/cookie_banner\",\n    button_xpath=\"//xpath/to/accept_button\")\n\ndecline_cookies = CookieBannerSettings(\n    url=\"https://example.com\",\n    has_loaded_xpath=\"//xpath/to/cookie_banner\",\n    button_xpath=\"//xpath/to/decline_button\")\n\nwith Browser() as browser:\n    browser.combo.cookie_banner(accept_cookies)\n    assert browser.get.text(\"//xpath/to/headline\") == \"Welcome back!\"\n\nwith Browser() as browser:\n    browser.combo.cookie_banner(decline_cookies)\n    assert browser.get.text(\"//xpath/to/headline\") == \"Hi there!\"\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/log-in/","title":"How to Handle Logins and User Profiles","text":"<p>Imagine that you have to automate tests of a web application that requires you to log in. Sometimes you want to ensure that multiple user roles can log in and do certains tasks.</p> <p>You can use the log in combo method and settings classes <code>LoginForm1Step</code>, <code>LoginForm2Steps</code>, and <code>LoginCredentials</code> to do this at scale.</p>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/log-in/#one-or-two-steps-to-log-in","title":"One or Two Steps to Log In","text":"<p>Most websites process login in either one or two steps. This often means that the username and password fields are either on the same page or on separate pages.</p> <p>Use <code>LoginForm1Step</code> when username and password are prompted on the same page.</p> <p>Use <code>LoginForm2Steps</code> when username is prompted first, and then the option to input password appears later on the same or a separate page. The two-step variation is often to verify whether a user exists or not before password can be entered (or should be redirected to a registration page).</p> <p>As <code>LoginCredentials</code> is independent of the login form, it works with both options.</p> Class Step 1 Step 2 Post Login <code>LoginForm1Step</code> Input username and password. Then click submit. \u2013 Multiple options to await confirmation or redirect. <code>LoginForm2Steps</code> Input username and click submit. Input password and click submit. Multiple options to await confirmation or redirect.","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/log-in/#examples","title":"Examples","text":"","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/log-in/#basic-usage","title":"Basic Usage","text":"<p>Getting started:</p> Python<pre><code>from browserist import Browser, LoginForm1Step, LoginCredentials\n\nlogin_credentials = LoginCredentials(\n    username=\"some_username\",\n    password=\"some_password\")\n\nlogin_form = LoginForm1Step(\n    url=\"https://example.com/login\",\n    username_input_xpath=\"//xpath/to/username_field\",\n    password_input_xpath=\"//xpath/to/password_field\",\n    submit_button_xpath=\"//xpath/to/login_button\")\n\nwith Browser() as browser:\n    browser.combo.log_in(login_credentials, login_form)\n    browser.open.url(\"https://example.com/some_page\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/log-in/#conditional-flows","title":"Conditional Flows","text":"<p>Sometimes it's useful to let a flow be dependent of succesfull handling of the login form. This is possible by setting <code>return_bool</code> to <code>True</code> as parameter in the settings class and using a conditional <code>if</code> statement in combination with the login combo. For example:</p> Python<pre><code>from browserist import Browser, LoginForm1Step, LoginCredentials\n\nlogin_credentials = LoginCredentials(\n    username=\"some_username\",\n    password=\"some_password\")\n\nlogin_form = LoginForm1Step(\n    url=\"https://example.com/login\",\n    username_input_xpath=\"//xpath/to/username_field\",\n    password_input_xpath=\"//xpath/to/password_field\",\n    submit_button_xpath=\"//xpath/to/login_button\",\n    post_login_url_contains=\"https://example.com/successfull_logged_in_page\",\n    post_login_element_xpath=\"//xpath/to/successfull_logged_in_element\",\n    return_bool=True)\n\nwith Browser() as browser:\n    if browser.combo.log_in(login_credentials, login_form):\n        browser.open.url(\"https://example.com/some_page\")\n        browser.click.button(\"//xpath/to/button\")\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/log-in/#testing-purposes","title":"Testing Purposes","text":"<p>Let's expand the example and imagine that a website can be personalised based on which user role is signed in. For instance, we want to ensure that only the admin role has visible access to an administration module.</p> <p>Firstly, let's define the settings classes:</p> Python<pre><code>from browserist import Browser, LoginForm1Step, LoginCredentials\n\nuser_admin = LoginCredentials(\n    username=\"admin\",\n    password=\"admin_password\")\n\nuser_author = LoginCredentials(\n    username=\"author\",\n    password=\"author_password\")\n\nlogin_form = LoginForm1Step(\n    url=\"https://example.com/login\",\n    username_input_xpath=\"//xpath/to/username_field\",\n    password_input_xpath=\"//xpath/to/password_field\",\n    submit_button_xpath=\"//xpath/to/login_button\")\n</code></pre> <p>After the the settings classes are defined, let's attempt to log both users in:</p> <pre><code>for user in [user_admin, user_author]:\n    with Browser() as browser:\n        browser.combo.log_in(user, login_form)\n        assert browser.check_if.does_exist(\"//xpath/to/validation_element\") is True\n</code></pre> <p>Hereafter, let's imagine that we want ensure that only the admin role has visible access to an administration module:</p> <pre><code>        browser.open.url(\"https://example.com/backoffice\")\n        admin_module_display_status = browser.check_if.is_displayed(\"//xpath/to/admin_module\")\n        if user is user_admin:\n            assert admin_module_display_status is True\n        else:\n            assert admin_module_display_status is False\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/search/","title":"How to Handle Searches","text":"<p>Imagine that you have a list of items and you want to search through them. You can use the search combo method and <code>SearchSettings</code> class to do this at scale.</p> <p>View all options in the reference documentation.</p>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/combo-methods/search/#examples","title":"Examples","text":"<p>Basic usage:</p> Python<pre><code>from browserist import Browser, SearchSettings\n\nsearch_settings = SearchSettings(\n    url=\"https://google.com\",\n    input_xpath =\"//xpath/to/input_field\",\n    button_xpath=\"//xpath/to/search_button\")\n\nwith Browser() as browser:\n    browser.combo.search(\"some search term\", search_settings)\n    assert browser.tool.count_elements(\"//xpath/to/search_result_elements\") &gt; 0\n</code></pre> <p>Let's imagine that we want to test whether a search engine has fuzzy search enabled, For instance, this could mean that American and British English yield the same results for, respectively, \"color\" and \"colour\" as search term:</p> Python<pre><code>from browserist import Browser, SearchSettings\n\nsearch_settings = SearchSettings(\n    url=\"https://google.com\",\n    input_xpath=\"//xpath/to/input_field\",\n    button_xpath=\"//xpath/to/search_button\")\n\nwith Browser() as browser:\n    browser.combo.search(\"color\", search_settings)\n    color_results = browser.tool.count_elements(\"//xpath/to/search_result_elements\")\n    browser.combo.search(\"colour\", search_settings)\n    colour_results = browser.tool.count_elements(\"//xpath/to/search_result_elements\")\n    assert color_results == colour_results\n</code></pre>","tags":["Tutorial","Settings","Combo"]},{"location":"user-guide/navigation/basics/","title":"How to Automate Basic Browser Navigation","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/basics/#standard-buttons","title":"Standard Buttons","text":"<p>Similar to Selenium, use these simple commands to automate the browser:</p> Action Code Description Forward <code>browser.forward()</code> Press the browser's back button Back <code>browser.back()</code> Press the browser's forward button Refresh <code>browser.refresh()</code> Reload the current page Quit <code>browser.quit()</code> Close the browser","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/basics/#examples","title":"Examples","text":"Python<pre><code>from browserist import Browser\n\nbrowser = Browser()\nbrowser.open.url(\"https://example.com\")\nbrowser.open.url(\"https://google.com\")\nbrowser.back()  # Go back to previous page Example.com\nbrowser.forward()  # Return to Google.com\nbrowser.quit()\n</code></pre> <p>Tip</p> <p>Instead of manually quitting the browser with <code>browser.quit()</code>, it's recommend to use the context manager and <code>with</code> statements. The example above could then be refactored to:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.open.url(\"https://google.com\")\n    browser.back()  # Go back to previous page Example.com\n    browser.forward()  # Return to Google.com\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/iframes/","title":"How to Interact with Iframes","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/iframes/#what-is-an-iframe","title":"What Is an Iframe?","text":"<p>An iframe, also known as an inline frame, is an element that loads another HTML page within the document. It essentially places another web page within the parent page. Iframes are commonly used for advertising, embedded video, web analytics, and interactive content.</p> <p>Because iframes are separate documents, they have their own window object. This means that you must navigate to an iframe separately from the parent page and use the iframe root to interact with its content.</p>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/iframes/#switching-between-iframes-and-web-pages","title":"Switching Between Iframes and Web Pages","text":"<p>Basic navigation between iframes and web pages is easy with Browserist. You can use this method to switch to an iframe...</p> <pre><code>browser.iframe.switch_to(\"//xpath/to/iframe\")\n</code></pre> <p>... and since Browserist remembers the parent web page, it's easy to go back to the original page using this method:</p> <pre><code>browser.iframe.switch_to_original_page()\n</code></pre> <p>Example in context:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.iframe.switch_to(\"//xpath/to/iframe\")\n    element_text = browser.get.text(\"//xpath/to/iframe/element\")\n    print(element_text)\n    browser.iframe.switch_to_original_page()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/iframes/#how-to-query-elements-inside-an-iframe","title":"How to Query Elements Inside an Iframe","text":"<p>Let's imagine a simple web page with an iframe containing a form:</p> Parent Page<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Parent Page&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe src=\"./iframe-with-form.html\"&gt;&lt;/iframe&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Iframe with Form<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Iframe with Form&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input type=\"text\" name=\"username\" id=\"username\"&gt;\n            &lt;input type=\"password\" name=\"password\" id=\"password\"&gt;\n            &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>What Not to Do</p> <p>To interact with the form and button inside the iframe, you can't do anything like this:</p> <pre><code>browser.click.button(\"//iframe//button[type='submit']\")\n</code></pre> <p>The correct way to interact with iframes is to first switch to the iframe:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.iframe.switch_to(\"//iframe[1]\")\n</code></pre> <p>And then query the elements inside the iframe, using the iframe as the root:</p> Python<pre><code>    browser.input.value(\"//*[@id='username']\", \"admin@example.com\")\n    browser.input.value(\"//*[@id='password']\", \"password123\")\n    browser.click.button(\"//button[type='submit']\")\n    browser.iframe.switch_to_original_page()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/","title":"How to Automate Scrolling","text":"<p>Browserist provides a simple way to scroll a web page \u2013\u00a0both up and down, to specific elements or sideways. This can be useful when you need to interact with elements that are not immediately visible or when you want to take screenshots of content that is only loaded when you scroll.</p> <p>Note</p> <p>Similar to scrolling on a touch screen or mouse, you can only scroll down if you're not already at the bottom of the page, and you can only scroll up if you're not already at the top of the page. Or you can't scroll up exactly 50 pixels if you're already 20 pixels from the top of the page \u2013 instead you scroll up 20 pixels. Keep this in mind when trying to replicate the examples below.</p>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#scrolling-up-and-down","title":"Scrolling Up and Down","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#by-disstance","title":"By Disstance","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#pixels","title":"Pixels","text":"<p>How to scroll down by a number of pixels, relative to the current position:</p> <pre><code>browser.scroll.down_by(100)\n</code></pre> <p>How to scroll up by a number of pixels, relative to the current position:</p> <pre><code>browser.scroll.up_by(50)\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#pages","title":"Pages","text":"<p>How to scroll a page down, relative to the current position:</p> <pre><code>browser.scroll.page.down()\n</code></pre> <p>How to scroll a page up, relative to the current position:</p> <pre><code>browser.scroll.page.up()\n</code></pre> <p>It's also possible to scroll up or down by a number of pages:</p> <pre><code>browser.scroll.page.down(2)\n</code></pre> <pre><code>browser.scroll.page.up(3)\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#example-with-mixed-methods","title":"Example with Mixed Methods","text":"<p>Let's imagine that we want to take screenshots of a page that requires scrolling to load all the content. We can scroll down by a page and then a little up to capture screenshot partials of the entire page:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.screenshot.visible_portion()\n    while not browser.scroll.check_if.is_end_of_page():\n        browser.scroll.page.down()\n        browser.scroll.up_by(5)\n        browser.screenshot.visible_portion()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#to-specific-element","title":"To Specific Element","text":"<p>How to scroll down or up to make a specific element visible in the viewport:</p> <pre><code>browser.scroll.into_view(\"//xpath/to/element\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#to-absolute-position","title":"To Absolute Position","text":"<p>How to scroll to the end of the page:</p> <pre><code>browser.scroll.page.to_end()\n</code></pre> <p>How to scroll to the top of the page:</p> <pre><code>browser.scroll.page.to_top()\n</code></pre> <p>How to scroll to an absolute position on the page with <code>x</code> and <code>y</code> coordinates, where <code>y=100</code> is the vertical position:</p> <pre><code>browser.scroll.to_position(x=0, y=100)\n</code></pre> <p>Or simply:</p> <pre><code>browser.scroll.to_position(0, 100)\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#scrolling-sideways-left-and-right","title":"Scrolling Sideways Left and Right","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#by-disstance_1","title":"By Disstance","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#pixels_1","title":"Pixels","text":"<p>How to scroll right by a number of pixels, relative to the current position:</p> <pre><code>browser.scroll.right_by(20)\n</code></pre> <p>How to scroll left by a number of pixels, relative to the current position:</p> <pre><code>browser.scroll.left_by(40)\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#to-absolute-position_1","title":"To Absolute Position","text":"<p>How to scroll to an absolute position on the page with <code>x</code> and <code>y</code> coordinates, where <code>x=100</code> is the horizontal position:</p> <pre><code>browser.scroll.to_position(x=100, y=0)\n</code></pre> <p>Or simply:</p> <pre><code>browser.scroll.to_position(100, 0)\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#example","title":"Example","text":"<p>Let's imagine that we want to ensure that we can't scroll sideways on a page. We try to scroll a little right and then a little left to ensure that the page is locked in place:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.scroll.page.to_top()\n    x, y = browser.scroll.get.position()\n    assert x == 0 and y == 0\n\n    browser.scroll.right_by(1)\n    x, _ = browser.scroll.get.position()\n    assert x == 0\n\n    browser.scroll.left_by(1)\n    x, _ = browser.scroll.get.position()\n    assert x == 0\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#conditional-scrolling","title":"Conditional Scrolling","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#how-to-check-if-scrolling-is-possible","title":"How to Check If Scrolling Is Possible","text":"<p>You can check if you're at the end or top of the page with these methods:</p> <pre><code>browser.scroll.check_if.is_end_of_page()\n</code></pre> <pre><code>browser.scroll.check_if.is_top_of_page()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#example_1","title":"Example","text":"<p>Example where we want take a screenshot of the footer of a page:</p> Python<pre><code>from browserist import Browser\n\nurls = [\"https://example.com\", \"https://google.com\", \"https://bing.com\"]\n\nwith Browser() as browser:\n    for url in urls:\n        browser.open.url(url)\n        if not browser.scroll.check_if.is_end_of_page():\n            browser.scroll.page.to_end()\n        browser.screenshot.visible_portion()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#only-scroll-if-necessary","title":"Only Scroll If Necessary","text":"<p>Instead of checking whether an element is visible in the viewport before scrolling to it...</p> <pre><code>if not browser.check_if.is_in_viewport(\"//xpath/to/element\"):\n    browser.scroll.into_view(\"//xpath/to/element\")\n</code></pre> <p>... such logic is already combined in this method:</p> <pre><code>browser.scroll.into_view_if_not_in_viewport(\"//xpath/to/element\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/scrolling/#example_2","title":"Example","text":"<p>Example in context where we want to make sure an element is visible in the viewport before taking a screenshot of it:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.scroll.into_view_if_not_in_viewport(\"//xpath/to/element\")\n    browser.screenshot.visible_portion()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/tabs/","title":"How to Open and Manage Tabs","text":"<p>Tabs are a convenient way to organize and navigate multiple web pages within a single browser window. With Browserist, you can easily automate the process of opening and managing tabs.</p>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#basic-usage","title":"Basic Usage","text":"<p>Let's imagine you want to open a web page first and then open another page in a new tab, a basic example would look like this:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_tab(\"https://google.com\")\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#multiple","title":"Multiple","text":"","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#opening-multiple-tabs","title":"Opening Multiple Tabs","text":"<p>Normally, browsers allow you to open a new tab by pressing <code>Ctrl</code> + <code>T</code> in Windows, <code>Cmd</code> + <code>T</code> on a Mac, or by clicking a button in your browser. With Browserist you can automate this, for example based on a list of URLs. This example will open each URL in a new tab:</p> Python<pre><code>from browserist import Browser\n\nurls = [\"https://example.com\", \"https://google.com\", \"https://bing.com\"]\n\nwith Browser() as browser:\n    for url in urls:\n        browser.window.open.new_tab(url)\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#closing-a-tab","title":"Closing a Tab","text":"<p>How to close the current tab or, if it's the last tab in a window, the current browser window:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_tab(\"https://google.com\")\n    browser.window.close()\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#switching-between-tabs","title":"Switching Between Tabs","text":"<p>Switching between tabs is a common task when using a browser. Instead of either clicking a tab to switch to it or using a keyboard shortcut to cycle through open tabs, you can automate this with Browserist:</p> Python<pre><code>from browserist import Browser\n\nurls = [\"https://example.com\", \"https://google.com\", \"https://bing.com\"]\n\nwith Browser() as browser:\n    for i, url in enumerate(urls):\n        browser.window.open.new_tab(url, f\"tab_{i}\")\n</code></pre> <p>Now we can switch between each tab by calling its handle:</p> Python<pre><code>    browser.window.switch_to(\"tab_0\")\n    browser.window.switch_to(\"tab_1\")\n    browser.window.switch_to(\"tab_2\")\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#return-to-the-initial-tab","title":"Return to the Initial Tab","text":"<p>Browserist also keeps track of the initial tab of the original browser window, so you can easily switch back to it:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_tab(\"https://google.com\")\n    browser.window.switch_to_original_window()\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#get-handle-id-of-current-tab","title":"Get Handle ID of Current Tab","text":"<p>Under the hood, Browserist uses handle IDs to manage and identify open windows and tabs. You can get the handle ID of the current tab to switch back to it later:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    base_handle_id = browser.window.handle.current()\n    browser.window.open.new_tab(\"https://google.com\")\n    browser.window.switch_to(base_handle_id)\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#example","title":"Example","text":"","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/tabs/#get-list-of-urls-from-open-tabs","title":"Get List of URLs from Open Tabs","text":"<p>Because a link can redirect to a different destination than the original URL, you sometimes want to capture the actual destination of each page. Here is an example of how to capture all the links from a web page and open them in new tabs:</p> Python<pre><code>from browserist import Browser\n\nresults = []\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    all_links = browser.get.url.from_links(\"//a\")\n    for link in all_links:\n        browser.window.open.new_tab(link)\n        current_url = browser.get.url.current()\n        results.append(current_url)\n\nprint(results)\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/window-size/","title":"How to Adjust Window Size","text":"<p>The window size defines the outer size of the browser window. If you want to change the inner size, check the viewport section.</p>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#general-window-sizes","title":"General Window Sizes","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#full-screen","title":"Full Screen","text":"<p>How to fill the entire screen. Similar to pressing F11 in most browsers:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.fullscreen()\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#maximized","title":"Maximized","text":"<p>How to enlarge the browser window to the maximum allowed size:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.maximize()\n    browser.open.url(\"https://example.com\")\n</code></pre> <p>Info</p> <p>For most operating systems, the window will fill the screen, without blocking the operating system's own menus and toolbars. Obviously, the size of the browser window also depends on the device and its screen resolution.</p>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#minimized","title":"Minimized","text":"<p>Minimizing the window typically hides the window in the system tray, though the exact behavior may vary depending on the operating system:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.minimize()\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#specific-window-size","title":"Specific Window Size","text":"","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#set","title":"Set","text":"<p>You can resize the browser window to a specific size, either vertically, horizontally, or both at the same time.</p> <p>Info</p> <p>The size of the browser window is limited by several factors, including the operating system, the screen resolution of the monitor, and the different minimum sizes of different browser types. The resizing methods can therefore only attempt to set a specific size where possible.</p>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#size","title":"Size","text":"<p>How to set the browser window to a specific size, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.set.size(800, 600)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#width","title":"Width","text":"<p>Similarly, only set the width to a specific size, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.set.width(800)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#height","title":"Height","text":"<p>Similarly, only set the height to a specific size, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.set.height(600)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#get","title":"Get","text":"<p>You can get the size of the browser window vertically, horizontally or both at the same time.</p>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#size_1","title":"Size","text":"<p>For example, how to get the current window size and decrease it by 10 pixels both in width and height, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    width, height = browser.window.get.size()\n    browser.window.set.width(width - 10, height - 10)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#width_1","title":"Width","text":"<p>Similarly, only decrease the width by 10 pixels, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    width = browser.window.get.width()\n    browser.window.set.width(width - 10)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/window-size/#height_1","title":"Height","text":"<p>Similarly, only decrease the height by 10 pixels, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    height = browser.window.get.height()\n    browser.window.set.height(height - 10)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation"]},{"location":"user-guide/navigation/windows/","title":"How to Open and Manage Windows","text":"<p>When you want to open multiple web pages in separate browser windows, Browserist makes it easy to organize and automate your workflow.</p>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#basic-usage","title":"Basic Usage","text":"<p>Let's imagine you want to open a web page first and then open another page in a new window, a basic example would look like this:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_window(\"https://google.com\")\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#multiple","title":"Multiple","text":"","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#opening-multiple-windows","title":"Opening Multiple Windows","text":"<p>Normally, browsers allow you to open a new window by pressing <code>Ctrl</code> + <code>N</code> in Windows or <code>Cmd</code> + <code>N</code> on a Mac. With Browserist you can automate this, for example based on a list of URLs. This example will open each URL in a new window:</p> Python<pre><code>from browserist import Browser\n\nurls = [\"https://example.com\", \"https://google.com\", \"https://bing.com\"]\n\nwith Browser() as browser:\n    for url in urls:\n        browser.window.open.new_window(url)\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#closing-a-window","title":"Closing a Window","text":"<p>How to close the current tab or, if it's the last tab in a window, the current browser window:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_window(\"https://google.com\")\n    browser.window.close()\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#switching-between-windows","title":"Switching Between Windows","text":"<p>Switching between windows is a common task when using a browser. Instead of either clicking a window to switch to it or using a keyboard shortcut to cycle through open windows, you can automate this with Browserist:</p> Python<pre><code>from browserist import Browser\n\nurls = [\"https://example.com\", \"https://google.com\", \"https://bing.com\"]\n\nwith Browser() as browser:\n    for i, url in enumerate(urls):\n        browser.window.open.new_window(url, f\"window_{i}\")\n</code></pre> <p>Now we can switch between each window by calling its handle:</p> Python<pre><code>    browser.window.switch_to(\"window_0\")\n    browser.window.switch_to(\"window_1\")\n    browser.window.switch_to(\"window_2\")\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#return-to-the-initial-window","title":"Return to the Initial Window","text":"<p>Browserist also keeps track of the initial tab of the original browser window, so you can easily switch back to it:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.window.open.new_window(\"https://google.com\")\n    browser.window.switch_to_original_window()\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#get-handle-id-of-current-window","title":"Get Handle ID of Current Window","text":"<p>Under the hood, Browserist uses handle IDs to manage and identify open windows and tabs. You can get the handle ID of the current window to switch back to it later:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    base_handle_id = browser.window.handle.current()\n    browser.window.open.new_window(\"https://google.com\")\n    browser.window.switch_to(base_handle_id)\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#example","title":"Example","text":"","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#get-list-of-urls-from-open-windows","title":"Get List of URLs from Open Windows","text":"<p>Because a link can redirect to a different destination than the original URL, you sometimes want to capture the actual destination of each page. Here is an example of how to capture all the links from a web page and open them in new windows:</p> Python<pre><code>from browserist import Browser\n\nresults = []\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    all_links = browser.get.url.from_links(\"//a\")\n    for link in all_links:\n        browser.window.open.new_window(link)\n        current_url = browser.get.url.current()\n        results.append(current_url)\n\nprint(results)\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#position","title":"Position","text":"<p>You can also control the position of the browser window on the screen. This can be useful when you want to automate the placement of windows on your screen.</p>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#absolute","title":"Absolute","text":"<p>How to move the window to the chosen coordinate of the screen, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.window.set.position(100, 100)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/navigation/windows/#relative","title":"Relative","text":"<p>Get the current position of the window and move it by 10 pixels in both axes, if possible:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    x, y = browser.window.get.position()\n    browser.window.set.position(x - 10, y - 10)\n    browser.open.url(\"https://example.com\")\n</code></pre>","tags":["Tutorial","Navigation","Tabs and Windows"]},{"location":"user-guide/tools/count-elements/","title":"How to Count Elements","text":"<p>Sometimes it's useful to count the elements of a specific selector, either to check whether the expected number of elements are present, or to automate an iteration over them.</p>","tags":["Tutorial"]},{"location":"user-guide/tools/count-elements/#use-case-for-counting-search-results","title":"Use Case for Counting Search Results","text":"<p>For instance, you may want to know how many search results are displayed on a search engine result page:</p> Python<pre><code>from browserist import Browser\n\nsearch_term = \"test\"\nsearch_results_xpath = \"//*[@class='search-result-item']\"\n\nwith Browser() as browser:\n    browser.open.url(f\"https://www.search.com/web?q={search_term}\")\n    number_of_results = browser.tool.count_elements(search_results_xpath)\n    if number_of_results &gt; 0:\n        for i in range(1, number_of_results + 1):\n            search_result_text = browser.get.text(f\"{search_results_xpath}[{i}]\")\n            print(f\"Search result {i}: {search_result_text}\")\n    else:\n        print(\"No search results found.\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/count-elements/#other-examples","title":"Other Examples","text":"","tags":["Tutorial"]},{"location":"user-guide/tools/count-elements/#images","title":"Images","text":"<p>How to count the number of <code>&lt;img&gt;</code> image elements on a page:</p> <pre><code>number_of_images = browser.tool.count_elements(\"//img\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/count-elements/#links","title":"Links","text":"<p>How to count the number of <code>&lt;a&gt;</code> link elements on a page:</p> <pre><code>number_of_links = browser.tool.count_elements(\"//a\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/count-elements/#headlines","title":"Headlines","text":"<p>How to count the number of <code>&lt;h1&gt;</code> headline elements on a page:</p> <pre><code>number_of_headlines = browser.tool.count_elements(\"//h1\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/count-elements/#paragraphs","title":"Paragraphs","text":"<p>How to count the number of <code>&lt;p&gt;</code> paragraph elements on a page:</p> <pre><code>number_of_paragraphs = browser.tool.count_elements(\"//p\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/execute-javascript/","title":"How to Execute JavaScript","text":"<p>When automating the execution of JavaScript, this can either be done with or without a <code>WebElement</code>.</p>","tags":["Tutorial"]},{"location":"user-guide/tools/execute-javascript/#without-webelement","title":"Without <code>WebElement</code>","text":"<p>Basic usage of JavaScript execution:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.tool.execute_script(\"alert('Hello world!')\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/execute-javascript/#with-webelement","title":"With <code>WebElement</code>","text":"<p>The <code>WebElement</code> is used when you need to interact with a specific element on the page:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    element = browser.get.element(\"//xpath/to/element\")\n    browser.tool.execute_script(\"arguments[0].scrollIntoView();\", element)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/execute-javascript/#from-a-file","title":"From a File","text":"<p>Sometimes you want to run a script that is stored in a file. This can be done by reading the file before running the script:</p> Python<pre><code>from browserist import Browser\n\nwith open(\"/path/to/script.js\", \"r\") as file:\n    script = file.read()\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.tool.execute_script(script)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/input-validation/","title":"How to Validate User Input","text":"<p>Browserist provides methods to validate user input, such as URLs, XPaths, and other values. This is useful when interacting with users to ensure that the input meets the expected criteria.</p>","tags":["Tutorial"]},{"location":"user-guide/tools/input-validation/#user-input-validation","title":"User Input Validation","text":"<p>Imagine you want to prompt the user to input a value in the terminal and hereafter validate the value before posting the form input:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    user_input = input(\"Input value:\")\n    while not browser.tool.is_input_valid(user_input, r\"regex\"):\n        print(\"Invalid input. Please try again...\")\n        user_input = input(\"Input value:\")\n    browser.input.value(\"//xpath/to/input\", user_input)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/input-validation/#xpath-validation","title":"XPath Validation","text":"<p>How to prompt the user for a valid XPath value in the terminal:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    user_xpath = input(\"Input XPath:\")\n    while not browser.tool.is_xpath_valid(user_xpath)\n        print(\"Invalid XPath. Please try again...\")\n        user_xpath = input(\"Input XPath:\")\n    browser.click.button(user_xpath)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/tools/input-validation/#url-validation","title":"URL Validation","text":"<p>How to prompt the user for a valid URL in the terminal:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    user_url = input(\"Input URL:\")\n    while not browser.tool.is_url_valid(user_url)\n        print(\"Invalid URL. Please try again...\")\n        user_url = input(\"Input URL:\")\n    browser.open.url(user_url)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/","title":"How to Wait Until a Condition Is Met","text":"<p>This group of methods apply the following conditions to either the page title, text of an element, or URL:</p> <ul> <li>Changes</li> <li>Contains (non exact match)</li> <li>Equals (exact match)</li> </ul> <p>Adjust the Timeout</p> <p>Most methods have a default timeout of 5 seconds. If the element hasn't been found by then, an error is thrown. You can shorten or lengthen this by passing a timeout value in seconds. A few examples:</p> <pre><code>browser.wait.until.page_title.changes(\"baseline text\", timeout=10)\n</code></pre> <pre><code>browser.wait.until.text.contains(\"//h1\", \"example\", timeout=8)\n</code></pre> <pre><code>browser.wait.until.url.equals(\"https://example.com/\", timeout=20)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#page-title","title":"Page Title","text":"","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#changes","title":"Changes","text":"<p>Wait until the page title changes from a baseline text:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    baseline_text = browser.get.page_title()\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.page_title.changes(baseline_text)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#contains","title":"Contains","text":"<p>Wait until the page title contains a text partial:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.page_title.contains(\"Example\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#equals","title":"Equals","text":"<p>Wait until the page title equals a specific text:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.page_title.equals(\"Example Domain\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#text","title":"Text","text":"","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#changes_1","title":"Changes","text":"<p>Wait until the text of an element changes from a baseline text:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    baseline_text = browser.get.text(\"//h1\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.text.changes(\"//h1\", baseline_text)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#contains_1","title":"Contains","text":"<p>Wait until the text of an element contains a text partial:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.text.contains(\"//h1\", \"Example\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#equals_1","title":"Equals","text":"<p>Wait until the text of an element equals a specific text:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.text.equals(\"//h1\", \"Example Domain\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#url","title":"URL","text":"","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#changes_2","title":"Changes","text":"<p>Wait until the URL changes from a baseline URL:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    baseline_url = browser.get.url.current()\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.url.changes(baseline_url)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#contains_2","title":"Contains","text":"<p>Wait until the URL contains a text partial:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.url.contains(\"some_page_name\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/conditional/#equals_2","title":"Equals","text":"<p>Wait until the URL equals a specific URL:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.url.equals(\"https://example.com/some_page_name\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/explicit-in-seconds/","title":"How to Wait for Explicit Time","text":"<p>While most wait methods are relative to when specific elements become present on the web page, it's also possible to let the browser sleep for an absolute number of seconds.</p>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/explicit-in-seconds/#specific-time-in-seconds","title":"Specific Time in Seconds","text":"<p>Example of how to let the browser sleep for 5 seconds:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.seconds(5)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/explicit-in-seconds/#random-time-in-seconds","title":"Random Time in Seconds","text":"<p>Sometimes you want the browser appear less like a bot by randomizing the wait interval. Example of how to let the browser sleep for a random time between 3 and 20 seconds:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.random_seconds(3, 20)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/","title":"How to Wait for Implicit Time","text":"<p>Most of Browserist's methods already implicitly wait for certain elements on the page to be ready \u2013 so you don't have to worry about it \u2013 but sometimes you may want to wait for certain elements to be ready. This is especially useful for single page application elements handled by JavaScript, but also for standard HTML that doesn't load immediately.</p>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#wait-for-item-to-be-ready","title":"Wait for Item to Be Ready","text":"","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#element","title":"Element","text":"","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#appear","title":"Appear","text":"<p>This helper function ensures that DOM elements are ready before processing. The example waits for any H1 heading to be ready:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.for_element(\"//h1\")\n</code></pre> <p>Tip</p> <p>You often don't need to use this method, as most other methods already implicitly wait for elements to be ready under the hood. For example, if you want to get the text of a heading, you can simply use:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    heading = browser.get.text(\"//h1\")\n    print(heading)\n</code></pre> <p>You don't need to specify the wait <code>browser.wait.for_element(\"//xpath/to/element\")</code> like this:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.for_element(\"//h1\")\n    heading = browser.get.text(\"//h1\")\n    print(heading)\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#disappear","title":"Disappear","text":"<p>Conversely, you can also wait for an element to disappear from the DOM. This is useful for single page applications where elements are removed and added dynamically. An example:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.input.value(\"//xpath/to/input\", \"test\")\n    browser.click.button(\"//xpath/to/button\")\n    browser.wait.until.element_disappears(\"//xpath/to/input\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#image","title":"Image","text":"<p>Sometimes <code>img</code> image elements are present in the DOM, but the actual images are not yet loaded after first page paint, and so they will be loaded lazily in the background. This example waits until the image(s) on the page have loaded:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.images_have_loaded()\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#text","title":"Text","text":"<p>Sometimes an element may be ready in the DOM, but the text hasn't been injectd. This helper function checks and waits for the element to contain any text:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.contains_any_text(\"//h1\")\n</code></pre>","tags":["Tutorial"]},{"location":"user-guide/wait-methods/implicit-for-elements/#clickable","title":"Clickable","text":"<p>This example is useful for elements that are present in the DOM, yet are not ready to be clicked:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.wait.until.is_clickable(\"//xpath/to/button\")\n    browser.click.button(\"//xpath/to/button\")\n</code></pre> <p>Adjust the Timeout</p> <p>Most methods have a default timeout of 5 seconds. If the element hasn't been found by then, an error is thrown. You can shorten or lengthen this by passing a timeout value in seconds. A few examples:</p> <pre><code>heading = browser.get.text(\"//h1\", timeout=10)\n</code></pre> <pre><code>browser.wait.until.contains_any_text(\"//h1\", timeout=8)\n</code></pre>","tags":["Tutorial"]},{"location":"xpath/absolute-and-relative/","title":"How to Use Absolute and Relative XPath Expressions","text":"<p>An XPath expression can be written in two ways:</p> <ul> <li>Absolute: Starts with <code>/</code></li> <li>Relative: Starts with <code>//</code></li> </ul> <p>For the examples below, let's imagine a simple web page:</p> HTML<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;main&gt;\n      &lt;div id=\"container\"&gt;\n        &lt;h1&gt;Headline&lt;/h1&gt;\n        &lt;p&gt;This is the body text&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["Tutorial","XPath"]},{"location":"xpath/absolute-and-relative/#absolute-xpath","title":"Absolute XPath","text":"<p>To target the <code>&lt;h1&gt;</code> headline element with an absolute XPath expression, use this:</p> <pre><code>/html/body/main/div/h1\n</code></pre> <p>This is also called a full XPath. Most web pages are much more complicated than this, e.g. with containers and other nested elements, and so you end up typing cumbersome, long XPath expressions. Most often you want to avoid absolute XPath expressions and use the relative variation instead.</p>","tags":["Tutorial","XPath"]},{"location":"xpath/absolute-and-relative/#relative-xpath","title":"Relative XPath","text":"<p>With a relative XPath expression, you can target an <code>id</code> attribute or other anchor points to simplify the expression. This also makes it more readable:</p> <pre><code>//div[@id='container']/h1\n</code></pre> <p>Or even simpler:</p> <pre><code>//h1\n</code></pre> <p>This way, the relative XPath simply searches for all child elements of the root node that matches the condition.</p> <p>Tip: Use <code>*</code> as Wildcard Selector</p> <p>While <code>//div[@id='container']</code> targets a <code>&lt;div&gt;</code> element with a specific <code>id</code>, it's often favourable to use a generic selector. Try using the asterisk <code>*</code> in <code>//*[@id='container']</code> instead. This is a wildcard selector that targets all element types whether it's a <code>&lt;div&gt;</code>, <code>&lt;h1&gt;</code>, or any other tag.</p>","tags":["Tutorial","XPath"]},{"location":"xpath/absolute-and-relative/#multiple-conditions-in-one-expression","title":"Multiple Conditions in One Expression","text":"<p>Let's imagine a more complicated page with several nested children to <code>&lt;div id=\"container\"&gt;</code> where we want to click the <code>&lt;a&gt;</code> link element:</p> HTML<pre><code>&lt;main&gt;\n  &lt;div id=\"container\"&gt;\n    &lt;section&gt;\n      &lt;h1&gt;Headline&lt;/h1&gt;\n      &lt;p&gt;This is the body text&lt;/p&gt;\n      &lt;button&gt;\n        &lt;a href=\"https://example.com\"&gt;Click me&lt;/a&gt;\n      &lt;/button&gt;\n    &lt;/section&gt;\n  &lt;/div&gt;\n&lt;/main&gt;\n</code></pre> <p>How do we target the <code>&lt;a&gt;</code> link element efficiently?</p> <p>We can simply use multiple relative statements similar to this pattern <code>//\u2026//\u2026</code> in one expression:</p> <pre><code>//*[@id='container']//a\n</code></pre>","tags":["Tutorial","XPath"]},{"location":"xpath/basics/","title":"XPath Basics \ud83d\udd0d","text":"<p>XPath is a query language that is used for traversing through not just an HTML document \u2013 but also XML, XSLT and other document types. It is used commonly to search particular elements or attributes with matching patterns, and XPath includes over 200 built-in functions.</p> <p>While we use XPath in context of HTML and Python, it's commonly used in other programming languages like JavaScript, Java, C#, C++, and many more.</p>","tags":["Tutorial","XPath"]},{"location":"xpath/basics/#how-its-used-in-browserist","title":"How It's Used in Browserist","text":"<p>XPath is an integral of Browserist to target elements of a web page. For example, we can easily get the text of the first <code>&lt;h1&gt;</code> headline element without knowinw its exact location on the page:</p> Python<pre><code>text = browser.get.text(\"//h1[1]\")\nprint(text)\n</code></pre> <p>Or we can easily input values in a form if we know the <code>id</code> attribute of the input field. Again, we don't want to know the exact location of the input field on the page:</p> Python<pre><code>browser.input.value(\"//*[@id='username']\", \"John Doe\")\nbrowser.input.value(\"//*[@id='password']\", \"password123\")\n</code></pre> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial","XPath"]},{"location":"xpath/browserist-compared-to-selenium/","title":"Browserist Compared to Selenium","text":"<p>Browserist is an extension to the Selenium that makes web scraping and browser automation even easier. Since Browserist only uses XPath expressions to target web elements, be aware of the differences in syntax.</p>","tags":["Tutorial","XPath","Selenium"]},{"location":"xpath/browserist-compared-to-selenium/#examples-of-syntax-differences","title":"Examples of Syntax Differences","text":"","tags":["Tutorial","XPath","Selenium"]},{"location":"xpath/browserist-compared-to-selenium/#get-element-by-id","title":"Get Element by ID","text":"Browserist with XPathSeleniumBoth <pre><code>browser.get.element(\"//*[@id='lname']\")\n</code></pre> <pre><code>driver.find_element(By.ID, \"lname\")\n</code></pre> <pre><code># Browserist with XPath:\nbrowser.get.element(\"//*[@id='lname']\")\n\n# Selenium:\ndriver.find_element(By.ID, \"lname\")\n</code></pre>","tags":["Tutorial","XPath","Selenium"]},{"location":"xpath/browserist-compared-to-selenium/#get-element-by-class","title":"Get Element by Class","text":"Browserist with XPathSeleniumBoth <pre><code>browser.get.element(\"//*[@class='information']\")\n</code></pre> <pre><code>driver.find_element(By.CLASS_NAME, \"information\")\n</code></pre> <pre><code># Browserist with XPath:\nbrowser.get.element(\"//*[@class='information']\")\n\n# Selenium:\ndriver.find_element(By.CLASS_NAME, \"information\")\n</code></pre>","tags":["Tutorial","XPath","Selenium"]},{"location":"xpath/browserist-compared-to-selenium/#get-element-by-xpath","title":"Get Element by XPath","text":"Browserist with XPathSeleniumBoth <pre><code>browser.get.element(\"//div[@class='information']\")\n</code></pre> <pre><code>driver.find_element(By.XPATH, \"//div[@class='information']\")\n</code></pre> <pre><code># Browserist with XPath:\nbrowser.get.element(\"//div[@class='information']\")\n\n# Selenium:\ndriver.find_element(By.XPATH, \"//div[@class='information']\")\n</code></pre>","tags":["Tutorial","XPath","Selenium"]},{"location":"xpath/browserist-compared-to-selenium/#why-use-xpath","title":"Why Use XPath?","text":"<p>While Selenium offers several methods to target web elements \u2013 for instance <code>By.ID</code>, <code>By.CLASS_NAME</code>, etc. \u2013 Browserist solely uses XPath to locate web elements in the DOM of a web page. Why so?</p> <p>XPath is a simple, yet powerful tool similar to a Swiss Army knife that gets the job done with compact code. And so you only need to master a single vocabulary instead of multiple <code>By</code> class options and importing extra modules from Selenium.</p>","tags":["Tutorial","XPath","Selenium"]},{"location":"xpath/cheatsheets/axes/","title":"XPath Cheatsheet for Axes","text":"<p>Instead of just traversing down the hierarchy, there are multiple axes to query the node tree. An axis is used when we want to query nodes nearby other node or other hierarchical relationships.</p> Axis Description Example <code>ancestor</code> Selects all ancestors (parent, grandparent, etc.) of current node. <code>//h1/ancestor::*</code> <code>ancestor-or-self</code> Selects all ancestors (parent, grandparent, etc.) of current node and the current node itself. <code>//h1/ancestor-or-self::*</code> <code>attribute</code> Selects all attributes of current node. <code>//h1/attribute::*</code> <code>child</code> Selects all children of current node. <code>//h1/child::*</code> <code>descendant</code> Selects all descendants (children, grandchildren, etc.) of current node. <code>//h1/descendant::*</code> <code>descendant-or-self</code> Selects all descendants (children, grandchildren, etc.) of current node and the current node itself. <code>//h1/descendant-or-self::*</code> <code>following</code> Selects everything in the document after the closing tag of the current node. <code>//h1/following::*</code> <code>following-sibling</code> Selects all siblings after the current node. <code>//h1/following-sibling::*</code> <code>namespace</code> Selects all namespace nodes of current node. <code>//h1/namespace::*</code> <code>parent</code> Selects the parent of current node. <code>//h1/parent::*</code> or <code>//h1/..</code> <code>preceding</code> Selects all nodes that appear before the current node in the document, except ancestors, attribute nodes and namespace nodes. <code>//h1/preceding::*</code> <code>preceding-sibling</code> Selects all siblings before the current node. <code>//h1/preceding-sibling::*</code> <code>self</code> Selects the current node. <code>//h1/self::*</code> or <code>//h1</code>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/links/","title":"XPath Cheatsheet for Links and URLs","text":"<p>Combine attributes and functions to target specific link nodes. But first, how to get all <code>&lt;a&gt;</code> link nodes:</p> <pre><code>//a\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/links/#exact-matching","title":"Exact Matching","text":"<p>Get all HTTPS links using the <code>starts-with()</code> function:</p> <pre><code>//a[starts-with(@href, 'https')]\n</code></pre> <p>Get all non-HTTPS links. As above, but negated by the <code>non()</code> function:</p> <pre><code>//a[not(starts-with(@href, 'https'))]\n</code></pre> <p>Get all links for MP3 audio files using the <code>ends-with()</code> function:</p> <pre><code>//a[ends-with(@href, '.mp3')]\n</code></pre> <p>Get all links without a trailing slash by combining the <code>not()</code> and <code>ends-with()</code> functions.</p> <pre><code>//a[not(ends-with(@href, '/'))]\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/links/#non-exact-matching","title":"Non-Exact Matching","text":"<p>Get all blog links that using the <code>contains()</code> function:</p> <pre><code>//a[contains(@href, 'blog')]\n</code></pre> <p>Negate the above to get all non-blog links using the <code>not()</code> function:</p> <pre><code>//a[not(contains(@href, 'blog'))]\n</code></pre> <p>Get all blog links about food using the <code>and</code> operator:</p> <pre><code>//a[contains(@href, 'blog') and contains(@href, 'food')]\n</code></pre> <p>Get all blog links that aren't about food by combining the <code>and</code> and <code>not()</code> operators:</p> <pre><code>//a[contains(@href, 'blog') and not(contains(@href, 'food'))]\n</code></pre> <p>Get all blog or news links using the <code>or</code> operator:</p> <pre><code>//a[contains(@href, 'blog') or contains(@href, 'news')]\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/links/#other","title":"Other","text":"<p>Get all links with a URL longer than 55 characters using the <code>string-length()</code> function:</p> <pre><code>//a[string-length(@href) &gt; 55]\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/","title":"XPath Cheatsheet for How to Select Nodes","text":"","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/#absolute-expressions","title":"Absolute Expressions","text":"<p>Use absolute XPath expressions to target a single node:</p> XPath Description <code>/html/head/title</code> Get the page title node. <code>/html/body</code> Get the <code>&lt;body&gt;</code> element.","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/#relative-expressions","title":"Relative Expressions","text":"<p>Use relative XPath expressions to target multiple nodes:</p> XPath Description <code>//img</code> Get all <code>&lt;img&gt;</code> image nodes. <code>//h1</code> Get all <code>&lt;h1&gt;</code> headline nodes.","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/#indexing","title":"Indexing","text":"<p>Combine relative XPath expressions with indexing to target specific nodes:</p> XPath Description <code>//ul[1]/li[3]</code> Get the third <code>&lt;li&gt;</code> child node of the first <code>&lt;ul&gt;</code> list. <code>//ul[1]/li[position()&gt;1]</code> Get all <code>&lt;li&gt;</code> child nodes of the first <code>&lt;ul&gt;</code> list except the first one. <code>//form[@id='login']/input[3]</code> Get the third <code>&lt;input&gt;</code> child node of a form with a specific <code>id</code>. <code>//h2[1]//p</code> Of the first <code>&lt;h2&gt;</code> headline, get any of its child <code>&lt;p&gt;</code> paragrapds.","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/#attributes","title":"Attributes","text":"<p>Get nodes with certain attributes with the <code>@</code> selector:</p> XPath Description <code>//div[@class='some_class']</code> Get all <code>&lt;div&gt;</code> nodes with with a specific <code>class</code> attribute. <code>//*[@id='some_id']</code> Get all nodes with the <code>*</code> wildcard selector with a specific <code>id</code> attribute. <code>//input[@type=\"password\"]</code> Get all <code>&lt;input&gt;</code> nodes that are a password type.","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/#parents-and-children","title":"Parents and Children","text":"<p>Though we most often traverse down the hierachy with <code>/</code> or <code>//</code>, sometimes we need to get parent nodes with <code>..</code>:</p> XPath Description <code>//h1/..</code> Get the parent(s) of any <code>&lt;h1&gt;</code> headline nodes. <code>//*[@id='some_id']/..</code> Get the parent of a node with a specific <code>id</code>. <code>//li[1]/../li[9]</code> Combine parent and children to jump to the ninth list element of the first list. <p>See more examples in the axes section.</p>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/node-selection/#union-of-several-paths","title":"Union of Several Paths","text":"<p>Use the pipe <code>|</code> to combine several paths in union:</p> XPath Description <code>//h2 | //h3</code> Get all <code>&lt;h2&gt;</code> and <code>&lt;h3&gt;</code> headline nodes.","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/seo/","title":"XPath Cheatsheet for Search Engine Optimisation (SEO)","text":"<p>Certain XPath expressions are especially useful for search engine optimisation.</p>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/seo/#content","title":"Content","text":"","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/seo/#h1-headline","title":"H1 Headline","text":"<p>Count all <code>&lt;h1&gt;</code> nodes to ensure that a web page has and only has one main headline. Should not be 0 or larger than 1:</p> <pre><code>count(//h1)\n</code></pre> Example <p>How to use Browserist to check whether a web page has exactly one <code>&lt;h1&gt;</code> headline tag:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    assert browser.tool.count_elements(\"//h1\") == 1\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/seo/#image-alt-text","title":"Image Alt Text","text":"<p>Ensure that all images on web page have an alt text.</p> <pre><code>//img[not(@alt)]\n</code></pre> Example <p>How to use Browserist to check whether a web page has images without alt text:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    if browser.check_if.does_exist(\"//img\"):\n        alt_texts = browser.get.attribute.values(\"//img\", \"alt\")\n        for alt_text in alt_texts:\n            assert len(alt_text) &gt; 0\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/seo/#meta-data","title":"Meta Data","text":"<p>Similarly, ensure that a web page has meta description. Should not be 0 or larger than 1:</p> <pre><code>count(//meta[@name='description']/@content)\n</code></pre> <p>And you can ensure that length of the meta description is between 50 and 160 characters by using the <code>string-length()</code> function:</p> <pre><code>string-length(/html/head/meta[@name='description']/@content) &gt;= 50\nstring-length(/html/head/meta[@name='description']/@content) &lt;= 160\n</code></pre> <p>Check if a web page has a canonical URL. If it has, it should only be 1:</p> <pre><code>count(//link[@rel='canonical'])\n</code></pre> <p>Ensure that a web page has a robots meta tag. Should not be 0 or larger than 1:</p> <pre><code>count(//meta[@name='robots'])\n</code></pre> Example <p>How to use Browserist to check whether a web page has relevant meta data:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n\n    if browser.check_if.does_exist(\"//link[@rel='canonical']\"):\n        assert browser.tool.count_elements(\"//link[@rel='canonical']\") &lt;= 1\n\n    assert browser.tool.count_elements(\"//meta[@name='robots']\") == 1\n\n    meta_description = browser.get.attribute.value(\"//meta[@name='description']\", \"content\")\n    assert 50 &lt;= len(meta_description) &lt;= 160\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/seo/#page-title","title":"Page Title","text":"<p>Ensure that a web page doesn't have an empty title:</p> <pre><code>/html/head/title[. != '']\n</code></pre> Example <p>How to use Browserist to check whether a web page has a page title:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    assert browser.check_if.does_exist(\"/html/head/title[. != '']\")\n</code></pre> <p>Alternatively, there's a simpler solution without using XPath:</p> Python<pre><code>    assert browser.get.page_title() != \"\"\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/text/","title":"XPath Cheatsheet for Text","text":"<p>When you need just the content of a node, use the <code>text()</code> function:</p> <pre><code>//h1/text()\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/text/#exact-matching","title":"Exact Matching","text":"<p>Target all <code>&lt;button&gt;</code> nodes with a specific text content:</p> <pre><code>//button[text()='some text']\n</code></pre> <p>Get all <code>&lt;p&gt;</code> nodes that start with placeholder text using the <code>starts-with()</code> function:</p> <pre><code>//p[starts-with(text(), 'Lorem ipsum')]\n</code></pre> <p>Ensure that all paragraphs end with a dot by getting all <code>&lt;p&gt;</code> nodes and combining the <code>not()</code> and <code>ends-with()</code> functions:</p> <pre><code>`//p[not(ends-with(text(), '.'))]`\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/cheatsheets/text/#non-exact-matching","title":"Non-Exact Matching","text":"<p>Get all <code>&lt;h2&gt;</code> header nodes that contains some text using the <code>contains()</code> function:</p> <pre><code>//h2[contains(text(), 'some text')]\n</code></pre> <p>Get all submit buttons using the <code>normalize-space()</code> function that strips leading and trailing whitespace, including sequences of whitespace characters replaced with a single space. This is useful to target buttons with different text content, yet the same meaning:</p> <pre><code>//button[normalize-space()='submit']\n</code></pre>","tags":["Tutorial","Cheatsheet","XPath"]},{"location":"xpath/tips-and-tricks/conditional-functions/","title":"How to Use Conditional XPath Functions","text":"","tags":["Tutorial","XPath"]},{"location":"xpath/tips-and-tricks/conditional-functions/#match-elements-with-specific-text","title":"Match Elements with Specific Text","text":"<p>Sometimes you can't use attributes to easily target elements. A calendar is a good example of this. Let's imagine we want to select the first day of a given month:</p> HTML<pre><code>&lt;div class=\"calendar\"&gt;\n  &lt;div class=\"previous\"&gt;&amp;lt;&lt;div&gt;\n  &lt;div class=\"month\"&gt;\n    June 2023\n  &lt;/div&gt;\n  &lt;div class=\"next\"&gt;&amp;gt;&lt;div&gt;\n\n  &lt;ul class=\"weekdays\"&gt;\n    &lt;li&gt;Mo&lt;/li&gt;\n    &lt;li&gt;Tu&lt;/li&gt;\n    &lt;li&gt;We&lt;/li&gt;\n    &lt;li&gt;Th&lt;/li&gt;\n    &lt;li&gt;Fr&lt;/li&gt;\n    &lt;li&gt;Sa&lt;/li&gt;\n    &lt;li&gt;Su&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;ul class=\"dates\"&gt;\n    &lt;li class=\"previous_month\"&gt;29&lt;/li&gt;\n    &lt;li class=\"previous_month\"&gt;30&lt;/li&gt;\n    &lt;li class=\"previous_month\"&gt;31&lt;/li&gt;\n    &lt;li&gt;1&lt;/li&gt;\n    &lt;li&gt;2&lt;/li&gt;\n    &lt;li class=\"today\"&gt;3&lt;/li&gt;\n    &lt;li&gt;4&lt;/li&gt;\n    ...\n    &lt;li&gt;29&lt;/li&gt;\n    &lt;li&gt;30&lt;/li&gt;\n    &lt;li class=\"next_month\"&gt;1&lt;/li&gt;\n    &lt;li class=\"next_month\"&gt;2&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <p>We can locate June 1 by using by indexing <code>&lt;li&gt;1&lt;/li&gt;</code> as the fourth date element: <code>//ul[@class='dates']/li[4]</code>. But what happens in July, August, etc. when the first day of the month isn't a Thursday?</p> <p>Let's instead use a conditional function for XPath:</p> <pre><code>//ul[@class='dates']/li[text()='1']\n</code></pre> <p>The <code>\u2026/li[text()='1']</code> part will return the first exact text match of <code>1</code> (and ignore any later matches).</p> <p>If you want to select other dates, why not create a function in Python that dynamically generates the XPath expression for you?</p> Python<pre><code>def get_xpath_for_calendar_date(date: int) -&gt; str:\n    return f\"//ul[@class='dates']/li[text()='{date}']\"\n</code></pre> <p>Tip</p> <p>While the <code>\u2026/li[text()='1']</code> method locates the first exact match of <code>1</code>, it's sometimes favourable to locate the first non-exact match with either the <code>\u2026/li[contains(text(), '1')]</code> or <code>\u2026/li[normalize-space()='1']</code>  methods as they handle eventual white space more graceful. Despite the differences, all of these conditional methods would yield the correct answer in the calendar case.</p> <p>Learn more pattern matching techniques for text or tips for node selection in the XPath cheatsheets section.</p>","tags":["Tutorial","XPath"]},{"location":"xpath/tips-and-tricks/conditional-functions/#example","title":"Example","text":"<p>All in all, how to apply this for web scraping and browser automation using Browserist:</p> Python<pre><code>from browserist import Browser\n\ndef get_xpath_for_calendar_date(date: int) -&gt; str:\n    return f\"//ul[@class='dates']/li[text()='{date}']\"\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.click.button(\"//xpath/to/open/calendar\")\n    xpath_for_date = get_xpath_for_calendar_date(12)\n    browser.click.button(xpath_for_date)\n</code></pre>","tags":["Tutorial","XPath"]},{"location":"xpath/tips-and-tricks/target-attributes/","title":"Tips and Tricks for XPath Expressions","text":"<p>XPath is a powerful tool that allows you to filter and select nodes on an HTML page. The right approach to XPath can make your life even easier when doing web scraping and browser automation.</p> <p>Find examples for both beginners and advanced users in this section.</p>","tags":["Tutorial","XPath"]},{"location":"xpath/tips-and-tricks/target-attributes/#how-to-target-html-attributes","title":"How to Target HTML Attributes","text":"<p>When targeting elements in an HTML document, it's often best to use attributes like <code>id</code>, <code>name</code>, or <code>type</code> to make your XPath expressions more robust. This is especially useful when the HTML layout changes, but the attributes remain constant.</p> <p>Let's imagine a registration form on a web page where we want to target the <code>&lt;input&gt;</code> elements:</p> HTML<pre><code>&lt;div class=\"container\"&gt;\n  &lt;form id=\"registration_form\"&gt;\n    &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n    &lt;input type=\"text\" placeholder=\"Enter email\" name=\"email\" id=\"email\" required /&gt;\n\n    &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n    &lt;input type=\"password\" placeholder=\"Enter password\" name=\"password\" id=\"password\" required /&gt;\n\n    &lt;label for=\"password_repeat\"&gt;Repeat password&lt;/label&gt;\n    &lt;input type=\"password\" placeholder=\"Repeat password\" name=\"password_repeat\" id=\"password_repeat\" required /&gt;\n\n    &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n</code></pre> <p>Instead of targeting the index <code>//input[1]</code>, <code>//input[2]</code>, etc., we can be more specific and target the <code>id</code> attributes:</p> <pre><code>//input[@id='email']\n//input[@id='password']\n//input[@id='password_repeat']\n</code></pre> <p>Similarly, we can also target other attributes like <code>name</code>:</p> <pre><code>//input[@name='email']\n</code></pre> <p>This will often make your code more stable if the HTML layout changes while the <code>name</code> and <code>id</code> attributes often remain constant. Similarly, the submit button is easily located by the <code>type</code> attribute:</p> <pre><code>//button[@type='submit']\n</code></pre>","tags":["Tutorial","XPath"]},{"location":"xpath/tips-and-tricks/target-attributes/#example","title":"Example","text":"<p>All in all, how to apply this for web scraping and browser automation using Browserist:</p> Python<pre><code>from browserist import Browser\n\nwith Browser() as browser:\n    browser.open.url(\"https://example.com\")\n    browser.input.value(\"//input[@id='email']\", \"user_name@example.com\")\n    browser.input.value(\"//input[@id='password']\", \"some_password\")\n    browser.input.value(\"//input[@id='password_repeat']\", \"some_password\")\n    browser.click.button(\"//button[@type='submit']\")\n</code></pre>","tags":["Tutorial","XPath"]}]}